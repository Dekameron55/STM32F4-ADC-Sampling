
STM32_ADC_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800ab98  0800ab98  0001ab98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a4  0800b0a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0ac  0800b0ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ac  0800b0ac  0001b0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0b0  0800b0b0  0001b0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b8  200001e0  0800b294  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004998  0800b294  00024998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6bd  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037fa  00000000  00000000  0003a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0003f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002662a  00000000  00000000  00040b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7f2  00000000  00000000  00067152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea2fd  00000000  00000000  00081944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bc41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  0016bc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab80 	.word	0x0800ab80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ab80 	.word	0x0800ab80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <vApplicationGetIdleTaskMemory+0x30>)
 8000f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001fc 	.word	0x200001fc
 8000f1c:	200002b0 	.word	0x200002b0

08000f20 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8000f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <vApplicationGetTimerTaskMemory+0x30>)
 8000f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	200004b0 	.word	0x200004b0
 8000f50:	20000564 	.word	0x20000564

08000f54 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f043 030c 	orr.w	r3, r3, #12
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	f043 030c 	orr.w	r3, r3, #12
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f94:	f107 0208 	add.w	r2, r7, #8
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	214e      	movs	r1, #78	; 0x4e
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <lcd_send_cmd+0x5c>)
 8000fa2:	f001 ff6b 	bl	8002e7c <HAL_I2C_Master_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200009f0 	.word	0x200009f0

08000fb4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 030d 	orr.w	r3, r3, #13
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0309 	orr.w	r3, r3, #9
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f043 030d 	orr.w	r3, r3, #13
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	f043 0309 	orr.w	r3, r3, #9
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	214e      	movs	r1, #78	; 0x4e
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <lcd_send_data+0x5c>)
 8001002:	f001 ff3b 	bl	8002e7c <HAL_I2C_Master_Transmit>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200009f0 	.word	0x200009f0

08001014 <lcd_clear>:

void lcd_clear (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f7ff ff9a 	bl	8000f54 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	e005      	b.n	8001032 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001026:	2020      	movs	r0, #32
 8001028:	f7ff ffc4 	bl	8000fb4 <lcd_send_data>
	for (int i=0; i<70; i++)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b45      	cmp	r3, #69	; 0x45
 8001036:	ddf6      	ble.n	8001026 <lcd_clear+0x12>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
    switch (row)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <lcd_put_cur+0x18>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <lcd_put_cur+0x22>
 8001058:	e009      	b.n	800106e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	603b      	str	r3, [r7, #0]
            break;
 8001062:	e004      	b.n	800106e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800106a:	603b      	str	r3, [r7, #0]
            break;
 800106c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff6e 	bl	8000f54 <lcd_send_cmd>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd_init>:


void lcd_init (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001084:	2032      	movs	r0, #50	; 0x32
 8001086:	f000 fedb 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x30);
 800108a:	2030      	movs	r0, #48	; 0x30
 800108c:	f7ff ff62 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001090:	2005      	movs	r0, #5
 8001092:	f000 fed5 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f7ff ff5c 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fecf 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010a2:	2030      	movs	r0, #48	; 0x30
 80010a4:	f7ff ff56 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fec9 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010ae:	2020      	movs	r0, #32
 80010b0:	f7ff ff50 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f000 fec3 	bl	8001e40 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f7ff ff4a 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 febd 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010c6:	2008      	movs	r0, #8
 80010c8:	f7ff ff44 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 feb7 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff ff3e 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 feb1 	bl	8001e40 <HAL_Delay>
	HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 feae 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff ff35 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fea8 	bl	8001e40 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010f0:	200c      	movs	r0, #12
 80010f2:	f7ff ff2f 	bl	8000f54 <lcd_send_cmd>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001102:	e006      	b.n	8001112 <lcd_send_string+0x18>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff51 	bl	8000fb4 <lcd_send_data>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f4      	bne.n	8001104 <lcd_send_string+0xa>
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  xSemaphoreTake(PrintMutex,portMAX_DELAY);
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__io_putchar+0x3c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	4618      	mov	r0, r3
 8001136:	f004 facd 	bl	80056d4 <xQueueSemaphoreTake>

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800113a:	1d39      	adds	r1, r7, #4
 800113c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001140:	2201      	movs	r2, #1
 8001142:	4808      	ldr	r0, [pc, #32]	; (8001164 <__io_putchar+0x40>)
 8001144:	f003 fab7 	bl	80046b6 <HAL_UART_Transmit>

  xSemaphoreGive(PrintMutex);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <__io_putchar+0x3c>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	f004 f845 	bl	80051e0 <xQueueGenericSend>

  return ch;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000a94 	.word	0x20000a94
 8001164:	20000964 	.word	0x20000964

08001168 <Display_data>:
void Display_data (char* str, uint32_t *data)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(DispMutex,portMAX_DELAY);
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <Display_data+0x68>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800117a:	4618      	mov	r0, r3
 800117c:	f004 faaa 	bl	80056d4 <xQueueSemaphoreTake>
	HAL_Delay(500);
 8001180:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001184:	f000 fe5c 	bl	8001e40 <HAL_Delay>
	char conv_data[10];
	sprintf(conv_data, "%d", data);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	4911      	ldr	r1, [pc, #68]	; (80011d4 <Display_data+0x6c>)
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fc25 	bl	80089e0 <siprintf>

    lcd_clear ();
 8001196:	f7ff ff3d 	bl	8001014 <lcd_clear>
    lcd_put_cur(0, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff ff50 	bl	8001042 <lcd_put_cur>

    lcd_send_string (str);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffa9 	bl	80010fa <lcd_send_string>
    lcd_send_string(conv_data);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ffa4 	bl	80010fa <lcd_send_string>
    HAL_Delay(500);
 80011b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b6:	f000 fe43 	bl	8001e40 <HAL_Delay>

	xSemaphoreGive(DispMutex);
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <Display_data+0x68>)
 80011bc:	6818      	ldr	r0, [r3, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	f004 f80c 	bl	80051e0 <xQueueGenericSend>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000a90 	.word	0x20000a90
 80011d4:	0800ab98 	.word	0x0800ab98

080011d8 <Display_Task>:
void Display_Task (void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Entered Display Button task\n\r");
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <Display_Task+0x28>)
 80011e2:	f007 fb6b 	bl	80088bc <iprintf>

		char* string_data = "Display_Task:";
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <Display_Task+0x2c>)
 80011e8:	60fb      	str	r3, [r7, #12]
		Display_data(string_data, count);
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <Display_Task+0x30>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff ffb9 	bl	8001168 <Display_data>

		vTaskDelay(1000);
 80011f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011fa:	f004 fea7 	bl	8005f4c <vTaskDelay>
	{
 80011fe:	e7ef      	b.n	80011e0 <Display_Task+0x8>
 8001200:	0800ab9c 	.word	0x0800ab9c
 8001204:	0800abbc 	.word	0x0800abbc
 8001208:	20000a88 	.word	0x20000a88

0800120c <ADC_Task>:
	}
}
void ADC_Task (void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Entered ADC_Task\n\r");
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <ADC_Task+0x50>)
 8001216:	f007 fb51 	bl	80088bc <iprintf>

		char* string_data = "ADC Raw:";
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <ADC_Task+0x54>)
 800121c:	60fb      	str	r3, [r7, #12]

	  // Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <ADC_Task+0x58>)
 8001220:	f000 fe76 	bl	8001f10 <HAL_ADC_Start>
	   // Poll ADC1 Perihperal & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 8001224:	2101      	movs	r1, #1
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <ADC_Task+0x58>)
 8001228:	f000 ff44 	bl	80020b4 <HAL_ADC_PollForConversion>
	   // Read The ADC Conversion Result
		AD_RES = HAL_ADC_GetValue(&hadc1);
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <ADC_Task+0x58>)
 800122e:	f000 ffcc 	bl	80021ca <HAL_ADC_GetValue>
 8001232:	4603      	mov	r3, r0
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <ADC_Task+0x5c>)
 8001236:	6013      	str	r3, [r2, #0]
		printf("ADC VALUE == %d\n\n\r",AD_RES);
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <ADC_Task+0x5c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <ADC_Task+0x60>)
 8001240:	f007 fb3c 	bl	80088bc <iprintf>

		Display_data(string_data, AD_RES);
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <ADC_Task+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f7ff ff8c 	bl	8001168 <Display_data>

		vTaskDelay(500);
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f004 fe7a 	bl	8005f4c <vTaskDelay>
	{
 8001258:	e7dc      	b.n	8001214 <ADC_Task+0x8>
 800125a:	bf00      	nop
 800125c:	0800abcc 	.word	0x0800abcc
 8001260:	0800abe0 	.word	0x0800abe0
 8001264:	200009a8 	.word	0x200009a8
 8001268:	20000a8c 	.word	0x20000a8c
 800126c:	0800abec 	.word	0x0800abec

08001270 <GPIO_Task>:
	}
}
void GPIO_Task (void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("Entered GPIO_Task \n\r");
 8001278:	480e      	ldr	r0, [pc, #56]	; (80012b4 <GPIO_Task+0x44>)
 800127a:	f007 fb1f 	bl	80088bc <iprintf>

		char* string_data = "GPIO st:";
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <GPIO_Task+0x48>)
 8001280:	60bb      	str	r3, [r7, #8]
		int state = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==GPIO_PIN_RESET){
 8001286:	2120      	movs	r1, #32
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <GPIO_Task+0x4c>)
 800128a:	f001 fc4f 	bl	8002b2c <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <GPIO_Task+0x2a>
			state = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e001      	b.n	800129e <GPIO_Task+0x2e>
		}
		else{
			state = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
		}
		Display_data(string_data, state);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4619      	mov	r1, r3
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f7ff ff60 	bl	8001168 <Display_data>

		vTaskDelay(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f004 fe4e 	bl	8005f4c <vTaskDelay>
	{
 80012b0:	e7e2      	b.n	8001278 <GPIO_Task+0x8>
 80012b2:	bf00      	nop
 80012b4:	0800ac00 	.word	0x0800ac00
 80012b8:	0800ac18 	.word	0x0800ac18
 80012bc:	40020000 	.word	0x40020000

080012c0 <Timer_Callback>:
	}
}

/* Timer_Callback function */
void Timer_Callback(xTimerHandle xTimer)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Timer_Callback */
	if (xTimer == LED_taskHandle)
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <Timer_Callback+0x24>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d104      	bne.n	80012dc <Timer_Callback+0x1c>
	{
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET); //Turn off LED
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	4804      	ldr	r0, [pc, #16]	; (80012e8 <Timer_Callback+0x28>)
 80012d8:	f001 fc40 	bl	8002b5c <HAL_GPIO_WritePin>
	}

  /* USER CODE END Timer_Callback */
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000a98 	.word	0x20000a98
 80012e8:	40020000 	.word	0x40020000

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af02      	add	r7, sp, #8

  HAL_Init();
 80012f2:	f000 fd63 	bl	8001dbc <HAL_Init>


  SystemClock_Config();
 80012f6:	f000 f8c1 	bl	800147c <SystemClock_Config>


  MX_GPIO_Init();
 80012fa:	f000 fa01 	bl	8001700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012fe:	f000 f9d5 	bl	80016ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001302:	f000 f929 	bl	8001558 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001306:	f000 f9a7 	bl	8001658 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800130a:	f000 f977 	bl	80015fc <MX_I2C1_Init>



  /* USER CODE BEGIN 2 */
  lcd_init ();
 800130e:	f7ff feb7 	bl	8001080 <lcd_init>
  lcd_send_string ("STM32-F446");
 8001312:	4833      	ldr	r0, [pc, #204]	; (80013e0 <main+0xf4>)
 8001314:	f7ff fef1 	bl	80010fa <lcd_send_string>
  HAL_Delay(1000);
 8001318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131c:	f000 fd90 	bl	8001e40 <HAL_Delay>
  lcd_put_cur(1, 0);
 8001320:	2100      	movs	r1, #0
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fe8d 	bl	8001042 <lcd_put_cur>
  lcd_send_string("FreeRTOS trial!");
 8001328:	482e      	ldr	r0, [pc, #184]	; (80013e4 <main+0xf8>)
 800132a:	f7ff fee6 	bl	80010fa <lcd_send_string>
  HAL_Delay(2000);
 800132e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001332:	f000 fd85 	bl	8001e40 <HAL_Delay>
  lcd_clear ();
 8001336:	f7ff fe6d 	bl	8001014 <lcd_clear>
    /* Create the timer(s) */
  /* definition and creation of LED_task */
  /* USER CODE END 2 */


  DispMutex = xSemaphoreCreateMutex();
 800133a:	2001      	movs	r0, #1
 800133c:	f003 ff37 	bl	80051ae <xQueueCreateMutex>
 8001340:	4603      	mov	r3, r0
 8001342:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <main+0xfc>)
 8001344:	6013      	str	r3, [r2, #0]

  if (DispMutex != NULL)
 8001346:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <main+0xfc>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <main+0x70>
  {
	  HAL_UART_Transmit(&huart2, "Disp Mutex Created\n\n", 15, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	220f      	movs	r2, #15
 8001354:	4925      	ldr	r1, [pc, #148]	; (80013ec <main+0x100>)
 8001356:	4826      	ldr	r0, [pc, #152]	; (80013f0 <main+0x104>)
 8001358:	f003 f9ad 	bl	80046b6 <HAL_UART_Transmit>
  }

  PrintMutex = xSemaphoreCreateMutex();
 800135c:	2001      	movs	r0, #1
 800135e:	f003 ff26 	bl	80051ae <xQueueCreateMutex>
 8001362:	4603      	mov	r3, r0
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <main+0x108>)
 8001366:	6013      	str	r3, [r2, #0]
  if (PrintMutex != NULL)
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x108>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <main+0x92>
  {
	  HAL_UART_Transmit(&huart2, "Print Mutex Created\n\n", 19, 1000);
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	2213      	movs	r2, #19
 8001376:	4920      	ldr	r1, [pc, #128]	; (80013f8 <main+0x10c>)
 8001378:	481d      	ldr	r0, [pc, #116]	; (80013f0 <main+0x104>)
 800137a:	f003 f99c 	bl	80046b6 <HAL_UART_Transmit>
  }

  LED_taskHandle = xTimerCreate("timer1", pdMS_TO_TICKS(5000), pdFALSE, (void *) 1, Timer_Callback);
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <main+0x110>)
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2200      	movs	r2, #0
 8001386:	f241 3188 	movw	r1, #5000	; 0x1388
 800138a:	481d      	ldr	r0, [pc, #116]	; (8001400 <main+0x114>)
 800138c:	f005 fce2 	bl	8006d54 <xTimerCreate>
 8001390:	4603      	mov	r3, r0
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <main+0x118>)
 8001394:	6013      	str	r3, [r2, #0]
  xTaskCreate(Display_Task, "Display", 1024, NULL, 1, &Display_Handler);
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <main+0x11c>)
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2301      	movs	r3, #1
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a4:	4919      	ldr	r1, [pc, #100]	; (800140c <main+0x120>)
 80013a6:	481a      	ldr	r0, [pc, #104]	; (8001410 <main+0x124>)
 80013a8:	f004 fc83 	bl	8005cb2 <xTaskCreate>
  xTaskCreate(ADC_Task, 	"ADC_Task", 1024, NULL, 1, &ADC_Task_Handler);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <main+0x128>)
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2300      	movs	r3, #0
 80013b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ba:	4917      	ldr	r1, [pc, #92]	; (8001418 <main+0x12c>)
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <main+0x130>)
 80013be:	f004 fc78 	bl	8005cb2 <xTaskCreate>
  xTaskCreate(GPIO_Task, 	"GPIO_Task", 1024, NULL, 1, &GPIO_Task_Handler);
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <main+0x134>)
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	2301      	movs	r3, #1
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d0:	4914      	ldr	r1, [pc, #80]	; (8001424 <main+0x138>)
 80013d2:	4815      	ldr	r0, [pc, #84]	; (8001428 <main+0x13c>)
 80013d4:	f004 fc6d 	bl	8005cb2 <xTaskCreate>
  vTaskStartScheduler();
 80013d8:	f004 fdec 	bl	8005fb4 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <main+0xf0>
 80013de:	bf00      	nop
 80013e0:	0800ac24 	.word	0x0800ac24
 80013e4:	0800ac30 	.word	0x0800ac30
 80013e8:	20000a90 	.word	0x20000a90
 80013ec:	0800ac40 	.word	0x0800ac40
 80013f0:	20000964 	.word	0x20000964
 80013f4:	20000a94 	.word	0x20000a94
 80013f8:	0800ac58 	.word	0x0800ac58
 80013fc:	080012c1 	.word	0x080012c1
 8001400:	0800ac70 	.word	0x0800ac70
 8001404:	20000a98 	.word	0x20000a98
 8001408:	20000a9c 	.word	0x20000a9c
 800140c:	0800ac78 	.word	0x0800ac78
 8001410:	080011d9 	.word	0x080011d9
 8001414:	20000aa0 	.word	0x20000aa0
 8001418:	0800ac80 	.word	0x0800ac80
 800141c:	0800120d 	.word	0x0800120d
 8001420:	20000aa4 	.word	0x20000aa4
 8001424:	0800ac8c 	.word	0x0800ac8c
 8001428:	08001271 	.word	0x08001271

0800142c <HAL_GPIO_EXTI_Callback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b085      	sub	sp, #20
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143c:	d114      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x3c>
    {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED
 800143e:	2120      	movs	r1, #32
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <HAL_GPIO_EXTI_Callback+0x44>)
 8001442:	f001 fba4 	bl	8002b8e <HAL_GPIO_TogglePin>
    //printf("Triggering interrupt ISR\n\r");
	xTimerStartFromISR(LED_taskHandle, 0);
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_GPIO_EXTI_Callback+0x48>)
 8001448:	681c      	ldr	r4, [r3, #0]
 800144a:	f004 fedd 	bl	8006208 <xTaskGetTickCountFromISR>
 800144e:	4602      	mov	r2, r0
 8001450:	2300      	movs	r3, #0
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	2106      	movs	r1, #6
 8001458:	4620      	mov	r0, r4
 800145a:	f005 fcd7 	bl	8006e0c <xTimerGenericCommand>

    count++;
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001466:	6013      	str	r3, [r2, #0]
    }

}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	40020000 	.word	0x40020000
 8001474:	20000a98 	.word	0x20000a98
 8001478:	20000a88 	.word	0x20000a88

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2234      	movs	r2, #52	; 0x34
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fd0f 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <SystemClock_Config+0xd4>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <SystemClock_Config+0xd4>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <SystemClock_Config+0xd4>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014bc:	2300      	movs	r3, #0
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <SystemClock_Config+0xd8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <SystemClock_Config+0xd8>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <SystemClock_Config+0xd8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d8:	603b      	str	r3, [r7, #0]
 80014da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014f0:	2310      	movs	r3, #16
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014fa:	2304      	movs	r3, #4
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fb3a 	bl	8003b84 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001516:	f000 f97b 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 ffa8 	bl	800348c <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001542:	f000 f965 	bl	8001810 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3750      	adds	r7, #80	; 0x50
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40007000 	.word	0x40007000

08001558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800155e:	463b      	mov	r3, r7
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_ADC1_Init+0x98>)
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <MX_ADC1_Init+0x9c>)
 800156e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001576:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001586:	2200      	movs	r2, #0
 8001588:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_ADC1_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC1_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC1_Init+0x98>)
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <MX_ADC1_Init+0xa0>)
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015ba:	f000 fc65 	bl	8001e88 <HAL_ADC_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 f924 	bl	8001810 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015c8:	230f      	movs	r3, #15
 80015ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_ADC1_Init+0x98>)
 80015da:	f000 fe03 	bl	80021e4 <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 f914 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200009a8 	.word	0x200009a8
 80015f4:	40012000 	.word	0x40012000
 80015f8:	0f000001 	.word	0x0f000001

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_I2C1_Init+0x50>)
 800163a:	f001 fadb 	bl	8002bf4 <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 f8e4 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200009f0 	.word	0x200009f0
 8001650:	40005400 	.word	0x40005400
 8001654:	000186a0 	.word	0x000186a0

08001658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <MX_USART1_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_USART1_UART_Init+0x4c>)
 8001690:	f002 ffc4 	bl	800461c <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f000 f8b9 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000a44 	.word	0x20000a44
 80016a8:	40011000 	.word	0x40011000

080016ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <MX_USART2_UART_Init+0x50>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_USART2_UART_Init+0x4c>)
 80016e4:	f002 ff9a 	bl	800461c <HAL_UART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ee:	f000 f88f 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000964 	.word	0x20000964
 80016fc:	40004400 	.word	0x40004400

08001700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <MX_GPIO_Init+0xe0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a30      	ldr	r2, [pc, #192]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <MX_GPIO_Init+0xe0>)
 800173c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <MX_GPIO_Init+0xe0>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <MX_GPIO_Init+0xe0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	2120      	movs	r1, #32
 800178a:	4816      	ldr	r0, [pc, #88]	; (80017e4 <MX_GPIO_Init+0xe4>)
 800178c:	f001 f9e6 	bl	8002b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001796:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4810      	ldr	r0, [pc, #64]	; (80017e8 <MX_GPIO_Init+0xe8>)
 80017a8:	f001 f82c 	bl	8002804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017ac:	2320      	movs	r3, #32
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4808      	ldr	r0, [pc, #32]	; (80017e4 <MX_GPIO_Init+0xe4>)
 80017c4:	f001 f81e 	bl	8002804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2105      	movs	r1, #5
 80017cc:	2028      	movs	r0, #40	; 0x28
 80017ce:	f000 ffef 	bl	80027b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d2:	2028      	movs	r0, #40	; 0x28
 80017d4:	f001 f808 	bl	80027e8 <HAL_NVIC_EnableIRQ>

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020800 	.word	0x40020800

080017ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017fe:	f000 faff 	bl	8001e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40010000 	.word	0x40010000

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	e7fe      	b.n	8001818 <Error_Handler+0x8>
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x54>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_MspInit+0x54>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x54>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_MspInit+0x54>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_MspInit+0x54>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_MspInit+0x54>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	210f      	movs	r1, #15
 800185e:	f06f 0001 	mvn.w	r0, #1
 8001862:	f000 ffa5 	bl	80027b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_ADC_MspInit+0x7c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d127      	bne.n	80018e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_ADC_MspInit+0x80>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ce:	2320      	movs	r3, #32
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_ADC_MspInit+0x84>)
 80018e2:	f000 ff8f 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018e6:	bf00      	nop
 80018e8:	3728      	adds	r7, #40	; 0x28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012000 	.word	0x40012000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	; (8001980 <HAL_I2C_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12c      	bne.n	8001978 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_I2C_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_I2C_MspInit+0x88>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_I2C_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800193a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800193e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800194c:	2304      	movs	r3, #4
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	480c      	ldr	r0, [pc, #48]	; (8001988 <HAL_I2C_MspInit+0x8c>)
 8001958:	f000 ff54 	bl	8002804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_I2C_MspInit+0x88>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_I2C_MspInit+0x88>)
 8001966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_I2C_MspInit+0x88>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40005400 	.word	0x40005400
 8001984:	40023800 	.word	0x40023800
 8001988:	40020400 	.word	0x40020400

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_UART_MspInit+0xe8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12d      	bne.n	8001a0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_UART_MspInit+0xec>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019f8:	2307      	movs	r3, #7
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	481e      	ldr	r0, [pc, #120]	; (8001a7c <HAL_UART_MspInit+0xf0>)
 8001a04:	f000 fefe 	bl	8002804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a08:	e030      	b.n	8001a6c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <HAL_UART_MspInit+0xf4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d12b      	bne.n	8001a6c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4a16      	ldr	r2, [pc, #88]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	6413      	str	r3, [r2, #64]	; 0x40
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a0f      	ldr	r2, [pc, #60]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_UART_MspInit+0xec>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_UART_MspInit+0xf0>)
 8001a68:	f000 fecc 	bl	8002804 <HAL_GPIO_Init>
}
 8001a6c:	bf00      	nop
 8001a6e:	3730      	adds	r7, #48	; 0x30
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40004400 	.word	0x40004400

08001a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_InitTick+0xd0>)
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_InitTick+0xd0>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_InitTick+0xd0>)
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ab0:	f107 020c 	add.w	r2, r7, #12
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f001 fe00 	bl	80036c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ac0:	f001 fdea 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 8001ac4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	4a23      	ldr	r2, [pc, #140]	; (8001b58 <HAL_InitTick+0xd4>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0c9b      	lsrs	r3, r3, #18
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_InitTick+0xd8>)
 8001ad6:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <HAL_InitTick+0xdc>)
 8001ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_InitTick+0xd8>)
 8001adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_InitTick+0xd8>)
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ae8:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <HAL_InitTick+0xd8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <HAL_InitTick+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_InitTick+0xd8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001afa:	4818      	ldr	r0, [pc, #96]	; (8001b5c <HAL_InitTick+0xd8>)
 8001afc:	f002 fae0 	bl	80040c0 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d11b      	bne.n	8001b46 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <HAL_InitTick+0xd8>)
 8001b10:	f002 fb30 	bl	8004174 <HAL_TIM_Base_Start_IT>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d111      	bne.n	8001b46 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b22:	2019      	movs	r0, #25
 8001b24:	f000 fe60 	bl	80027e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b0f      	cmp	r3, #15
 8001b2c:	d808      	bhi.n	8001b40 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	2019      	movs	r0, #25
 8001b34:	f000 fe3c 	bl	80027b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0xe0>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e002      	b.n	8001b46 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800
 8001b58:	431bde83 	.word	0x431bde83
 8001b5c:	20000aa8 	.word	0x20000aa8
 8001b60:	40010000 	.word	0x40010000
 8001b64:	20000004 	.word	0x20000004

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b9a:	f002 fb5b 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000aa8 	.word	0x20000aa8

08001ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb0:	f001 f808 	bl	8002bc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
	return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_kill>:

int _kill(int pid, int sig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bd2:	f006 f83b 	bl	8007c4c <__errno>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2216      	movs	r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
	return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_exit>:

void _exit (int status)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bfa:	e7fe      	b.n	8001bfa <_exit+0x12>

08001bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00a      	b.n	8001c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c0e:	f3af 8000 	nop.w
 8001c12:	4601      	mov	r1, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf0      	blt.n	8001c0e <_read+0x12>
	}

return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa67 	bl	8001124 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf1      	blt.n	8001c48 <_write+0x12>
	}
	return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_close>:

int _close(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c96:	605a      	str	r2, [r3, #4]
	return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f005 ffa0 	bl	8007c4c <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20020000 	.word	0x20020000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	20000af0 	.word	0x20000af0
 8001d40:	20004998 	.word	0x20004998

08001d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6e:	490e      	ldr	r1, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d84:	4c0b      	ldr	r4, [pc, #44]	; (8001db4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d92:	f7ff ffd7 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f006 f855 	bl	8007e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7ff faa7 	bl	80012ec <main>
  bx  lr    
 8001d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001dac:	0800b0b4 	.word	0x0800b0b4
  ldr r2, =_sbss
 8001db0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001db4:	20004998 	.word	0x20004998

08001db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>
	...

08001dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_Init+0x40>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_Init+0x40>)
 8001dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a07      	ldr	r2, [pc, #28]	; (8001dfc <HAL_Init+0x40>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 fcd8 	bl	800279a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dea:	200f      	movs	r0, #15
 8001dec:	f7ff fe4a 	bl	8001a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fd14 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000af4 	.word	0x20000af4

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000af4 	.word	0x20000af4

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fce4 	bl	8001874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ece:	f023 0302 	bic.w	r3, r3, #2
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fab4 	bl	8002448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef6:	e001      	b.n	8001efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_Start+0x1a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e0b2      	b.n	8002090 <HAL_ADC_Start+0x180>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d018      	beq.n	8001f72 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_ADC_Start+0x18c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_ADC_Start+0x190>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0c9a      	lsrs	r2, r3, #18
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f9      	bne.n	8001f66 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d17a      	bne.n	8002076 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001faa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	f023 0206 	bic.w	r2, r3, #6
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_ADC_Start+0x194>)
 8001fde:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12a      	bne.n	800204c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2b      	ldr	r2, [pc, #172]	; (80020a8 <HAL_ADC_Start+0x198>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d015      	beq.n	800202c <HAL_ADC_Start+0x11c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a29      	ldr	r2, [pc, #164]	; (80020ac <HAL_ADC_Start+0x19c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d105      	bne.n	8002016 <HAL_ADC_Start+0x106>
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_ADC_Start+0x194>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <HAL_ADC_Start+0x1a0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d136      	bne.n	800208e <HAL_ADC_Start+0x17e>
 8002020:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_ADC_Start+0x194>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d130      	bne.n	800208e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d129      	bne.n	800208e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	e020      	b.n	800208e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_ADC_Start+0x198>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d11b      	bne.n	800208e <HAL_ADC_Start+0x17e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d114      	bne.n	800208e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	e00b      	b.n	800208e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	20000000 	.word	0x20000000
 80020a0:	431bde83 	.word	0x431bde83
 80020a4:	40012300 	.word	0x40012300
 80020a8:	40012000 	.word	0x40012000
 80020ac:	40012100 	.word	0x40012100
 80020b0:	40012200 	.word	0x40012200

080020b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d113      	bne.n	80020fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f043 0220 	orr.w	r2, r3, #32
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e063      	b.n	80021c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80020fa:	f7ff fe95 	bl	8001e28 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002100:	e021      	b.n	8002146 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d01d      	beq.n	8002146 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_ADC_PollForConversion+0x6c>
 8002110:	f7ff fe8a 	bl	8001e28 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d212      	bcs.n	8002146 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d00b      	beq.n	8002146 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03d      	b.n	80021c2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d1d6      	bne.n	8002102 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0212 	mvn.w	r2, #18
 800215c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d123      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11f      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1c>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e113      	b.n	8002428 <HAL_ADC_ConfigChannel+0x244>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b09      	cmp	r3, #9
 800220e:	d925      	bls.n	800225c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68d9      	ldr	r1, [r3, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	3b1e      	subs	r3, #30
 8002226:	2207      	movs	r2, #7
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43da      	mvns	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	400a      	ands	r2, r1
 8002234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4618      	mov	r0, r3
 8002248:	4603      	mov	r3, r0
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4403      	add	r3, r0
 800224e:	3b1e      	subs	r3, #30
 8002250:	409a      	lsls	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	e022      	b.n	80022a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	2207      	movs	r2, #7
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	4603      	mov	r3, r0
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4403      	add	r3, r0
 8002298:	409a      	lsls	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d824      	bhi.n	80022f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	3b05      	subs	r3, #5
 80022bc:	221f      	movs	r2, #31
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	400a      	ands	r2, r1
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3b05      	subs	r3, #5
 80022e6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34
 80022f2:	e04c      	b.n	800238e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d824      	bhi.n	8002346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b23      	subs	r3, #35	; 0x23
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43da      	mvns	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	400a      	ands	r2, r1
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b23      	subs	r3, #35	; 0x23
 8002338:	fa00 f203 	lsl.w	r2, r0, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
 8002344:	e023      	b.n	800238e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b41      	subs	r3, #65	; 0x41
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b41      	subs	r3, #65	; 0x41
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <HAL_ADC_ConfigChannel+0x250>)
 8002390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a28      	ldr	r2, [pc, #160]	; (8002438 <HAL_ADC_ConfigChannel+0x254>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10f      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1d8>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b12      	cmp	r3, #18
 80023a2:	d10b      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_ADC_ConfigChannel+0x254>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_ADC_ConfigChannel+0x258>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d003      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0x1f4>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b11      	cmp	r3, #17
 80023d6:	d122      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a11      	ldr	r2, [pc, #68]	; (800243c <HAL_ADC_ConfigChannel+0x258>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_ADC_ConfigChannel+0x25c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ADC_ConfigChannel+0x260>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9a      	lsrs	r2, r3, #18
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002410:	e002      	b.n	8002418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	3b01      	subs	r3, #1
 8002416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f9      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40012300 	.word	0x40012300
 8002438:	40012000 	.word	0x40012000
 800243c:	10000012 	.word	0x10000012
 8002440:	20000000 	.word	0x20000000
 8002444:	431bde83 	.word	0x431bde83

08002448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002450:	4b79      	ldr	r3, [pc, #484]	; (8002638 <ADC_Init+0x1f0>)
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800247c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	021a      	lsls	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68da      	ldr	r2, [r3, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <ADC_Init+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d022      	beq.n	8002526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6899      	ldr	r1, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e00f      	b.n	8002546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0202 	bic.w	r2, r2, #2
 8002554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e1b      	ldrb	r3, [r3, #24]
 8002560:	005a      	lsls	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01b      	beq.n	80025ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6859      	ldr	r1, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	3b01      	subs	r3, #1
 80025a0:	035a      	lsls	r2, r3, #13
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e007      	b.n	80025bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	051a      	lsls	r2, r3, #20
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025fe:	025a      	lsls	r2, r3, #9
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6899      	ldr	r1, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	029a      	lsls	r2, r3, #10
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40012300 	.word	0x40012300
 800263c:	0f000001 	.word	0x0f000001

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4907      	ldr	r1, [pc, #28]	; (80026dc <__NVIC_EnableIRQ+0x38>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100

080026e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db0a      	blt.n	800270a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	490c      	ldr	r1, [pc, #48]	; (800272c <__NVIC_SetPriority+0x4c>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	440b      	add	r3, r1
 8002704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002708:	e00a      	b.n	8002720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4908      	ldr	r1, [pc, #32]	; (8002730 <__NVIC_SetPriority+0x50>)
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3b04      	subs	r3, #4
 8002718:	0112      	lsls	r2, r2, #4
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	440b      	add	r3, r1
 800271e:	761a      	strb	r2, [r3, #24]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000e100 	.word	0xe000e100
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f1c3 0307 	rsb	r3, r3, #7
 800274e:	2b04      	cmp	r3, #4
 8002750:	bf28      	it	cs
 8002752:	2304      	movcs	r3, #4
 8002754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3304      	adds	r3, #4
 800275a:	2b06      	cmp	r3, #6
 800275c:	d902      	bls.n	8002764 <NVIC_EncodePriority+0x30>
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3b03      	subs	r3, #3
 8002762:	e000      	b.n	8002766 <NVIC_EncodePriority+0x32>
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	401a      	ands	r2, r3
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800277c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	43d9      	mvns	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	4313      	orrs	r3, r2
         );
}
 800278e:	4618      	mov	r0, r3
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff4c 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c2:	f7ff ff61 	bl	8002688 <__NVIC_GetPriorityGrouping>
 80027c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	6978      	ldr	r0, [r7, #20]
 80027ce:	f7ff ffb1 	bl	8002734 <NVIC_EncodePriority>
 80027d2:	4602      	mov	r2, r0
 80027d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff80 	bl	80026e0 <__NVIC_SetPriority>
}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff ff54 	bl	80026a4 <__NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e165      	b.n	8002aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	f040 8154 	bne.w	8002ae6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d005      	beq.n	8002856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002852:	2b02      	cmp	r3, #2
 8002854:	d130      	bne.n	80028b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80ae 	beq.w	8002ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	4a5c      	ldr	r2, [pc, #368]	; (8002b04 <HAL_GPIO_Init+0x300>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002998:	6453      	str	r3, [r2, #68]	; 0x44
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <HAL_GPIO_Init+0x300>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a58      	ldr	r2, [pc, #352]	; (8002b08 <HAL_GPIO_Init+0x304>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_GPIO_Init+0x308>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <HAL_GPIO_Init+0x21a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4e      	ldr	r2, [pc, #312]	; (8002b10 <HAL_GPIO_Init+0x30c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x216>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4d      	ldr	r2, [pc, #308]	; (8002b14 <HAL_GPIO_Init+0x310>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x212>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4c      	ldr	r2, [pc, #304]	; (8002b18 <HAL_GPIO_Init+0x314>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x20e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4b      	ldr	r2, [pc, #300]	; (8002b1c <HAL_GPIO_Init+0x318>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x20a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4a      	ldr	r2, [pc, #296]	; (8002b20 <HAL_GPIO_Init+0x31c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x206>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <HAL_GPIO_Init+0x320>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x202>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e00c      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a06:	2307      	movs	r3, #7
 8002a08:	e00a      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a0e:	2304      	movs	r3, #4
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x21c>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x304>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae0:	4a11      	ldr	r2, [pc, #68]	; (8002b28 <HAL_GPIO_Init+0x324>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f67f ae96 	bls.w	8002820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40021400 	.word	0x40021400
 8002b24:	40021800 	.word	0x40021800
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	887b      	ldrh	r3, [r7, #2]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
 8002b48:	e001      	b.n	8002b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	807b      	strh	r3, [r7, #2]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b6c:	787b      	ldrb	r3, [r7, #1]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b78:	e003      	b.n	8002b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	041a      	lsls	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	460b      	mov	r3, r1
 8002b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba0:	887a      	ldrh	r2, [r7, #2]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	041a      	lsls	r2, r3, #16
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43d9      	mvns	r1, r3
 8002bac:	887b      	ldrh	r3, [r7, #2]
 8002bae:	400b      	ands	r3, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	619a      	str	r2, [r3, #24]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fc22 	bl	800142c <HAL_GPIO_EXTI_Callback>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013c00 	.word	0x40013c00

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12b      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fe6e 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	; 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c58:	f000 fd0a 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a81      	ldr	r2, [pc, #516]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d807      	bhi.n	8002c78 <HAL_I2C_Init+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	; (8002e6c <HAL_I2C_Init+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e006      	b.n	8002c86 <HAL_I2C_Init+0x92>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7d      	ldr	r2, [pc, #500]	; (8002e70 <HAL_I2C_Init+0x27c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0e7      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a78      	ldr	r2, [pc, #480]	; (8002e74 <HAL_I2C_Init+0x280>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_I2C_Init+0xd4>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e009      	b.n	8002cdc <HAL_I2C_Init+0xe8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a69      	ldr	r2, [pc, #420]	; (8002e78 <HAL_I2C_Init+0x284>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	495c      	ldr	r1, [pc, #368]	; (8002e68 <HAL_I2C_Init+0x274>)
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d819      	bhi.n	8002d30 <HAL_I2C_Init+0x13c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e59      	subs	r1, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d10:	400b      	ands	r3, r1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_I2C_Init+0x138>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e59      	subs	r1, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	e051      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	e04f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_I2C_Init+0x168>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e012      	b.n	8002d82 <HAL_I2C_Init+0x18e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x196>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_I2C_Init+0x1bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e58      	subs	r0, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	440b      	add	r3, r1
 8002da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	000186a0 	.word	0x000186a0
 8002e6c:	001e847f 	.word	0x001e847f
 8002e70:	003d08ff 	.word	0x003d08ff
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	817b      	strh	r3, [r7, #10]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7fe ffca 	bl	8001e28 <HAL_GetTick>
 8002e94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	f040 80e0 	bne.w	8003064 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2319      	movs	r3, #25
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4970      	ldr	r1, [pc, #448]	; (8003070 <HAL_I2C_Master_Transmit+0x1f4>)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f964 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e0d3      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x50>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0cc      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d007      	beq.n	8002ef2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a50      	ldr	r2, [pc, #320]	; (8003074 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f34:	8979      	ldrh	r1, [r7, #10]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f89c 	bl	8003078 <I2C_MasterRequestWrite>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08d      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f60:	e066      	b.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	6a39      	ldr	r1, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f9de 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d107      	bne.n	8002f8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06b      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11b      	bne.n	8003004 <HAL_I2C_Master_Transmit+0x188>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d017      	beq.n	8003004 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	6a39      	ldr	r1, [r7, #32]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f9ce 	bl	80033aa <I2C_WaitOnBTFFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	2b04      	cmp	r3, #4
 800301a:	d107      	bne.n	800302c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e01a      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d194      	bne.n	8002f62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	00100002 	.word	0x00100002
 8003074:	ffff0000 	.word	0xffff0000

08003078 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	460b      	mov	r3, r1
 8003086:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d006      	beq.n	80030a2 <I2C_MasterRequestWrite+0x2a>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d003      	beq.n	80030a2 <I2C_MasterRequestWrite+0x2a>
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030a0:	d108      	bne.n	80030b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e00b      	b.n	80030cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	2b12      	cmp	r3, #18
 80030ba:	d107      	bne.n	80030cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f84f 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00d      	beq.n	8003100 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f2:	d103      	bne.n	80030fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e035      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003108:	d108      	bne.n	800311c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	e01b      	b.n	8003154 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	11db      	asrs	r3, r3, #7
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0306 	and.w	r3, r3, #6
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f063 030f 	orn	r3, r3, #15
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <I2C_MasterRequestWrite+0xfc>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f875 	bl	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e010      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800314a:	897b      	ldrh	r3, [r7, #10]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <I2C_MasterRequestWrite+0x100>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f865 	bl	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	00010008 	.word	0x00010008
 8003178:	00010002 	.word	0x00010002

0800317c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318c:	e025      	b.n	80031da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003194:	d021      	beq.n	80031da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7fe fe47 	bl	8001e28 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d116      	bne.n	80031da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e023      	b.n	8003222 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10d      	bne.n	8003200 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	e00c      	b.n	800321a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	429a      	cmp	r2, r3
 800321e:	d0b6      	beq.n	800318e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003238:	e051      	b.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003248:	d123      	bne.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003258:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003262:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0204 	orr.w	r2, r3, #4
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e046      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003298:	d021      	beq.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe fdc5 	bl	8001e28 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f043 0220 	orr.w	r2, r3, #32
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e020      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10c      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e00b      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d18d      	bne.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003334:	e02d      	b.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f878 	bl	800342c <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e02d      	b.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800334c:	d021      	beq.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fd6b 	bl	8001e28 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d116      	bne.n	8003392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0220 	orr.w	r2, r3, #32
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d1ca      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b6:	e02d      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f837 	bl	800342c <I2C_IsAcknowledgeFailed>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e02d      	b.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ce:	d021      	beq.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d0:	f7fe fd2a 	bl	8001e28 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d302      	bcc.n	80033e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d116      	bne.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0220 	orr.w	r2, r3, #32
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e007      	b.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d1ca      	bne.n	80033b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003442:	d11b      	bne.n	800347c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	f043 0204 	orr.w	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cc      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a0:	4b68      	ldr	r3, [pc, #416]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d90c      	bls.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b65      	ldr	r3, [pc, #404]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b6:	4b63      	ldr	r3, [pc, #396]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0b8      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a58      	ldr	r2, [pc, #352]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f8:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003504:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	494d      	ldr	r1, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d044      	beq.n	80035ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d119      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e07f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d003      	beq.n	800354a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003546:	2b03      	cmp	r3, #3
 8003548:	d107      	bne.n	800355a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b3f      	ldr	r3, [pc, #252]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e06f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e067      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800356a:	4b37      	ldr	r3, [pc, #220]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f023 0203 	bic.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4934      	ldr	r1, [pc, #208]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800357c:	f7fe fc54 	bl	8001e28 <HAL_GetTick>
 8003580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003584:	f7fe fc50 	bl	8001e28 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e04f      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 020c 	and.w	r2, r3, #12
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1eb      	bne.n	8003584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20c      	bcs.n	80035d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ba:	4b22      	ldr	r3, [pc, #136]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c2:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e032      	b.n	800363a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	4916      	ldr	r1, [pc, #88]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003612:	f000 f887 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 8003616:	4602      	mov	r2, r0
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	490a      	ldr	r1, [pc, #40]	; (800364c <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	5ccb      	ldrb	r3, [r1, r3]
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	4a09      	ldr	r2, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fe fa26 	bl	8001a84 <HAL_InitTick>

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00
 8003648:	40023800 	.word	0x40023800
 800364c:	0800acb0 	.word	0x0800acb0
 8003650:	20000000 	.word	0x20000000
 8003654:	20000004 	.word	0x20000004

08003658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <HAL_RCC_GetHCLKFreq+0x14>)
 800365e:	681b      	ldr	r3, [r3, #0]
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	20000000 	.word	0x20000000

08003670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003674:	f7ff fff0 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	4903      	ldr	r1, [pc, #12]	; (8003694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800368c:	4618      	mov	r0, r3
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	0800acc0 	.word	0x0800acc0

08003698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800369c:	f7ff ffdc 	bl	8003658 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0b5b      	lsrs	r3, r3, #13
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800acc0 	.word	0x0800acc0

080036c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	220f      	movs	r2, #15
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0203 	and.w	r2, r3, #3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	08db      	lsrs	r3, r3, #3
 80036fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003702:	4b07      	ldr	r3, [pc, #28]	; (8003720 <HAL_RCC_GetClockConfig+0x60>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40023c00 	.word	0x40023c00

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b0ae      	sub	sp, #184	; 0xb8
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800374a:	4bcb      	ldr	r3, [pc, #812]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b0c      	cmp	r3, #12
 8003754:	f200 8206 	bhi.w	8003b64 <HAL_RCC_GetSysClockFreq+0x440>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_RCC_GetSysClockFreq+0x3c>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003795 	.word	0x08003795
 8003764:	08003b65 	.word	0x08003b65
 8003768:	08003b65 	.word	0x08003b65
 800376c:	08003b65 	.word	0x08003b65
 8003770:	0800379d 	.word	0x0800379d
 8003774:	08003b65 	.word	0x08003b65
 8003778:	08003b65 	.word	0x08003b65
 800377c:	08003b65 	.word	0x08003b65
 8003780:	080037a5 	.word	0x080037a5
 8003784:	08003b65 	.word	0x08003b65
 8003788:	08003b65 	.word	0x08003b65
 800378c:	08003b65 	.word	0x08003b65
 8003790:	08003995 	.word	0x08003995
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4bb9      	ldr	r3, [pc, #740]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x358>)
 8003796:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800379a:	e1e7      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379c:	4bb8      	ldr	r3, [pc, #736]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x35c>)
 800379e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80037a2:	e1e3      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a4:	4bb4      	ldr	r3, [pc, #720]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b0:	4bb1      	ldr	r3, [pc, #708]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d071      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037bc:	4bae      	ldr	r3, [pc, #696]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037c8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80037cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	f04f 0000 	mov.w	r0, #0
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	0159      	lsls	r1, r3, #5
 80037f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f4:	0150      	lsls	r0, r2, #5
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4621      	mov	r1, r4
 80037fc:	1a51      	subs	r1, r2, r1
 80037fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003800:	4629      	mov	r1, r5
 8003802:	eb63 0301 	sbc.w	r3, r3, r1
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003814:	4649      	mov	r1, r9
 8003816:	018b      	lsls	r3, r1, #6
 8003818:	4641      	mov	r1, r8
 800381a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800381e:	4641      	mov	r1, r8
 8003820:	018a      	lsls	r2, r1, #6
 8003822:	4641      	mov	r1, r8
 8003824:	1a51      	subs	r1, r2, r1
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	4649      	mov	r1, r9
 800382a:	eb63 0301 	sbc.w	r3, r3, r1
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800383c:	4649      	mov	r1, r9
 800383e:	00cb      	lsls	r3, r1, #3
 8003840:	4641      	mov	r1, r8
 8003842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003846:	4641      	mov	r1, r8
 8003848:	00ca      	lsls	r2, r1, #3
 800384a:	4610      	mov	r0, r2
 800384c:	4619      	mov	r1, r3
 800384e:	4603      	mov	r3, r0
 8003850:	4622      	mov	r2, r4
 8003852:	189b      	adds	r3, r3, r2
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
 8003856:	462b      	mov	r3, r5
 8003858:	460a      	mov	r2, r1
 800385a:	eb42 0303 	adc.w	r3, r2, r3
 800385e:	637b      	str	r3, [r7, #52]	; 0x34
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800386c:	4629      	mov	r1, r5
 800386e:	024b      	lsls	r3, r1, #9
 8003870:	4621      	mov	r1, r4
 8003872:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003876:	4621      	mov	r1, r4
 8003878:	024a      	lsls	r2, r1, #9
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003882:	2200      	movs	r2, #0
 8003884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800388c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003890:	f7fd f9aa 	bl	8000be8 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4613      	mov	r3, r2
 800389a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389e:	e067      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a0:	4b75      	ldr	r3, [pc, #468]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ac:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80038b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ba:	2300      	movs	r3, #0
 80038bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f04f 0000 	mov.w	r0, #0
 80038ca:	f04f 0100 	mov.w	r1, #0
 80038ce:	0159      	lsls	r1, r3, #5
 80038d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d4:	0150      	lsls	r0, r2, #5
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	4621      	mov	r1, r4
 80038dc:	1a51      	subs	r1, r2, r1
 80038de:	62b9      	str	r1, [r7, #40]	; 0x28
 80038e0:	4629      	mov	r1, r5
 80038e2:	eb63 0301 	sbc.w	r3, r3, r1
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038f4:	4649      	mov	r1, r9
 80038f6:	018b      	lsls	r3, r1, #6
 80038f8:	4641      	mov	r1, r8
 80038fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038fe:	4641      	mov	r1, r8
 8003900:	018a      	lsls	r2, r1, #6
 8003902:	4641      	mov	r1, r8
 8003904:	ebb2 0a01 	subs.w	sl, r2, r1
 8003908:	4649      	mov	r1, r9
 800390a:	eb63 0b01 	sbc.w	fp, r3, r1
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800391a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800391e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003922:	4692      	mov	sl, r2
 8003924:	469b      	mov	fp, r3
 8003926:	4623      	mov	r3, r4
 8003928:	eb1a 0303 	adds.w	r3, sl, r3
 800392c:	623b      	str	r3, [r7, #32]
 800392e:	462b      	mov	r3, r5
 8003930:	eb4b 0303 	adc.w	r3, fp, r3
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003942:	4629      	mov	r1, r5
 8003944:	028b      	lsls	r3, r1, #10
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800394c:	4621      	mov	r1, r4
 800394e:	028a      	lsls	r2, r1, #10
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003958:	2200      	movs	r2, #0
 800395a:	673b      	str	r3, [r7, #112]	; 0x70
 800395c:	677a      	str	r2, [r7, #116]	; 0x74
 800395e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003962:	f7fd f941 	bl	8000be8 <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4613      	mov	r3, r2
 800396c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003970:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	3301      	adds	r3, #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003992:	e0eb      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003994:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800399c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d06b      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ac:	4b32      	ldr	r3, [pc, #200]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	099b      	lsrs	r3, r3, #6
 80039b2:	2200      	movs	r2, #0
 80039b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80039b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	663b      	str	r3, [r7, #96]	; 0x60
 80039c0:	2300      	movs	r3, #0
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
 80039c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80039c8:	4622      	mov	r2, r4
 80039ca:	462b      	mov	r3, r5
 80039cc:	f04f 0000 	mov.w	r0, #0
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	0159      	lsls	r1, r3, #5
 80039d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039da:	0150      	lsls	r0, r2, #5
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4621      	mov	r1, r4
 80039e2:	1a51      	subs	r1, r2, r1
 80039e4:	61b9      	str	r1, [r7, #24]
 80039e6:	4629      	mov	r1, r5
 80039e8:	eb63 0301 	sbc.w	r3, r3, r1
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039fa:	4659      	mov	r1, fp
 80039fc:	018b      	lsls	r3, r1, #6
 80039fe:	4651      	mov	r1, sl
 8003a00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a04:	4651      	mov	r1, sl
 8003a06:	018a      	lsls	r2, r1, #6
 8003a08:	4651      	mov	r1, sl
 8003a0a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a0e:	4659      	mov	r1, fp
 8003a10:	eb63 0901 	sbc.w	r9, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a20:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a24:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a28:	4690      	mov	r8, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	eb18 0303 	adds.w	r3, r8, r3
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	462b      	mov	r3, r5
 8003a36:	eb49 0303 	adc.w	r3, r9, r3
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a48:	4629      	mov	r1, r5
 8003a4a:	024b      	lsls	r3, r1, #9
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a52:	4621      	mov	r1, r4
 8003a54:	024a      	lsls	r2, r1, #9
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a5e:	2200      	movs	r2, #0
 8003a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a68:	f7fd f8be 	bl	8000be8 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a76:	e065      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x420>
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	00f42400 	.word	0x00f42400
 8003a80:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a84:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	099b      	lsrs	r3, r3, #6
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	4611      	mov	r1, r2
 8003a90:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
 8003a96:	2300      	movs	r3, #0
 8003a98:	657b      	str	r3, [r7, #84]	; 0x54
 8003a9a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	f04f 0000 	mov.w	r0, #0
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	0159      	lsls	r1, r3, #5
 8003aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab0:	0150      	lsls	r0, r2, #5
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1a51      	subs	r1, r2, r1
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	4649      	mov	r1, r9
 8003abe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ada:	4651      	mov	r1, sl
 8003adc:	018a      	lsls	r2, r1, #6
 8003ade:	4651      	mov	r1, sl
 8003ae0:	1a54      	subs	r4, r2, r1
 8003ae2:	4659      	mov	r1, fp
 8003ae4:	eb63 0501 	sbc.w	r5, r3, r1
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	00eb      	lsls	r3, r5, #3
 8003af2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af6:	00e2      	lsls	r2, r4, #3
 8003af8:	4614      	mov	r4, r2
 8003afa:	461d      	mov	r5, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	18e3      	adds	r3, r4, r3
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb45 0303 	adc.w	r3, r5, r3
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b16:	4629      	mov	r1, r5
 8003b18:	028b      	lsls	r3, r1, #10
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b20:	4621      	mov	r1, r4
 8003b22:	028a      	lsls	r2, r1, #10
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b30:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003b32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b36:	f7fd f857 	bl	8000be8 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4613      	mov	r3, r2
 8003b40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	0f1b      	lsrs	r3, r3, #28
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b62:	e003      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	37b8      	adds	r7, #184	; 0xb8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	00f42400 	.word	0x00f42400

08003b84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e28d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8083 	beq.w	8003caa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ba4:	4b94      	ldr	r3, [pc, #592]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d019      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bb0:	4b91      	ldr	r3, [pc, #580]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bbc:	4b8e      	ldr	r3, [pc, #568]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d00c      	beq.n	8003be4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b8b      	ldr	r3, [pc, #556]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bd2:	2b0c      	cmp	r3, #12
 8003bd4:	d112      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b88      	ldr	r3, [pc, #544]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	4b84      	ldr	r3, [pc, #528]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05b      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x124>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d157      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e25a      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0x90>
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e01d      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0xb4>
 8003c1e:	4b76      	ldr	r3, [pc, #472]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a75      	ldr	r2, [pc, #468]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b73      	ldr	r3, [pc, #460]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a72      	ldr	r2, [pc, #456]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_OscConfig+0xcc>
 8003c38:	4b6f      	ldr	r3, [pc, #444]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	4b6c      	ldr	r3, [pc, #432]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe f8e6 	bl	8001e28 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe f8e2 	bl	8001e28 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e21f      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCC_OscConfig+0xdc>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7fe f8d2 	bl	8001e28 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe f8ce 	bl	8001e28 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e20b      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x104>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06f      	beq.n	8003d96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cb6:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d017      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cc2:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d105      	bne.n	8003cda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b47      	ldr	r3, [pc, #284]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b44      	ldr	r3, [pc, #272]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d116      	bne.n	8003d20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e1d3      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	e03a      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fe f87b 	bl	8001e28 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d36:	f7fe f877 	bl	8001e28 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e1b4      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]
 8003d68:	e015      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <HAL_RCC_OscConfig+0x278>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe f85a 	bl	8001e28 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe f856 	bl	8001e28 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e193      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d036      	beq.n	8003e10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fe f83a 	bl	8001e28 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db8:	f7fe f836 	bl	8001e28 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e173      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x234>
 8003dd6:	e01b      	b.n	8003e10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <HAL_RCC_OscConfig+0x27c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dde:	f7fe f823 	bl	8001e28 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	e00e      	b.n	8003e04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de6:	f7fe f81f 	bl	8001e28 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d907      	bls.n	8003e04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e15c      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	42470000 	.word	0x42470000
 8003e00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ea      	bne.n	8003de6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8097 	beq.w	8003f4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b83      	ldr	r3, [pc, #524]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	4a7e      	ldr	r2, [pc, #504]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4e:	4b79      	ldr	r3, [pc, #484]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d118      	bne.n	8003e8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5a:	4b76      	ldr	r3, [pc, #472]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a75      	ldr	r2, [pc, #468]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e66:	f7fd ffdf 	bl	8001e28 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6e:	f7fd ffdb 	bl	8001e28 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e118      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e80:	4b6c      	ldr	r3, [pc, #432]	; (8004034 <HAL_RCC_OscConfig+0x4b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x31e>
 8003e94:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea0:	e01c      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x340>
 8003eaa:	4b61      	ldr	r3, [pc, #388]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a60      	ldr	r2, [pc, #384]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb0:	f043 0304 	orr.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a5d      	ldr	r2, [pc, #372]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0x358>
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a59      	ldr	r2, [pc, #356]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed0:	4b57      	ldr	r3, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	4a56      	ldr	r2, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003ed6:	f023 0304 	bic.w	r3, r3, #4
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd ffa0 	bl	8001e28 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd ff9c 	bl	8001e28 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0d7      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0ee      	beq.n	8003eec <HAL_RCC_OscConfig+0x368>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd ff8a 	bl	8001e28 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f18:	f7fd ff86 	bl	8001e28 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e0c1      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	4b40      	ldr	r3, [pc, #256]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ee      	bne.n	8003f18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80ad 	beq.w	80040b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d060      	beq.n	8004024 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d145      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fd ff5a 	bl	8001e28 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f78:	f7fd ff56 	bl	8001e28 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e093      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8a:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f0      	bne.n	8003f78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	491b      	ldr	r1, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd ff2b 	bl	8001e28 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fd ff27 	bl	8001e28 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e064      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x452>
 8003ff4:	e05c      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	4b10      	ldr	r3, [pc, #64]	; (8004038 <HAL_RCC_OscConfig+0x4b4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd ff14 	bl	8001e28 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004004:	f7fd ff10 	bl	8001e28 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04d      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x4ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x480>
 8004022:	e045      	b.n	80040b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e040      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
 8004030:	40023800 	.word	0x40023800
 8004034:	40007000 	.word	0x40007000
 8004038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_RCC_OscConfig+0x538>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d030      	beq.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d129      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d122      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004074:	4293      	cmp	r3, r2
 8004076:	d119      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d10f      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e041      	b.n	8004156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f839 	bl	800415e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f000 f9d8 	bl	80044b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d001      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e04e      	b.n	800422a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a23      	ldr	r2, [pc, #140]	; (8004238 <HAL_TIM_Base_Start_IT+0xc4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d022      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d01d      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_TIM_Base_Start_IT+0xc8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d018      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <HAL_TIM_Base_Start_IT+0xcc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d013      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <HAL_TIM_Base_Start_IT+0xd0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00e      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1b      	ldr	r2, [pc, #108]	; (8004248 <HAL_TIM_Base_Start_IT+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_TIM_Base_Start_IT+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIM_Base_Start_IT+0x80>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_TIM_Base_Start_IT+0xdc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d111      	bne.n	8004218 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b06      	cmp	r3, #6
 8004204:	d010      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	e007      	b.n	8004228 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40010000 	.word	0x40010000
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40010400 	.word	0x40010400
 800424c:	40014000 	.word	0x40014000
 8004250:	40001800 	.word	0x40001800

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d122      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11b      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0202 	mvn.w	r2, #2
 8004280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8ee 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f8e0 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8f1 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d122      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d11b      	bne.n	8004304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0204 	mvn.w	r2, #4
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f8c4 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8b6 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f8c7 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d122      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b08      	cmp	r3, #8
 800431e:	d11b      	bne.n	8004358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f89a 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f88c 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f89d 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	f003 0310 	and.w	r3, r3, #16
 8004362:	2b10      	cmp	r3, #16
 8004364:	d122      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b10      	cmp	r3, #16
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0210 	mvn.w	r2, #16
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2208      	movs	r2, #8
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f870 	bl	8004478 <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f862 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f873 	bl	800448c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10e      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f06f 0201 	mvn.w	r2, #1
 80043d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fa0a 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e2:	2b80      	cmp	r3, #128	; 0x80
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f902 	bl	8004608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440e:	2b40      	cmp	r3, #64	; 0x40
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f838 	bl	80044a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0220 	mvn.w	r2, #32
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8cc 	bl	80045f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a40      	ldr	r2, [pc, #256]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d013      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d2:	d00f      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a3d      	ldr	r2, [pc, #244]	; (80045cc <TIM_Base_SetConfig+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d00b      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <TIM_Base_SetConfig+0x11c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <TIM_Base_SetConfig+0x120>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3a      	ldr	r2, [pc, #232]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d108      	bne.n	8004506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d027      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2c      	ldr	r2, [pc, #176]	; (80045cc <TIM_Base_SetConfig+0x118>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d023      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <TIM_Base_SetConfig+0x11c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d01f      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2a      	ldr	r2, [pc, #168]	; (80045d4 <TIM_Base_SetConfig+0x120>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d017      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a28      	ldr	r2, [pc, #160]	; (80045dc <TIM_Base_SetConfig+0x128>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a27      	ldr	r2, [pc, #156]	; (80045e0 <TIM_Base_SetConfig+0x12c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00f      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <TIM_Base_SetConfig+0x130>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <TIM_Base_SetConfig+0x134>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a24      	ldr	r2, [pc, #144]	; (80045ec <TIM_Base_SetConfig+0x138>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a23      	ldr	r2, [pc, #140]	; (80045f0 <TIM_Base_SetConfig+0x13c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <TIM_Base_SetConfig+0x114>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a0c      	ldr	r2, [pc, #48]	; (80045d8 <TIM_Base_SetConfig+0x124>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40010400 	.word	0x40010400
 80045dc:	40014000 	.word	0x40014000
 80045e0:	40014400 	.word	0x40014400
 80045e4:	40014800 	.word	0x40014800
 80045e8:	40001800 	.word	0x40001800
 80045ec:	40001c00 	.word	0x40001c00
 80045f0:	40002000 	.word	0x40002000

080045f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e03f      	b.n	80046ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd f9a2 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2224      	movs	r2, #36	; 0x24
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800465e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f929 	bl	80048b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	; 0x28
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d17c      	bne.n	80047d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_UART_Transmit+0x2c>
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e075      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x3e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e06e      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fd fb8d 	bl	8001e28 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Transmit+0x82>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004748:	e02a      	b.n	80047a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f840 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e036      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3302      	adds	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e007      	b.n	8004792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1cf      	bne.n	800474a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2200      	movs	r2, #0
 80047b2:	2140      	movs	r1, #64	; 0x40
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f810 	bl	80047da <UART_WaitOnFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b090      	sub	sp, #64	; 0x40
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	e050      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047f2:	d04c      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x30>
 80047fa:	f7fd fb15 	bl	8001e28 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004806:	429a      	cmp	r2, r3
 8004808:	d241      	bcs.n	800488e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	330c      	adds	r3, #12
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800482a:	637a      	str	r2, [r7, #52]	; 0x34
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e5      	bne.n	800480a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3314      	adds	r3, #20
 8004844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	e853 3f00 	ldrex	r3, [r3]
 800484c:	613b      	str	r3, [r7, #16]
   return(result);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485e:	623a      	str	r2, [r7, #32]
 8004860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004862:	69f9      	ldr	r1, [r7, #28]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	e841 2300 	strex	r3, r2, [r1]
 800486a:	61bb      	str	r3, [r7, #24]
   return(result);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e5      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e00f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d09f      	beq.n	80047ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3740      	adds	r7, #64	; 0x40
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b0c0      	sub	sp, #256	; 0x100
 80048be:	af00      	add	r7, sp, #0
 80048c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	ea40 0301 	orr.w	r3, r0, r1
 80048e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004910:	f021 010c 	bic.w	r1, r1, #12
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800491e:	430b      	orrs	r3, r1
 8004920:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	6999      	ldr	r1, [r3, #24]
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	ea40 0301 	orr.w	r3, r0, r1
 800493e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8f      	ldr	r3, [pc, #572]	; (8004b84 <UART_SetConfig+0x2cc>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d005      	beq.n	8004958 <UART_SetConfig+0xa0>
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b8d      	ldr	r3, [pc, #564]	; (8004b88 <UART_SetConfig+0x2d0>)
 8004954:	429a      	cmp	r2, r3
 8004956:	d104      	bne.n	8004962 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe fe9e 	bl	8003698 <HAL_RCC_GetPCLK2Freq>
 800495c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004960:	e003      	b.n	800496a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004962:	f7fe fe85 	bl	8003670 <HAL_RCC_GetPCLK1Freq>
 8004966:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	f040 810c 	bne.w	8004b90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004978:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004982:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004986:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800498a:	4622      	mov	r2, r4
 800498c:	462b      	mov	r3, r5
 800498e:	1891      	adds	r1, r2, r2
 8004990:	65b9      	str	r1, [r7, #88]	; 0x58
 8004992:	415b      	adcs	r3, r3
 8004994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004996:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800499a:	4621      	mov	r1, r4
 800499c:	eb12 0801 	adds.w	r8, r2, r1
 80049a0:	4629      	mov	r1, r5
 80049a2:	eb43 0901 	adc.w	r9, r3, r1
 80049a6:	f04f 0200 	mov.w	r2, #0
 80049aa:	f04f 0300 	mov.w	r3, #0
 80049ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ba:	4690      	mov	r8, r2
 80049bc:	4699      	mov	r9, r3
 80049be:	4623      	mov	r3, r4
 80049c0:	eb18 0303 	adds.w	r3, r8, r3
 80049c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049c8:	462b      	mov	r3, r5
 80049ca:	eb49 0303 	adc.w	r3, r9, r3
 80049ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049e6:	460b      	mov	r3, r1
 80049e8:	18db      	adds	r3, r3, r3
 80049ea:	653b      	str	r3, [r7, #80]	; 0x50
 80049ec:	4613      	mov	r3, r2
 80049ee:	eb42 0303 	adc.w	r3, r2, r3
 80049f2:	657b      	str	r3, [r7, #84]	; 0x54
 80049f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049fc:	f7fc f8f4 	bl	8000be8 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4b61      	ldr	r3, [pc, #388]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2302 	umull	r2, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	011c      	lsls	r4, r3, #4
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a20:	4642      	mov	r2, r8
 8004a22:	464b      	mov	r3, r9
 8004a24:	1891      	adds	r1, r2, r2
 8004a26:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a28:	415b      	adcs	r3, r3
 8004a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a30:	4641      	mov	r1, r8
 8004a32:	eb12 0a01 	adds.w	sl, r2, r1
 8004a36:	4649      	mov	r1, r9
 8004a38:	eb43 0b01 	adc.w	fp, r3, r1
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a50:	4692      	mov	sl, r2
 8004a52:	469b      	mov	fp, r3
 8004a54:	4643      	mov	r3, r8
 8004a56:	eb1a 0303 	adds.w	r3, sl, r3
 8004a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb4b 0303 	adc.w	r3, fp, r3
 8004a64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	18db      	adds	r3, r3, r3
 8004a80:	643b      	str	r3, [r7, #64]	; 0x40
 8004a82:	4613      	mov	r3, r2
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a92:	f7fc f8a9 	bl	8000be8 <__aeabi_uldivmod>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2264      	movs	r2, #100	; 0x64
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004ab4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac0:	441c      	add	r4, r3
 8004ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004acc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ad0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	1891      	adds	r1, r2, r2
 8004ada:	63b9      	str	r1, [r7, #56]	; 0x38
 8004adc:	415b      	adcs	r3, r3
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ae0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	1851      	adds	r1, r2, r1
 8004ae8:	6339      	str	r1, [r7, #48]	; 0x30
 8004aea:	4649      	mov	r1, r9
 8004aec:	414b      	adcs	r3, r1
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004afc:	4659      	mov	r1, fp
 8004afe:	00cb      	lsls	r3, r1, #3
 8004b00:	4651      	mov	r1, sl
 8004b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b06:	4651      	mov	r1, sl
 8004b08:	00ca      	lsls	r2, r1, #3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4642      	mov	r2, r8
 8004b12:	189b      	adds	r3, r3, r2
 8004b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b18:	464b      	mov	r3, r9
 8004b1a:	460a      	mov	r2, r1
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b38:	460b      	mov	r3, r1
 8004b3a:	18db      	adds	r3, r3, r3
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b3e:	4613      	mov	r3, r2
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b4e:	f7fc f84b 	bl	8000be8 <__aeabi_uldivmod>
 8004b52:	4602      	mov	r2, r0
 8004b54:	460b      	mov	r3, r1
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b58:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	2164      	movs	r1, #100	; 0x64
 8004b60:	fb01 f303 	mul.w	r3, r1, r3
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	3332      	adds	r3, #50	; 0x32
 8004b6a:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <UART_SetConfig+0x2d4>)
 8004b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	f003 0207 	and.w	r2, r3, #7
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4422      	add	r2, r4
 8004b7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b80:	e105      	b.n	8004d8e <UART_SetConfig+0x4d6>
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	6239      	str	r1, [r7, #32]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
 8004bae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	4649      	mov	r1, r9
 8004bb8:	eb43 0501 	adc.w	r5, r3, r1
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	00eb      	lsls	r3, r5, #3
 8004bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bca:	00e2      	lsls	r2, r4, #3
 8004bcc:	4614      	mov	r4, r2
 8004bce:	461d      	mov	r5, r3
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	18e3      	adds	r3, r4, r3
 8004bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bd8:	464b      	mov	r3, r9
 8004bda:	eb45 0303 	adc.w	r3, r5, r3
 8004bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bfe:	4629      	mov	r1, r5
 8004c00:	008b      	lsls	r3, r1, #2
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c08:	4621      	mov	r1, r4
 8004c0a:	008a      	lsls	r2, r1, #2
 8004c0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c10:	f7fb ffea 	bl	8000be8 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b60      	ldr	r3, [pc, #384]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	61b9      	str	r1, [r7, #24]
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c44:	4641      	mov	r1, r8
 8004c46:	1851      	adds	r1, r2, r1
 8004c48:	6139      	str	r1, [r7, #16]
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	414b      	adcs	r3, r1
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c5c:	4659      	mov	r1, fp
 8004c5e:	00cb      	lsls	r3, r1, #3
 8004c60:	4651      	mov	r1, sl
 8004c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c66:	4651      	mov	r1, sl
 8004c68:	00ca      	lsls	r2, r1, #3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4603      	mov	r3, r0
 8004c70:	4642      	mov	r2, r8
 8004c72:	189b      	adds	r3, r3, r2
 8004c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c78:	464b      	mov	r3, r9
 8004c7a:	460a      	mov	r2, r1
 8004c7c:	eb42 0303 	adc.w	r3, r2, r3
 8004c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	008b      	lsls	r3, r1, #2
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	008a      	lsls	r2, r1, #2
 8004caa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cae:	f7fb ff9b 	bl	8000be8 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	2164      	movs	r1, #100	; 0x64
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	3332      	adds	r3, #50	; 0x32
 8004cca:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cd6:	441c      	add	r4, r3
 8004cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cdc:	2200      	movs	r2, #0
 8004cde:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ce2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ce6:	4642      	mov	r2, r8
 8004ce8:	464b      	mov	r3, r9
 8004cea:	1891      	adds	r1, r2, r2
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	415b      	adcs	r3, r3
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	1851      	adds	r1, r2, r1
 8004cfa:	6039      	str	r1, [r7, #0]
 8004cfc:	4649      	mov	r1, r9
 8004cfe:	414b      	adcs	r3, r1
 8004d00:	607b      	str	r3, [r7, #4]
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d0e:	4659      	mov	r1, fp
 8004d10:	00cb      	lsls	r3, r1, #3
 8004d12:	4651      	mov	r1, sl
 8004d14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d18:	4651      	mov	r1, sl
 8004d1a:	00ca      	lsls	r2, r1, #3
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	4642      	mov	r2, r8
 8004d24:	189b      	adds	r3, r3, r2
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d3c:	667a      	str	r2, [r7, #100]	; 0x64
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	008b      	lsls	r3, r1, #2
 8004d4e:	4641      	mov	r1, r8
 8004d50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d54:	4641      	mov	r1, r8
 8004d56:	008a      	lsls	r2, r1, #2
 8004d58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d5c:	f7fb ff44 	bl	8000be8 <__aeabi_uldivmod>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d66:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2164      	movs	r1, #100	; 0x64
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	; 0x32
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <UART_SetConfig+0x4e4>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4422      	add	r2, r4
 8004d8c:	609a      	str	r2, [r3, #8]
}
 8004d8e:	bf00      	nop
 8004d90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	51eb851f 	.word	0x51eb851f

08004da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f103 0208 	add.w	r2, r3, #8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f103 0208 	add.w	r2, r3, #8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b085      	sub	sp, #20
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e58:	d103      	bne.n	8004e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e00c      	b.n	8004e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3308      	adds	r3, #8
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	e002      	b.n	8004e70 <vListInsert+0x2e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d2f6      	bcs.n	8004e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6852      	ldr	r2, [r2, #4]
 8004ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d103      	bne.n	8004ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	1e5a      	subs	r2, r3, #1
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f32:	f002 fb7f 	bl	8007634 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f42:	fb01 f303 	mul.w	r3, r1, r3
 8004f46:	441a      	add	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	3b01      	subs	r3, #1
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	22ff      	movs	r2, #255	; 0xff
 8004f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d114      	bne.n	8004fb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3310      	adds	r3, #16
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 fab3 	bl	8006500 <xTaskRemoveFromEventList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d012      	beq.n	8004fc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <xQueueGenericReset+0xcc>)
 8004fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	e009      	b.n	8004fc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3310      	adds	r3, #16
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff fef2 	bl	8004da0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3324      	adds	r3, #36	; 0x24
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff feed 	bl	8004da0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fc6:	f002 fb65 	bl	8007694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fca:	2301      	movs	r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08e      	sub	sp, #56	; 0x38
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <xQueueGenericCreateStatic+0x52>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <xQueueGenericCreateStatic+0x56>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueGenericCreateStatic+0x58>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	623b      	str	r3, [r7, #32]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <xQueueGenericCreateStatic+0x7e>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <xQueueGenericCreateStatic+0x82>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <xQueueGenericCreateStatic+0x84>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	61fb      	str	r3, [r7, #28]
}
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005076:	2348      	movs	r3, #72	; 0x48
 8005078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b48      	cmp	r3, #72	; 0x48
 800507e:	d00a      	beq.n	8005096 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	61bb      	str	r3, [r7, #24]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005096:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00d      	beq.n	80050be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f83f 	bl	800513c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3348      	adds	r3, #72	; 0x48
 8005100:	4618      	mov	r0, r3
 8005102:	f002 fbb9 	bl	8007878 <pvPortMalloc>
 8005106:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d011      	beq.n	8005132 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	3348      	adds	r3, #72	; 0x48
 8005116:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005120:	79fa      	ldrb	r2, [r7, #7]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f805 	bl	800513c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005132:	69bb      	ldr	r3, [r7, #24]
	}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e002      	b.n	800515e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800516a:	2101      	movs	r1, #1
 800516c:	69b8      	ldr	r0, [r7, #24]
 800516e:	f7ff fecb 	bl	8004f08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005172:	bf00      	nop
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800519a:	2300      	movs	r3, #0
 800519c:	2200      	movs	r2, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f81d 	bl	80051e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80051b8:	2301      	movs	r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6939      	ldr	r1, [r7, #16]
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7ff ff7e 	bl	80050c8 <xQueueGenericCreate>
 80051cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff ffd3 	bl	800517a <prvInitialiseMutex>

		return xNewQueue;
 80051d4:	68fb      	ldr	r3, [r7, #12]
	}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericSend+0x32>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <xQueueGenericSend+0x40>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <xQueueGenericSend+0x44>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <xQueueGenericSend+0x46>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xQueueGenericSend+0x60>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d103      	bne.n	800524e <xQueueGenericSend+0x6e>
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <xQueueGenericSend+0x72>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <xQueueGenericSend+0x74>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xQueueGenericSend+0x8e>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	623b      	str	r3, [r7, #32]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800526e:	f001 fb07 	bl	8006880 <xTaskGetSchedulerState>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <xQueueGenericSend+0x9e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <xQueueGenericSend+0xa2>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <xQueueGenericSend+0xa4>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xQueueGenericSend+0xbe>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61fb      	str	r3, [r7, #28]
}
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800529e:	f002 f9c9 	bl	8007634 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xQueueGenericSend+0xd4>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d129      	bne.n	8005308 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ba:	f000 fb2f 	bl	800591c <prvCopyDataToQueue>
 80052be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	3324      	adds	r3, #36	; 0x24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f917 	bl	8006500 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e00a      	b.n	8005300 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005300:	f002 f9c8 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	e063      	b.n	80053d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800530e:	f002 f9c1 	bl	8007694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005312:	2300      	movs	r3, #0
 8005314:	e05c      	b.n	80053d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f94f 	bl	80065c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800532a:	f002 f9b3 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532e:	f000 feb1 	bl	8006094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005332:	f002 f97f 	bl	8007634 <vPortEnterCritical>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533c:	b25b      	sxtb	r3, r3
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005342:	d103      	bne.n	800534c <xQueueGenericSend+0x16c>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005352:	b25b      	sxtb	r3, r3
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x182>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005362:	f002 f997 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005366:	1d3a      	adds	r2, r7, #4
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f93e 	bl	80065f0 <xTaskCheckForTimeOut>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d124      	bne.n	80053c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800537a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537c:	f000 fbc6 	bl	8005b0c <prvIsQueueFull>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	3310      	adds	r3, #16
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f001 f866 	bl	8006460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005396:	f000 fb51 	bl	8005a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800539a:	f000 fe89 	bl	80060b0 <xTaskResumeAll>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f af7c 	bne.w	800529e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	e772      	b.n	800529e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ba:	f000 fb3f 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053be:	f000 fe77 	bl	80060b0 <xTaskResumeAll>
 80053c2:	e76c      	b.n	800529e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c6:	f000 fb39 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053ca:	f000 fe71 	bl	80060b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3738      	adds	r7, #56	; 0x38
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	; 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <xQueueGenericSendFromISR+0x3c>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <xQueueGenericSendFromISR+0x40>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <xQueueGenericSendFromISR+0x42>
 800541c:	2300      	movs	r3, #0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d103      	bne.n	8005446 <xQueueGenericSendFromISR+0x6a>
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <xQueueGenericSendFromISR+0x6e>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueGenericSendFromISR+0x70>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	623b      	str	r3, [r7, #32]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005466:	f002 f9c7 	bl	80077f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800546a:	f3ef 8211 	mrs	r2, BASEPRI
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005482:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <xQueueGenericSendFromISR+0xbc>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d12f      	bne.n	80054f8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ae:	f000 fa35 	bl	800591c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ba:	d112      	bne.n	80054e2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f819 	bl	8006500 <xTaskRemoveFromEventList>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e007      	b.n	80054f2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054e6:	3301      	adds	r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	b25a      	sxtb	r2, r3
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054f2:	2301      	movs	r3, #1
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054f6:	e001      	b.n	80054fc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005506:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800550a:	4618      	mov	r0, r3
 800550c:	3740      	adds	r7, #64	; 0x40
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08c      	sub	sp, #48	; 0x30
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005520:	2300      	movs	r3, #0
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <xQueueReceive+0x30>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	623b      	str	r3, [r7, #32]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <xQueueReceive+0x3e>
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <xQueueReceive+0x42>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <xQueueReceive+0x44>
 8005556:	2300      	movs	r3, #0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xQueueReceive+0x5e>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	61fb      	str	r3, [r7, #28]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005572:	f001 f985 	bl	8006880 <xTaskGetSchedulerState>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <xQueueReceive+0x6e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <xQueueReceive+0x72>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <xQueueReceive+0x74>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xQueueReceive+0x8e>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61bb      	str	r3, [r7, #24]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055a2:	f002 f847 	bl	8007634 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01f      	beq.n	80055f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b6:	f000 fa1b 	bl	80059f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1e5a      	subs	r2, r3, #1
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00f      	beq.n	80055ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	3310      	adds	r3, #16
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 ff96 	bl	8006500 <xTaskRemoveFromEventList>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055da:	4b3d      	ldr	r3, [pc, #244]	; (80056d0 <xQueueReceive+0x1bc>)
 80055dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ea:	f002 f853 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e069      	b.n	80056c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055f8:	f002 f84c 	bl	8007694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e062      	b.n	80056c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005606:	f107 0310 	add.w	r3, r7, #16
 800560a:	4618      	mov	r0, r3
 800560c:	f000 ffda 	bl	80065c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005610:	2301      	movs	r3, #1
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005614:	f002 f83e 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005618:	f000 fd3c 	bl	8006094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800561c:	f002 f80a 	bl	8007634 <vPortEnterCritical>
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005626:	b25b      	sxtb	r3, r3
 8005628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800562c:	d103      	bne.n	8005636 <xQueueReceive+0x122>
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800563c:	b25b      	sxtb	r3, r3
 800563e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005642:	d103      	bne.n	800564c <xQueueReceive+0x138>
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800564c:	f002 f822 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005650:	1d3a      	adds	r2, r7, #4
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 ffc9 	bl	80065f0 <xTaskCheckForTimeOut>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d123      	bne.n	80056ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005666:	f000 fa3b 	bl	8005ae0 <prvIsQueueEmpty>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d017      	beq.n	80056a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	3324      	adds	r3, #36	; 0x24
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fef1 	bl	8006460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800567e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005680:	f000 f9dc 	bl	8005a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005684:	f000 fd14 	bl	80060b0 <xTaskResumeAll>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d189      	bne.n	80055a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800568e:	4b10      	ldr	r3, [pc, #64]	; (80056d0 <xQueueReceive+0x1bc>)
 8005690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	e780      	b.n	80055a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a2:	f000 f9cb 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056a6:	f000 fd03 	bl	80060b0 <xTaskResumeAll>
 80056aa:	e77a      	b.n	80055a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ae:	f000 f9c5 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056b2:	f000 fcfd 	bl	80060b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b8:	f000 fa12 	bl	8005ae0 <prvIsQueueEmpty>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f43f af6f 	beq.w	80055a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3730      	adds	r7, #48	; 0x30
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	; 0x38
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056e6:	2300      	movs	r3, #0
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	623b      	str	r3, [r7, #32]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	61fb      	str	r3, [r7, #28]
}
 8005720:	bf00      	nop
 8005722:	e7fe      	b.n	8005722 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005724:	f001 f8ac 	bl	8006880 <xTaskGetSchedulerState>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <xQueueSemaphoreTake+0x60>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <xQueueSemaphoreTake+0x64>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <xQueueSemaphoreTake+0x66>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	61bb      	str	r3, [r7, #24]
}
 8005750:	bf00      	nop
 8005752:	e7fe      	b.n	8005752 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005754:	f001 ff6e 	bl	8007634 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d024      	beq.n	80057ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005774:	f001 fa2c 	bl	8006bd0 <pvTaskIncrementMutexHeldCount>
 8005778:	4602      	mov	r2, r0
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00f      	beq.n	80057a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	3310      	adds	r3, #16
 800578a:	4618      	mov	r0, r3
 800578c:	f000 feb8 	bl	8006500 <xTaskRemoveFromEventList>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005796:	4b54      	ldr	r3, [pc, #336]	; (80058e8 <xQueueSemaphoreTake+0x214>)
 8005798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057a6:	f001 ff75 	bl	8007694 <vPortExitCritical>
				return pdPASS;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e097      	b.n	80058de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d111      	bne.n	80057d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	617b      	str	r3, [r7, #20]
}
 80057cc:	bf00      	nop
 80057ce:	e7fe      	b.n	80057ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057d0:	f001 ff60 	bl	8007694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e082      	b.n	80058de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 feee 	bl	80065c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ec:	f001 ff52 	bl	8007694 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057f0:	f000 fc50 	bl	8006094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057f4:	f001 ff1e 	bl	8007634 <vPortEnterCritical>
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057fe:	b25b      	sxtb	r3, r3
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005804:	d103      	bne.n	800580e <xQueueSemaphoreTake+0x13a>
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005814:	b25b      	sxtb	r3, r3
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800581a:	d103      	bne.n	8005824 <xQueueSemaphoreTake+0x150>
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005824:	f001 ff36 	bl	8007694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005828:	463a      	mov	r2, r7
 800582a:	f107 030c 	add.w	r3, r7, #12
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fedd 	bl	80065f0 <xTaskCheckForTimeOut>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d132      	bne.n	80058a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800583c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800583e:	f000 f94f 	bl	8005ae0 <prvIsQueueEmpty>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d026      	beq.n	8005896 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005850:	f001 fef0 	bl	8007634 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f001 f82f 	bl	80068bc <xTaskPriorityInherit>
 800585e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005860:	f001 ff18 	bl	8007694 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fdf7 	bl	8006460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005874:	f000 f8e2 	bl	8005a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005878:	f000 fc1a 	bl	80060b0 <xTaskResumeAll>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	f47f af68 	bne.w	8005754 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005884:	4b18      	ldr	r3, [pc, #96]	; (80058e8 <xQueueSemaphoreTake+0x214>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	e75e      	b.n	8005754 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005898:	f000 f8d0 	bl	8005a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800589c:	f000 fc08 	bl	80060b0 <xTaskResumeAll>
 80058a0:	e758      	b.n	8005754 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80058a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058a4:	f000 f8ca 	bl	8005a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a8:	f000 fc02 	bl	80060b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058ae:	f000 f917 	bl	8005ae0 <prvIsQueueEmpty>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f43f af4d 	beq.w	8005754 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00d      	beq.n	80058dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058c0:	f001 feb8 	bl	8007634 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058c6:	f000 f811 	bl	80058ec <prvGetDisinheritPriorityAfterTimeout>
 80058ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f001 f8ee 	bl	8006ab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058d8:	f001 fedc 	bl	8007694 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3738      	adds	r7, #56	; 0x38
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f1c3 0307 	rsb	r3, r3, #7
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e001      	b.n	800590e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800590e:	68fb      	ldr	r3, [r7, #12]
	}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10d      	bne.n	8005956 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d14d      	bne.n	80059de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f001 f82e 	bl	80069a8 <xTaskPriorityDisinherit>
 800594c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e043      	b.n	80059de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d119      	bne.n	8005990 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6858      	ldr	r0, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	461a      	mov	r2, r3
 8005966:	68b9      	ldr	r1, [r7, #8]
 8005968:	f002 fa93 	bl	8007e92 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	441a      	add	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	d32b      	bcc.n	80059de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	e026      	b.n	80059de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68d8      	ldr	r0, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	461a      	mov	r2, r3
 800599a:	68b9      	ldr	r1, [r7, #8]
 800599c:	f002 fa79 	bl	8007e92 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	425b      	negs	r3, r3
 80059aa:	441a      	add	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d207      	bcs.n	80059cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	425b      	negs	r3, r3
 80059c6:	441a      	add	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d105      	bne.n	80059de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3b01      	subs	r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059e6:	697b      	ldr	r3, [r7, #20]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d303      	bcc.n	8005a24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68d9      	ldr	r1, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6838      	ldr	r0, [r7, #0]
 8005a30:	f002 fa2f 	bl	8007e92 <memcpy>
	}
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a44:	f001 fdf6 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a50:	e011      	b.n	8005a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d012      	beq.n	8005a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fd4e 	bl	8006500 <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a6a:	f000 fe23 	bl	80066b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dce9      	bgt.n	8005a52 <prvUnlockQueue+0x16>
 8005a7e:	e000      	b.n	8005a82 <prvUnlockQueue+0x46>
					break;
 8005a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a8a:	f001 fe03 	bl	8007694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a8e:	f001 fdd1 	bl	8007634 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a9a:	e011      	b.n	8005ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd29 	bl	8006500 <xTaskRemoveFromEventList>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ab4:	f000 fdfe 	bl	80066b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dce9      	bgt.n	8005a9c <prvUnlockQueue+0x60>
 8005ac8:	e000      	b.n	8005acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ad4:	f001 fdde 	bl	8007694 <vPortExitCritical>
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ae8:	f001 fda4 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e001      	b.n	8005afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005afe:	f001 fdc9 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b14:	f001 fd8e 	bl	8007634 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d102      	bne.n	8005b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e001      	b.n	8005b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b2e:	f001 fdb1 	bl	8007694 <vPortExitCritical>

	return xReturn;
 8005b32:	68fb      	ldr	r3, [r7, #12]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e014      	b.n	8005b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b4c:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <vQueueAddToRegistry+0x50>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b58:	490c      	ldr	r1, [pc, #48]	; (8005b8c <vQueueAddToRegistry+0x50>)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b62:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <vQueueAddToRegistry+0x50>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b6e:	e006      	b.n	8005b7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	d9e7      	bls.n	8005b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000af8 	.word	0x20000af8

08005b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ba0:	f001 fd48 	bl	8007634 <vPortEnterCritical>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb0:	d103      	bne.n	8005bba <vQueueWaitForMessageRestricted+0x2a>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc6:	d103      	bne.n	8005bd0 <vQueueWaitForMessageRestricted+0x40>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd0:	f001 fd60 	bl	8007694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d106      	bne.n	8005bea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3324      	adds	r3, #36	; 0x24
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fc5f 	bl	80064a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bea:	6978      	ldr	r0, [r7, #20]
 8005bec:	f7ff ff26 	bl	8005a3c <prvUnlockQueue>
	}
 8005bf0:	bf00      	nop
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	; 0x38
 8005bfc:	af04      	add	r7, sp, #16
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	623b      	str	r3, [r7, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xTaskCreateStatic+0x46>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61fb      	str	r3, [r7, #28]
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c3e:	23b4      	movs	r3, #180	; 0xb4
 8005c40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2bb4      	cmp	r3, #180	; 0xb4
 8005c46:	d00a      	beq.n	8005c5e <xTaskCreateStatic+0x66>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61bb      	str	r3, [r7, #24]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d01e      	beq.n	8005ca4 <xTaskCreateStatic+0xac>
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01b      	beq.n	8005ca4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2202      	movs	r2, #2
 8005c7a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9303      	str	r3, [sp, #12]
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	9302      	str	r3, [sp, #8]
 8005c86:	f107 0314 	add.w	r3, r7, #20
 8005c8a:	9301      	str	r3, [sp, #4]
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f850 	bl	8005d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c9e:	f000 f8eb 	bl	8005e78 <prvAddNewTaskToReadyList>
 8005ca2:	e001      	b.n	8005ca8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ca8:	697b      	ldr	r3, [r7, #20]
	}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3728      	adds	r7, #40	; 0x28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08c      	sub	sp, #48	; 0x30
 8005cb6:	af04      	add	r7, sp, #16
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fdd6 	bl	8007878 <pvPortMalloc>
 8005ccc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cd4:	20b4      	movs	r0, #180	; 0xb4
 8005cd6:	f001 fdcf 	bl	8007878 <pvPortMalloc>
 8005cda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce8:	e005      	b.n	8005cf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cea:	6978      	ldr	r0, [r7, #20]
 8005cec:	f001 fe90 	bl	8007a10 <vPortFree>
 8005cf0:	e001      	b.n	8005cf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d017      	beq.n	8005d2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	2300      	movs	r3, #0
 8005d08:	9303      	str	r3, [sp, #12]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	9302      	str	r3, [sp, #8]
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f80e 	bl	8005d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d20:	69f8      	ldr	r0, [r7, #28]
 8005d22:	f000 f8a9 	bl	8005e78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d26:	2301      	movs	r3, #1
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	e002      	b.n	8005d32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d32:	69bb      	ldr	r3, [r7, #24]
	}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3720      	adds	r7, #32
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d54:	3b01      	subs	r3, #1
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	617b      	str	r3, [r7, #20]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01f      	beq.n	8005dca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e012      	b.n	8005db6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	4413      	add	r3, r2
 8005d96:	7819      	ldrb	r1, [r3, #0]
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3334      	adds	r3, #52	; 0x34
 8005da0:	460a      	mov	r2, r1
 8005da2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d006      	beq.n	8005dbe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	3301      	adds	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	2b0f      	cmp	r3, #15
 8005dba:	d9e9      	bls.n	8005d90 <prvInitialiseNewTask+0x54>
 8005dbc:	e000      	b.n	8005dc0 <prvInitialiseNewTask+0x84>
			{
				break;
 8005dbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc8:	e003      	b.n	8005dd2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d901      	bls.n	8005ddc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd8:	2306      	movs	r3, #6
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2200      	movs	r2, #0
 8005dec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fff4 	bl	8004de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe ffef 	bl	8004de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	f1c3 0207 	rsb	r2, r3, #7
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	334c      	adds	r3, #76	; 0x4c
 8005e2c:	2260      	movs	r2, #96	; 0x60
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f002 f83c 	bl	8007eae <memset>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <prvInitialiseNewTask+0x130>)
 8005e3a:	651a      	str	r2, [r3, #80]	; 0x50
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <prvInitialiseNewTask+0x134>)
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	4a0b      	ldr	r2, [pc, #44]	; (8005e74 <prvInitialiseNewTask+0x138>)
 8005e46:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f001 fac7 	bl	80073e0 <pxPortInitialiseStack>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e64:	bf00      	nop
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	0800ace8 	.word	0x0800ace8
 8005e70:	0800ad08 	.word	0x0800ad08
 8005e74:	0800acc8 	.word	0x0800acc8

08005e78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e80:	f001 fbd8 	bl	8007634 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e84:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <prvAddNewTaskToReadyList+0xb8>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <prvAddNewTaskToReadyList+0xb8>)
 8005e8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e8e:	4b29      	ldr	r3, [pc, #164]	; (8005f34 <prvAddNewTaskToReadyList+0xbc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e96:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <prvAddNewTaskToReadyList+0xbc>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e9c:	4b24      	ldr	r3, [pc, #144]	; (8005f30 <prvAddNewTaskToReadyList+0xb8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d110      	bne.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ea4:	f000 fc2a 	bl	80066fc <prvInitialiseTaskLists>
 8005ea8:	e00d      	b.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eaa:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <prvAddNewTaskToReadyList+0xc0>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005eb2:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <prvAddNewTaskToReadyList+0xbc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d802      	bhi.n	8005ec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ec0:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <prvAddNewTaskToReadyList+0xbc>)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ec6:	4b1d      	ldr	r3, [pc, #116]	; (8005f3c <prvAddNewTaskToReadyList+0xc4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <prvAddNewTaskToReadyList+0xc4>)
 8005ece:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	4b19      	ldr	r3, [pc, #100]	; (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <prvAddNewTaskToReadyList+0xc8>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <prvAddNewTaskToReadyList+0xcc>)
 8005ef0:	441a      	add	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fe ff7e 	bl	8004dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005efe:	f001 fbc9 	bl	8007694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f02:	4b0d      	ldr	r3, [pc, #52]	; (8005f38 <prvAddNewTaskToReadyList+0xc0>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <prvAddNewTaskToReadyList+0xbc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d207      	bcs.n	8005f28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <prvAddNewTaskToReadyList+0xd0>)
 8005f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000c38 	.word	0x20000c38
 8005f34:	20000b38 	.word	0x20000b38
 8005f38:	20000c44 	.word	0x20000c44
 8005f3c:	20000c54 	.word	0x20000c54
 8005f40:	20000c40 	.word	0x20000c40
 8005f44:	20000b3c 	.word	0x20000b3c
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <vTaskDelay+0x60>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <vTaskDelay+0x30>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60bb      	str	r3, [r7, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f7c:	f000 f88a 	bl	8006094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f80:	2100      	movs	r1, #0
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fe38 	bl	8006bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f88:	f000 f892 	bl	80060b0 <xTaskResumeAll>
 8005f8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <vTaskDelay+0x64>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20000c60 	.word	0x20000c60
 8005fb0:	e000ed04 	.word	0xe000ed04

08005fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	; 0x28
 8005fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	1d39      	adds	r1, r7, #4
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fa ff8e 	bl	8000eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	9202      	str	r2, [sp, #8]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	4924      	ldr	r1, [pc, #144]	; (8006074 <vTaskStartScheduler+0xc0>)
 8005fe4:	4824      	ldr	r0, [pc, #144]	; (8006078 <vTaskStartScheduler+0xc4>)
 8005fe6:	f7ff fe07 	bl	8005bf8 <xTaskCreateStatic>
 8005fea:	4603      	mov	r3, r0
 8005fec:	4a23      	ldr	r2, [pc, #140]	; (800607c <vTaskStartScheduler+0xc8>)
 8005fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ff0:	4b22      	ldr	r3, [pc, #136]	; (800607c <vTaskStartScheduler+0xc8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e001      	b.n	8006002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d102      	bne.n	800600e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006008:	f000 fe5c 	bl	8006cc4 <xTimerCreateTimerTask>
 800600c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d11b      	bne.n	800604c <vTaskStartScheduler+0x98>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	613b      	str	r3, [r7, #16]
}
 8006026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <vTaskStartScheduler+0xcc>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	334c      	adds	r3, #76	; 0x4c
 800602e:	4a15      	ldr	r2, [pc, #84]	; (8006084 <vTaskStartScheduler+0xd0>)
 8006030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <vTaskStartScheduler+0xd4>)
 8006034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800603a:	4b14      	ldr	r3, [pc, #80]	; (800608c <vTaskStartScheduler+0xd8>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006040:	4b13      	ldr	r3, [pc, #76]	; (8006090 <vTaskStartScheduler+0xdc>)
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006046:	f001 fa53 	bl	80074f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800604a:	e00e      	b.n	800606a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006052:	d10a      	bne.n	800606a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <vTaskStartScheduler+0xb4>
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	0800ac98 	.word	0x0800ac98
 8006078:	080066cd 	.word	0x080066cd
 800607c:	20000c5c 	.word	0x20000c5c
 8006080:	20000b38 	.word	0x20000b38
 8006084:	20000010 	.word	0x20000010
 8006088:	20000c58 	.word	0x20000c58
 800608c:	20000c44 	.word	0x20000c44
 8006090:	20000c3c 	.word	0x20000c3c

08006094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <vTaskSuspendAll+0x18>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	4a03      	ldr	r2, [pc, #12]	; (80060ac <vTaskSuspendAll+0x18>)
 80060a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060a2:	bf00      	nop
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20000c60 	.word	0x20000c60

080060b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060be:	4b41      	ldr	r3, [pc, #260]	; (80061c4 <xTaskResumeAll+0x114>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xTaskResumeAll+0x2c>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	603b      	str	r3, [r7, #0]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060dc:	f001 faaa 	bl	8007634 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060e0:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <xTaskResumeAll+0x114>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <xTaskResumeAll+0x114>)
 80060e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ea:	4b36      	ldr	r3, [pc, #216]	; (80061c4 <xTaskResumeAll+0x114>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d161      	bne.n	80061b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060f2:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <xTaskResumeAll+0x118>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d05d      	beq.n	80061b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060fa:	e02e      	b.n	800615a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fc:	4b33      	ldr	r3, [pc, #204]	; (80061cc <xTaskResumeAll+0x11c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	3318      	adds	r3, #24
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe fed3 	bl	8004eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3304      	adds	r3, #4
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fece 	bl	8004eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <xTaskResumeAll+0x120>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <xTaskResumeAll+0x120>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <xTaskResumeAll+0x124>)
 8006138:	441a      	add	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fe fe5a 	bl	8004dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <xTaskResumeAll+0x128>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <xTaskResumeAll+0x12c>)
 8006156:	2201      	movs	r2, #1
 8006158:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800615a:	4b1c      	ldr	r3, [pc, #112]	; (80061cc <xTaskResumeAll+0x11c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1cc      	bne.n	80060fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006168:	f000 fb6a 	bl	8006840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800616c:	4b1c      	ldr	r3, [pc, #112]	; (80061e0 <xTaskResumeAll+0x130>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d010      	beq.n	800619a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006178:	f000 f858 	bl	800622c <xTaskIncrementTick>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006182:	4b16      	ldr	r3, [pc, #88]	; (80061dc <xTaskResumeAll+0x12c>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f1      	bne.n	8006178 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006194:	4b12      	ldr	r3, [pc, #72]	; (80061e0 <xTaskResumeAll+0x130>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <xTaskResumeAll+0x12c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <xTaskResumeAll+0x134>)
 80061a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061b6:	f001 fa6d 	bl	8007694 <vPortExitCritical>

	return xAlreadyYielded;
 80061ba:	68bb      	ldr	r3, [r7, #8]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000c60 	.word	0x20000c60
 80061c8:	20000c38 	.word	0x20000c38
 80061cc:	20000bf8 	.word	0x20000bf8
 80061d0:	20000c40 	.word	0x20000c40
 80061d4:	20000b3c 	.word	0x20000b3c
 80061d8:	20000b38 	.word	0x20000b38
 80061dc:	20000c4c 	.word	0x20000c4c
 80061e0:	20000c48 	.word	0x20000c48
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <xTaskGetTickCount+0x1c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061f4:	687b      	ldr	r3, [r7, #4]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000c3c 	.word	0x20000c3c

08006208 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800620e:	f001 faf3 	bl	80077f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006216:	4b04      	ldr	r3, [pc, #16]	; (8006228 <xTaskGetTickCountFromISR+0x20>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800621c:	683b      	ldr	r3, [r7, #0]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000c3c 	.word	0x20000c3c

0800622c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006236:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <xTaskIncrementTick+0x144>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 808e 	bne.w	800635c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006240:	4b4c      	ldr	r3, [pc, #304]	; (8006374 <xTaskIncrementTick+0x148>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006248:	4a4a      	ldr	r2, [pc, #296]	; (8006374 <xTaskIncrementTick+0x148>)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d120      	bne.n	8006296 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006254:	4b48      	ldr	r3, [pc, #288]	; (8006378 <xTaskIncrementTick+0x14c>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <xTaskIncrementTick+0x48>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	603b      	str	r3, [r7, #0]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <xTaskIncrementTick+0x46>
 8006274:	4b40      	ldr	r3, [pc, #256]	; (8006378 <xTaskIncrementTick+0x14c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	4b40      	ldr	r3, [pc, #256]	; (800637c <xTaskIncrementTick+0x150>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a3e      	ldr	r2, [pc, #248]	; (8006378 <xTaskIncrementTick+0x14c>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	4a3e      	ldr	r2, [pc, #248]	; (800637c <xTaskIncrementTick+0x150>)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <xTaskIncrementTick+0x154>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3301      	adds	r3, #1
 800628e:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <xTaskIncrementTick+0x154>)
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	f000 fad5 	bl	8006840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006296:	4b3b      	ldr	r3, [pc, #236]	; (8006384 <xTaskIncrementTick+0x158>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	429a      	cmp	r2, r3
 800629e:	d348      	bcc.n	8006332 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <xTaskIncrementTick+0x14c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d104      	bne.n	80062b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062aa:	4b36      	ldr	r3, [pc, #216]	; (8006384 <xTaskIncrementTick+0x158>)
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062b0:	601a      	str	r2, [r3, #0]
					break;
 80062b2:	e03e      	b.n	8006332 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b4:	4b30      	ldr	r3, [pc, #192]	; (8006378 <xTaskIncrementTick+0x14c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d203      	bcs.n	80062d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <xTaskIncrementTick+0x158>)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062d2:	e02e      	b.n	8006332 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe fdeb 	bl	8004eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d004      	beq.n	80062f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fde2 	bl	8004eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	2201      	movs	r2, #1
 80062f6:	409a      	lsls	r2, r3
 80062f8:	4b23      	ldr	r3, [pc, #140]	; (8006388 <xTaskIncrementTick+0x15c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	4a22      	ldr	r2, [pc, #136]	; (8006388 <xTaskIncrementTick+0x15c>)
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4a1f      	ldr	r2, [pc, #124]	; (800638c <xTaskIncrementTick+0x160>)
 8006310:	441a      	add	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7fe fd6e 	bl	8004dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <xTaskIncrementTick+0x164>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	429a      	cmp	r2, r3
 800632a:	d3b9      	bcc.n	80062a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006330:	e7b6      	b.n	80062a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006332:	4b17      	ldr	r3, [pc, #92]	; (8006390 <xTaskIncrementTick+0x164>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	4914      	ldr	r1, [pc, #80]	; (800638c <xTaskIncrementTick+0x160>)
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d901      	bls.n	800634e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800634a:	2301      	movs	r3, #1
 800634c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <xTaskIncrementTick+0x168>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e004      	b.n	8006366 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800635c:	4b0e      	ldr	r3, [pc, #56]	; (8006398 <xTaskIncrementTick+0x16c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <xTaskIncrementTick+0x16c>)
 8006364:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006366:	697b      	ldr	r3, [r7, #20]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000c60 	.word	0x20000c60
 8006374:	20000c3c 	.word	0x20000c3c
 8006378:	20000bf0 	.word	0x20000bf0
 800637c:	20000bf4 	.word	0x20000bf4
 8006380:	20000c50 	.word	0x20000c50
 8006384:	20000c58 	.word	0x20000c58
 8006388:	20000c40 	.word	0x20000c40
 800638c:	20000b3c 	.word	0x20000b3c
 8006390:	20000b38 	.word	0x20000b38
 8006394:	20000c4c 	.word	0x20000c4c
 8006398:	20000c48 	.word	0x20000c48

0800639c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063a2:	4b29      	ldr	r3, [pc, #164]	; (8006448 <vTaskSwitchContext+0xac>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063aa:	4b28      	ldr	r3, [pc, #160]	; (800644c <vTaskSwitchContext+0xb0>)
 80063ac:	2201      	movs	r2, #1
 80063ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063b0:	e044      	b.n	800643c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80063b2:	4b26      	ldr	r3, [pc, #152]	; (800644c <vTaskSwitchContext+0xb0>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b8:	4b25      	ldr	r3, [pc, #148]	; (8006450 <vTaskSwitchContext+0xb4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	fab3 f383 	clz	r3, r3
 80063c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063c6:	7afb      	ldrb	r3, [r7, #11]
 80063c8:	f1c3 031f 	rsb	r3, r3, #31
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	4921      	ldr	r1, [pc, #132]	; (8006454 <vTaskSwitchContext+0xb8>)
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	440b      	add	r3, r1
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	607b      	str	r3, [r7, #4]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <vTaskSwitchContext+0x5a>
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4a14      	ldr	r2, [pc, #80]	; (8006454 <vTaskSwitchContext+0xb8>)
 8006404:	4413      	add	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3308      	adds	r3, #8
 800641a:	429a      	cmp	r2, r3
 800641c:	d104      	bne.n	8006428 <vTaskSwitchContext+0x8c>
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4a0a      	ldr	r2, [pc, #40]	; (8006458 <vTaskSwitchContext+0xbc>)
 8006430:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <vTaskSwitchContext+0xbc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	334c      	adds	r3, #76	; 0x4c
 8006438:	4a08      	ldr	r2, [pc, #32]	; (800645c <vTaskSwitchContext+0xc0>)
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	20000c60 	.word	0x20000c60
 800644c:	20000c4c 	.word	0x20000c4c
 8006450:	20000c40 	.word	0x20000c40
 8006454:	20000b3c 	.word	0x20000b3c
 8006458:	20000b38 	.word	0x20000b38
 800645c:	20000010 	.word	0x20000010

08006460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	60fb      	str	r3, [r7, #12]
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <vTaskPlaceOnEventList+0x44>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3318      	adds	r3, #24
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fe fcd7 	bl	8004e42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006494:	2101      	movs	r1, #1
 8006496:	6838      	ldr	r0, [r7, #0]
 8006498:	f000 fbae 	bl	8006bf8 <prvAddCurrentTaskToDelayedList>
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000b38 	.word	0x20000b38

080064a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	617b      	str	r3, [r7, #20]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d0:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <vTaskPlaceOnEventListRestricted+0x54>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3318      	adds	r3, #24
 80064d6:	4619      	mov	r1, r3
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7fe fc8e 	bl	8004dfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f000 fb83 	bl	8006bf8 <prvAddCurrentTaskToDelayedList>
	}
 80064f2:	bf00      	nop
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000b38 	.word	0x20000b38

08006500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	3318      	adds	r3, #24
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fcbf 	bl	8004eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <xTaskRemoveFromEventList+0xac>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d11c      	bne.n	8006578 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	3304      	adds	r3, #4
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fcb6 	bl	8004eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <xTaskRemoveFromEventList+0xb0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	4a16      	ldr	r2, [pc, #88]	; (80065b0 <xTaskRemoveFromEventList+0xb0>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655e:	4613      	mov	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <xTaskRemoveFromEventList+0xb4>)
 8006568:	441a      	add	r2, r3
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f7fe fc42 	bl	8004dfa <vListInsertEnd>
 8006576:	e005      	b.n	8006584 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	3318      	adds	r3, #24
 800657c:	4619      	mov	r1, r3
 800657e:	480e      	ldr	r0, [pc, #56]	; (80065b8 <xTaskRemoveFromEventList+0xb8>)
 8006580:	f7fe fc3b 	bl	8004dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <xTaskRemoveFromEventList+0xbc>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658e:	429a      	cmp	r2, r3
 8006590:	d905      	bls.n	800659e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006592:	2301      	movs	r3, #1
 8006594:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006596:	4b0a      	ldr	r3, [pc, #40]	; (80065c0 <xTaskRemoveFromEventList+0xc0>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e001      	b.n	80065a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000c60 	.word	0x20000c60
 80065b0:	20000c40 	.word	0x20000c40
 80065b4:	20000b3c 	.word	0x20000b3c
 80065b8:	20000bf8 	.word	0x20000bf8
 80065bc:	20000b38 	.word	0x20000b38
 80065c0:	20000c4c 	.word	0x20000c4c

080065c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <vTaskInternalSetTimeOutState+0x24>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <vTaskInternalSetTimeOutState+0x28>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	605a      	str	r2, [r3, #4]
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20000c50 	.word	0x20000c50
 80065ec:	20000c3c 	.word	0x20000c3c

080065f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	613b      	str	r3, [r7, #16]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006632:	f000 ffff 	bl	8007634 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006636:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <xTaskCheckForTimeOut+0xbc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800664e:	d102      	bne.n	8006656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e023      	b.n	800669e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <xTaskCheckForTimeOut+0xc0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d007      	beq.n	8006672 <xTaskCheckForTimeOut+0x82>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e015      	b.n	800669e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	d20b      	bcs.n	8006694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff9b 	bl	80065c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e004      	b.n	800669e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800669e:	f000 fff9 	bl	8007694 <vPortExitCritical>

	return xReturn;
 80066a2:	69fb      	ldr	r3, [r7, #28]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000c3c 	.word	0x20000c3c
 80066b0:	20000c50 	.word	0x20000c50

080066b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <vTaskMissedYield+0x14>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000c4c 	.word	0x20000c4c

080066cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066d4:	f000 f852 	bl	800677c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvIdleTask+0x28>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d9f9      	bls.n	80066d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <prvIdleTask+0x2c>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066f0:	e7f0      	b.n	80066d4 <prvIdleTask+0x8>
 80066f2:	bf00      	nop
 80066f4:	20000b3c 	.word	0x20000b3c
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e00c      	b.n	8006722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <prvInitialiseTaskLists+0x60>)
 8006714:	4413      	add	r3, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fb42 	bl	8004da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b06      	cmp	r3, #6
 8006726:	d9ef      	bls.n	8006708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006728:	480d      	ldr	r0, [pc, #52]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800672a:	f7fe fb39 	bl	8004da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800672e:	480d      	ldr	r0, [pc, #52]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006730:	f7fe fb36 	bl	8004da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006734:	480c      	ldr	r0, [pc, #48]	; (8006768 <prvInitialiseTaskLists+0x6c>)
 8006736:	f7fe fb33 	bl	8004da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800673a:	480c      	ldr	r0, [pc, #48]	; (800676c <prvInitialiseTaskLists+0x70>)
 800673c:	f7fe fb30 	bl	8004da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006740:	480b      	ldr	r0, [pc, #44]	; (8006770 <prvInitialiseTaskLists+0x74>)
 8006742:	f7fe fb2d 	bl	8004da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <prvInitialiseTaskLists+0x78>)
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <prvInitialiseTaskLists+0x7c>)
 800674e:	4a05      	ldr	r2, [pc, #20]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20000b3c 	.word	0x20000b3c
 8006760:	20000bc8 	.word	0x20000bc8
 8006764:	20000bdc 	.word	0x20000bdc
 8006768:	20000bf8 	.word	0x20000bf8
 800676c:	20000c0c 	.word	0x20000c0c
 8006770:	20000c24 	.word	0x20000c24
 8006774:	20000bf0 	.word	0x20000bf0
 8006778:	20000bf4 	.word	0x20000bf4

0800677c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006782:	e019      	b.n	80067b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006784:	f000 ff56 	bl	8007634 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <prvCheckTasksWaitingTermination+0x50>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fb8d 	bl	8004eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 80067a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ae:	f000 ff71 	bl	8007694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f810 	bl	80067d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e1      	bne.n	8006784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000c0c 	.word	0x20000c0c
 80067d0:	20000c38 	.word	0x20000c38
 80067d4:	20000c20 	.word	0x20000c20

080067d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	334c      	adds	r3, #76	; 0x4c
 80067e4:	4618      	mov	r0, r3
 80067e6:	f002 f88f 	bl	8008908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 f909 	bl	8007a10 <vPortFree>
				vPortFree( pxTCB );
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f906 	bl	8007a10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006804:	e018      	b.n	8006838 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800680c:	2b01      	cmp	r3, #1
 800680e:	d103      	bne.n	8006818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f8fd 	bl	8007a10 <vPortFree>
	}
 8006816:	e00f      	b.n	8006838 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800681e:	2b02      	cmp	r3, #2
 8006820:	d00a      	beq.n	8006838 <prvDeleteTCB+0x60>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60fb      	str	r3, [r7, #12]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <prvDeleteTCB+0x5e>
	}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006846:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <prvResetNextTaskUnblockTime+0x38>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006850:	4b0a      	ldr	r3, [pc, #40]	; (800687c <prvResetNextTaskUnblockTime+0x3c>)
 8006852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006858:	e008      	b.n	800686c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685a:	4b07      	ldr	r3, [pc, #28]	; (8006878 <prvResetNextTaskUnblockTime+0x38>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	4a04      	ldr	r2, [pc, #16]	; (800687c <prvResetNextTaskUnblockTime+0x3c>)
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	20000bf0 	.word	0x20000bf0
 800687c:	20000c58 	.word	0x20000c58

08006880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <xTaskGetSchedulerState+0x34>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d102      	bne.n	8006894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800688e:	2301      	movs	r3, #1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e008      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006894:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <xTaskGetSchedulerState+0x38>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800689c:	2302      	movs	r3, #2
 800689e:	607b      	str	r3, [r7, #4]
 80068a0:	e001      	b.n	80068a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068a2:	2300      	movs	r3, #0
 80068a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068a6:	687b      	ldr	r3, [r7, #4]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20000c44 	.word	0x20000c44
 80068b8:	20000c60 	.word	0x20000c60

080068bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d05e      	beq.n	8006990 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	4b31      	ldr	r3, [pc, #196]	; (800699c <xTaskPriorityInherit+0xe0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	429a      	cmp	r2, r3
 80068de:	d24e      	bcs.n	800697e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	db06      	blt.n	80068f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <xTaskPriorityInherit+0xe0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	f1c3 0207 	rsb	r2, r3, #7
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6959      	ldr	r1, [r3, #20]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <xTaskPriorityInherit+0xe4>)
 8006908:	4413      	add	r3, r2
 800690a:	4299      	cmp	r1, r3
 800690c:	d12f      	bne.n	800696e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe face 	bl	8004eb4 <uxListRemove>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10a      	bne.n	8006934 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	2201      	movs	r2, #1
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43da      	mvns	r2, r3
 800692a:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <xTaskPriorityInherit+0xe8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4013      	ands	r3, r2
 8006930:	4a1c      	ldr	r2, [pc, #112]	; (80069a4 <xTaskPriorityInherit+0xe8>)
 8006932:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006934:	4b19      	ldr	r3, [pc, #100]	; (800699c <xTaskPriorityInherit+0xe0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	2201      	movs	r2, #1
 8006944:	409a      	lsls	r2, r3
 8006946:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <xTaskPriorityInherit+0xe8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4313      	orrs	r3, r2
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <xTaskPriorityInherit+0xe8>)
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4a10      	ldr	r2, [pc, #64]	; (80069a0 <xTaskPriorityInherit+0xe4>)
 800695e:	441a      	add	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	3304      	adds	r3, #4
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7fe fa47 	bl	8004dfa <vListInsertEnd>
 800696c:	e004      	b.n	8006978 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800696e:	4b0b      	ldr	r3, [pc, #44]	; (800699c <xTaskPriorityInherit+0xe0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006978:	2301      	movs	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e008      	b.n	8006990 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <xTaskPriorityInherit+0xe0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	429a      	cmp	r2, r3
 800698a:	d201      	bcs.n	8006990 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006990:	68fb      	ldr	r3, [r7, #12]
	}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	20000b38 	.word	0x20000b38
 80069a0:	20000b3c 	.word	0x20000b3c
 80069a4:	20000c40 	.word	0x20000c40

080069a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d06e      	beq.n	8006a9c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069be:	4b3a      	ldr	r3, [pc, #232]	; (8006aa8 <xTaskPriorityDisinherit+0x100>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d00a      	beq.n	80069de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
}
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d044      	beq.n	8006a9c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d140      	bne.n	8006a9c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fa48 	bl	8004eb4 <uxListRemove>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d115      	bne.n	8006a56 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a2e:	491f      	ldr	r1, [pc, #124]	; (8006aac <xTaskPriorityDisinherit+0x104>)
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xTaskPriorityDisinherit+0xae>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	2201      	movs	r2, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	43da      	mvns	r2, r3
 8006a4c:	4b18      	ldr	r3, [pc, #96]	; (8006ab0 <xTaskPriorityDisinherit+0x108>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4013      	ands	r3, r2
 8006a52:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <xTaskPriorityDisinherit+0x108>)
 8006a54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	f1c3 0207 	rsb	r2, r3, #7
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	2201      	movs	r2, #1
 8006a70:	409a      	lsls	r2, r3
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <xTaskPriorityDisinherit+0x108>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	4a0d      	ldr	r2, [pc, #52]	; (8006ab0 <xTaskPriorityDisinherit+0x108>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <xTaskPriorityDisinherit+0x104>)
 8006a8a:	441a      	add	r2, r3
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	4619      	mov	r1, r3
 8006a92:	4610      	mov	r0, r2
 8006a94:	f7fe f9b1 	bl	8004dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a9c:	697b      	ldr	r3, [r7, #20]
	}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000b38 	.word	0x20000b38
 8006aac:	20000b3c 	.word	0x20000b3c
 8006ab0:	20000c40 	.word	0x20000c40

08006ab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d077      	beq.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
}
 8006ae6:	bf00      	nop
 8006ae8:	e7fe      	b.n	8006ae8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d902      	bls.n	8006afa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	e002      	b.n	8006b00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	69fa      	ldr	r2, [r7, #28]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d058      	beq.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d153      	bne.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d10a      	bne.n	8006b34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	60bb      	str	r3, [r7, #8]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db04      	blt.n	8006b52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f1c3 0207 	rsb	r2, r3, #7
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	6959      	ldr	r1, [r3, #20]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b62:	4413      	add	r3, r2
 8006b64:	4299      	cmp	r1, r3
 8006b66:	d129      	bne.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe f9a1 	bl	8004eb4 <uxListRemove>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43da      	mvns	r2, r3
 8006b84:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	4a10      	ldr	r2, [pc, #64]	; (8006bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	2201      	movs	r2, #1
 8006b94:	409a      	lsls	r2, r3
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4a06      	ldr	r2, [pc, #24]	; (8006bc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006bae:	441a      	add	r2, r3
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	f7fe f91f 	bl	8004dfa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000b38 	.word	0x20000b38
 8006bc8:	20000b3c 	.word	0x20000b3c
 8006bcc:	20000c40 	.word	0x20000c40

08006bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006bd4:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006be2:	3201      	adds	r2, #1
 8006be4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006be6:	4b03      	ldr	r3, [pc, #12]	; (8006bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006be8:	681b      	ldr	r3, [r3, #0]
	}
 8006bea:	4618      	mov	r0, r3
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr
 8006bf4:	20000b38 	.word	0x20000b38

08006bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe f950 	bl	8004eb4 <uxListRemove>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	2201      	movs	r2, #1
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	43da      	mvns	r2, r3
 8006c28:	4b21      	ldr	r3, [pc, #132]	; (8006cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	4a20      	ldr	r2, [pc, #128]	; (8006cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c38:	d10a      	bne.n	8006c50 <prvAddCurrentTaskToDelayedList+0x58>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d007      	beq.n	8006c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4619      	mov	r1, r3
 8006c48:	481a      	ldr	r0, [pc, #104]	; (8006cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c4a:	f7fe f8d6 	bl	8004dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c4e:	e026      	b.n	8006c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c58:	4b14      	ldr	r3, [pc, #80]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d209      	bcs.n	8006c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c68:	4b13      	ldr	r3, [pc, #76]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fe f8e4 	bl	8004e42 <vListInsert>
}
 8006c7a:	e010      	b.n	8006c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe f8da 	bl	8004e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d202      	bcs.n	8006c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6013      	str	r3, [r2, #0]
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000c3c 	.word	0x20000c3c
 8006cac:	20000b38 	.word	0x20000b38
 8006cb0:	20000c40 	.word	0x20000c40
 8006cb4:	20000c24 	.word	0x20000c24
 8006cb8:	20000bf4 	.word	0x20000bf4
 8006cbc:	20000bf0 	.word	0x20000bf0
 8006cc0:	20000c58 	.word	0x20000c58

08006cc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08a      	sub	sp, #40	; 0x28
 8006cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cce:	f000 fb47 	bl	8007360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cd2:	4b1c      	ldr	r3, [pc, #112]	; (8006d44 <xTimerCreateTimerTask+0x80>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d021      	beq.n	8006d1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006ce2:	1d3a      	adds	r2, r7, #4
 8006ce4:	f107 0108 	add.w	r1, r7, #8
 8006ce8:	f107 030c 	add.w	r3, r7, #12
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fa f917 	bl	8000f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	9202      	str	r2, [sp, #8]
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	2306      	movs	r3, #6
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2300      	movs	r3, #0
 8006d02:	460a      	mov	r2, r1
 8006d04:	4910      	ldr	r1, [pc, #64]	; (8006d48 <xTimerCreateTimerTask+0x84>)
 8006d06:	4811      	ldr	r0, [pc, #68]	; (8006d4c <xTimerCreateTimerTask+0x88>)
 8006d08:	f7fe ff76 	bl	8005bf8 <xTaskCreateStatic>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <xTimerCreateTimerTask+0x8c>)
 8006d10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d12:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <xTimerCreateTimerTask+0x8c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	613b      	str	r3, [r7, #16]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000c94 	.word	0x20000c94
 8006d48:	0800aca0 	.word	0x0800aca0
 8006d4c:	08006f41 	.word	0x08006f41
 8006d50:	20000c98 	.word	0x20000c98

08006d54 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006d62:	2028      	movs	r0, #40	; 0x28
 8006d64:	f000 fd88 	bl	8007878 <pvPortMalloc>
 8006d68:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00d      	beq.n	8006d8c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	9301      	str	r3, [sp, #4]
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 f805 	bl	8006d96 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006d8c:	697b      	ldr	r3, [r7, #20]
	}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10a      	bne.n	8006dc0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	617b      	str	r3, [r7, #20]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01e      	beq.n	8006e04 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006dc6:	f000 facb 	bl	8007360 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	6a3a      	ldr	r2, [r7, #32]
 8006de0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	3304      	adds	r3, #4
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fd fffa 	bl	8004de0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006df8:	f043 0304 	orr.w	r3, r3, #4
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	; 0x28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	623b      	str	r3, [r7, #32]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <xTimerGenericCommand+0x98>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d02a      	beq.n	8006e98 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b05      	cmp	r3, #5
 8006e52:	dc18      	bgt.n	8006e86 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e54:	f7ff fd14 	bl	8006880 <xTaskGetSchedulerState>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d109      	bne.n	8006e72 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <xTimerGenericCommand+0x98>)
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f107 0114 	add.w	r1, r7, #20
 8006e66:	2300      	movs	r3, #0
 8006e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6a:	f7fe f9b9 	bl	80051e0 <xQueueGenericSend>
 8006e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8006e70:	e012      	b.n	8006e98 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e72:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <xTimerGenericCommand+0x98>)
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	f107 0114 	add.w	r1, r7, #20
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f7fe f9af 	bl	80051e0 <xQueueGenericSend>
 8006e82:	6278      	str	r0, [r7, #36]	; 0x24
 8006e84:	e008      	b.n	8006e98 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <xTimerGenericCommand+0x98>)
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f107 0114 	add.w	r1, r7, #20
 8006e8e:	2300      	movs	r3, #0
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	f7fe faa3 	bl	80053dc <xQueueGenericSendFromISR>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3728      	adds	r7, #40	; 0x28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000c94 	.word	0x20000c94

08006ea8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <prvProcessExpiredTimer+0x94>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fd fff7 	bl	8004eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ecc:	f003 0304 	and.w	r3, r3, #4
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d022      	beq.n	8006f1a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	699a      	ldr	r2, [r3, #24]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	18d1      	adds	r1, r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	6978      	ldr	r0, [r7, #20]
 8006ee2:	f000 f8d1 	bl	8007088 <prvInsertTimerInActiveList>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01f      	beq.n	8006f2c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6978      	ldr	r0, [r7, #20]
 8006ef8:	f7ff ff88 	bl	8006e0c <xTimerGenericCommand>
 8006efc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d113      	bne.n	8006f2c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	6978      	ldr	r0, [r7, #20]
 8006f32:	4798      	blx	r3
}
 8006f34:	bf00      	nop
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20000c8c 	.word	0x20000c8c

08006f40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f48:	f107 0308 	add.w	r3, r7, #8
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f857 	bl	8007000 <prvGetNextExpireTime>
 8006f52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f803 	bl	8006f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f5e:	f000 f8d5 	bl	800710c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f62:	e7f1      	b.n	8006f48 <prvTimerTask+0x8>

08006f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f6e:	f7ff f891 	bl	8006094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f866 	bl	8007048 <prvSampleTimeNow>
 8006f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d130      	bne.n	8006fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d806      	bhi.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f92:	f7ff f88d 	bl	80060b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ff85 	bl	8006ea8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f9e:	e024      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <prvProcessTimerOrBlockTask+0x90>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <prvProcessTimerOrBlockTask+0x50>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <prvProcessTimerOrBlockTask+0x52>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <prvProcessTimerOrBlockTask+0x94>)
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7fe fde3 	bl	8005b90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fca:	f7ff f871 	bl	80060b0 <xTaskResumeAll>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <prvProcessTimerOrBlockTask+0x98>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
}
 8006fe4:	e001      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fe6:	f7ff f863 	bl	80060b0 <xTaskResumeAll>
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000c90 	.word	0x20000c90
 8006ff8:	20000c94 	.word	0x20000c94
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007008:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <prvGetNextExpireTime+0x44>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <prvGetNextExpireTime+0x16>
 8007012:	2201      	movs	r2, #1
 8007014:	e000      	b.n	8007018 <prvGetNextExpireTime+0x18>
 8007016:	2200      	movs	r2, #0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <prvGetNextExpireTime+0x44>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000c8c 	.word	0x20000c8c

08007048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007050:	f7ff f8ca 	bl	80061e8 <xTaskGetTickCount>
 8007054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <prvSampleTimeNow+0x3c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d205      	bcs.n	800706c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007060:	f000 f91a 	bl	8007298 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e002      	b.n	8007072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <prvSampleTimeNow+0x3c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000c9c 	.word	0x20000c9c

08007088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d812      	bhi.n	80070d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e01b      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <prvInsertTimerInActiveList+0x7c>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fd feb8 	bl	8004e42 <vListInsert>
 80070d2:	e012      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d206      	bcs.n	80070ea <prvInsertTimerInActiveList+0x62>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e007      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <prvInsertTimerInActiveList+0x80>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fd fea4 	bl	8004e42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20000c90 	.word	0x20000c90
 8007108:	20000c8c 	.word	0x20000c8c

0800710c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08c      	sub	sp, #48	; 0x30
 8007110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007112:	e0ae      	b.n	8007272 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f2c0 80aa 	blt.w	8007270 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d004      	beq.n	8007132 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	3304      	adds	r3, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f7fd fec1 	bl	8004eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ff87 	bl	8007048 <prvSampleTimeNow>
 800713a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b09      	cmp	r3, #9
 8007140:	f200 8097 	bhi.w	8007272 <prvProcessReceivedCommands+0x166>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <prvProcessReceivedCommands+0x40>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007175 	.word	0x08007175
 8007150:	08007175 	.word	0x08007175
 8007154:	08007175 	.word	0x08007175
 8007158:	080071e9 	.word	0x080071e9
 800715c:	080071fd 	.word	0x080071fd
 8007160:	08007247 	.word	0x08007247
 8007164:	08007175 	.word	0x08007175
 8007168:	08007175 	.word	0x08007175
 800716c:	080071e9 	.word	0x080071e9
 8007170:	080071fd 	.word	0x080071fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	18d1      	adds	r1, r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007194:	f7ff ff78 	bl	8007088 <prvInsertTimerInActiveList>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d069      	beq.n	8007272 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d05e      	beq.n	8007272 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	441a      	add	r2, r3
 80071bc:	2300      	movs	r3, #0
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	2300      	movs	r3, #0
 80071c2:	2100      	movs	r1, #0
 80071c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071c6:	f7ff fe21 	bl	8006e0c <xTimerGenericCommand>
 80071ca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d14f      	bne.n	8007272 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	61bb      	str	r3, [r7, #24]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80071fa:	e03a      	b.n	8007272 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	617b      	str	r3, [r7, #20]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	18d1      	adds	r1, r2, r3
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	6a3a      	ldr	r2, [r7, #32]
 800723e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007240:	f7ff ff22 	bl	8007088 <prvInsertTimerInActiveList>
					break;
 8007244:	e015      	b.n	8007272 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8007254:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007256:	f000 fbdb 	bl	8007a10 <vPortFree>
 800725a:	e00a      	b.n	8007272 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007262:	f023 0301 	bic.w	r3, r3, #1
 8007266:	b2da      	uxtb	r2, r3
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800726e:	e000      	b.n	8007272 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007270:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007272:	4b08      	ldr	r3, [pc, #32]	; (8007294 <prvProcessReceivedCommands+0x188>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f107 0108 	add.w	r1, r7, #8
 800727a:	2200      	movs	r2, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe f949 	bl	8005514 <xQueueReceive>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	f47f af45 	bne.w	8007114 <prvProcessReceivedCommands+0x8>
	}
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000c94 	.word	0x20000c94

08007298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800729e:	e048      	b.n	8007332 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072a0:	4b2d      	ldr	r3, [pc, #180]	; (8007358 <prvSwitchTimerLists+0xc0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072aa:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <prvSwitchTimerLists+0xc0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fd fdfb 	bl	8004eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072cc:	f003 0304 	and.w	r3, r3, #4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02e      	beq.n	8007332 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4413      	add	r3, r2
 80072dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d90e      	bls.n	8007304 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072f2:	4b19      	ldr	r3, [pc, #100]	; (8007358 <prvSwitchTimerLists+0xc0>)
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7fd fda0 	bl	8004e42 <vListInsert>
 8007302:	e016      	b.n	8007332 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007304:	2300      	movs	r3, #0
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2300      	movs	r3, #0
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	2100      	movs	r1, #0
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff fd7c 	bl	8006e0c <xTimerGenericCommand>
 8007314:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	603b      	str	r3, [r7, #0]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <prvSwitchTimerLists+0xc0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1b1      	bne.n	80072a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <prvSwitchTimerLists+0xc0>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <prvSwitchTimerLists+0xc4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a04      	ldr	r2, [pc, #16]	; (8007358 <prvSwitchTimerLists+0xc0>)
 8007348:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800734a:	4a04      	ldr	r2, [pc, #16]	; (800735c <prvSwitchTimerLists+0xc4>)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6013      	str	r3, [r2, #0]
}
 8007350:	bf00      	nop
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000c8c 	.word	0x20000c8c
 800735c:	20000c90 	.word	0x20000c90

08007360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007366:	f000 f965 	bl	8007634 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800736a:	4b15      	ldr	r3, [pc, #84]	; (80073c0 <prvCheckForValidListAndQueue+0x60>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d120      	bne.n	80073b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007372:	4814      	ldr	r0, [pc, #80]	; (80073c4 <prvCheckForValidListAndQueue+0x64>)
 8007374:	f7fd fd14 	bl	8004da0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007378:	4813      	ldr	r0, [pc, #76]	; (80073c8 <prvCheckForValidListAndQueue+0x68>)
 800737a:	f7fd fd11 	bl	8004da0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <prvCheckForValidListAndQueue+0x6c>)
 8007380:	4a10      	ldr	r2, [pc, #64]	; (80073c4 <prvCheckForValidListAndQueue+0x64>)
 8007382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007384:	4b12      	ldr	r3, [pc, #72]	; (80073d0 <prvCheckForValidListAndQueue+0x70>)
 8007386:	4a10      	ldr	r2, [pc, #64]	; (80073c8 <prvCheckForValidListAndQueue+0x68>)
 8007388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800738a:	2300      	movs	r3, #0
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <prvCheckForValidListAndQueue+0x74>)
 8007390:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <prvCheckForValidListAndQueue+0x78>)
 8007392:	210c      	movs	r1, #12
 8007394:	200a      	movs	r0, #10
 8007396:	f7fd fe1f 	bl	8004fd8 <xQueueGenericCreateStatic>
 800739a:	4603      	mov	r3, r0
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <prvCheckForValidListAndQueue+0x60>)
 800739e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <prvCheckForValidListAndQueue+0x60>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <prvCheckForValidListAndQueue+0x60>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	490b      	ldr	r1, [pc, #44]	; (80073dc <prvCheckForValidListAndQueue+0x7c>)
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe fbc4 	bl	8005b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073b4:	f000 f96e 	bl	8007694 <vPortExitCritical>
}
 80073b8:	bf00      	nop
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000c94 	.word	0x20000c94
 80073c4:	20000c64 	.word	0x20000c64
 80073c8:	20000c78 	.word	0x20000c78
 80073cc:	20000c8c 	.word	0x20000c8c
 80073d0:	20000c90 	.word	0x20000c90
 80073d4:	20000d18 	.word	0x20000d18
 80073d8:	20000ca0 	.word	0x20000ca0
 80073dc:	0800aca8 	.word	0x0800aca8

080073e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3b04      	subs	r3, #4
 80073f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b04      	subs	r3, #4
 80073fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f023 0201 	bic.w	r2, r3, #1
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b04      	subs	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007410:	4a0c      	ldr	r2, [pc, #48]	; (8007444 <pxPortInitialiseStack+0x64>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	3b14      	subs	r3, #20
 800741a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3b04      	subs	r3, #4
 8007426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f06f 0202 	mvn.w	r2, #2
 800742e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	3b20      	subs	r3, #32
 8007434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	08007449 	.word	0x08007449

08007448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007452:	4b12      	ldr	r3, [pc, #72]	; (800749c <prvTaskExitError+0x54>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800745a:	d00a      	beq.n	8007472 <prvTaskExitError+0x2a>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <prvTaskExitError+0x28>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
}
 8007484:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007486:	bf00      	nop
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0fc      	beq.n	8007488 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	2000000c 	.word	0x2000000c

080074a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	; (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	4770      	bx	lr
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst2>:
 80074c0:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074c8:	4808      	ldr	r0, [pc, #32]	; (80074ec <prvPortStartFirstTask+0x24>)
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f380 8808 	msr	MSP, r0
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8814 	msr	CONTROL, r0
 80074da:	b662      	cpsie	i
 80074dc:	b661      	cpsie	f
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	df00      	svc	0
 80074e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ea:	bf00      	nop
 80074ec:	e000ed08 	.word	0xe000ed08

080074f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074f6:	4b46      	ldr	r3, [pc, #280]	; (8007610 <xPortStartScheduler+0x120>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a46      	ldr	r2, [pc, #280]	; (8007614 <xPortStartScheduler+0x124>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10a      	bne.n	8007516 <xPortStartScheduler+0x26>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	613b      	str	r3, [r7, #16]
}
 8007512:	bf00      	nop
 8007514:	e7fe      	b.n	8007514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007516:	4b3e      	ldr	r3, [pc, #248]	; (8007610 <xPortStartScheduler+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3f      	ldr	r2, [pc, #252]	; (8007618 <xPortStartScheduler+0x128>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10a      	bne.n	8007536 <xPortStartScheduler+0x46>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	60fb      	str	r3, [r7, #12]
}
 8007532:	bf00      	nop
 8007534:	e7fe      	b.n	8007534 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007536:	4b39      	ldr	r3, [pc, #228]	; (800761c <xPortStartScheduler+0x12c>)
 8007538:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	22ff      	movs	r2, #255	; 0xff
 8007546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007550:	78fb      	ldrb	r3, [r7, #3]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007558:	b2da      	uxtb	r2, r3
 800755a:	4b31      	ldr	r3, [pc, #196]	; (8007620 <xPortStartScheduler+0x130>)
 800755c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <xPortStartScheduler+0x134>)
 8007560:	2207      	movs	r2, #7
 8007562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007564:	e009      	b.n	800757a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007566:	4b2f      	ldr	r3, [pc, #188]	; (8007624 <xPortStartScheduler+0x134>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <xPortStartScheduler+0x134>)
 800756e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	b2db      	uxtb	r3, r3
 8007578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d0ef      	beq.n	8007566 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007586:	4b27      	ldr	r3, [pc, #156]	; (8007624 <xPortStartScheduler+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1c3 0307 	rsb	r3, r3, #7
 800758e:	2b04      	cmp	r3, #4
 8007590:	d00a      	beq.n	80075a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075a8:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <xPortStartScheduler+0x134>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	021b      	lsls	r3, r3, #8
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <xPortStartScheduler+0x134>)
 80075b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <xPortStartScheduler+0x134>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075ba:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <xPortStartScheduler+0x134>)
 80075bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <xPortStartScheduler+0x138>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <xPortStartScheduler+0x138>)
 80075cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <xPortStartScheduler+0x138>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a14      	ldr	r2, [pc, #80]	; (8007628 <xPortStartScheduler+0x138>)
 80075d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075de:	f000 f8dd 	bl	800779c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075e2:	4b12      	ldr	r3, [pc, #72]	; (800762c <xPortStartScheduler+0x13c>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075e8:	f000 f8fc 	bl	80077e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075ec:	4b10      	ldr	r3, [pc, #64]	; (8007630 <xPortStartScheduler+0x140>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a0f      	ldr	r2, [pc, #60]	; (8007630 <xPortStartScheduler+0x140>)
 80075f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075f8:	f7ff ff66 	bl	80074c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075fc:	f7fe fece 	bl	800639c <vTaskSwitchContext>
	prvTaskExitError();
 8007600:	f7ff ff22 	bl	8007448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	e000ed00 	.word	0xe000ed00
 8007614:	410fc271 	.word	0x410fc271
 8007618:	410fc270 	.word	0x410fc270
 800761c:	e000e400 	.word	0xe000e400
 8007620:	20000d60 	.word	0x20000d60
 8007624:	20000d64 	.word	0x20000d64
 8007628:	e000ed20 	.word	0xe000ed20
 800762c:	2000000c 	.word	0x2000000c
 8007630:	e000ef34 	.word	0xe000ef34

08007634 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	607b      	str	r3, [r7, #4]
}
 800764c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <vPortEnterCritical+0x58>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3301      	adds	r3, #1
 8007654:	4a0d      	ldr	r2, [pc, #52]	; (800768c <vPortEnterCritical+0x58>)
 8007656:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <vPortEnterCritical+0x58>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d10f      	bne.n	8007680 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortEnterCritical+0x5c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <vPortEnterCritical+0x4c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	603b      	str	r3, [r7, #0]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vPortEnterCritical+0x4a>
	}
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	2000000c 	.word	0x2000000c
 8007690:	e000ed04 	.word	0xe000ed04

08007694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800769a:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <vPortExitCritical+0x50>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <vPortExitCritical+0x24>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	607b      	str	r3, [r7, #4]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076b8:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <vPortExitCritical+0x50>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3b01      	subs	r3, #1
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <vPortExitCritical+0x50>)
 80076c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076c2:	4b08      	ldr	r3, [pc, #32]	; (80076e4 <vPortExitCritical+0x50>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d105      	bne.n	80076d6 <vPortExitCritical+0x42>
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f383 8811 	msr	BASEPRI, r3
}
 80076d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000000c 	.word	0x2000000c
	...

080076f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f01e 0f10 	tst.w	lr, #16
 8007700:	bf08      	it	eq
 8007702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007710:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007714:	f380 8811 	msr	BASEPRI, r0
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f7fe fe3c 	bl	800639c <vTaskSwitchContext>
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f380 8811 	msr	BASEPRI, r0
 800772c:	bc09      	pop	{r0, r3}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	f01e 0f10 	tst.w	lr, #16
 800773a:	bf08      	it	eq
 800773c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007740:	f380 8809 	msr	PSP, r0
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst>:
 8007750:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
}
 8007770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007772:	f7fe fd5b 	bl	800622c <xTaskIncrementTick>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <SysTick_Handler+0x40>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f383 8811 	msr	BASEPRI, r3
}
 800778e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <vPortSetupTimerInterrupt+0x38>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <vPortSetupTimerInterrupt+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <vPortSetupTimerInterrupt+0x40>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <vPortSetupTimerInterrupt+0x44>)
 80077ba:	3b01      	subs	r3, #1
 80077bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077be:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	e000e010 	.word	0xe000e010
 80077d4:	e000e018 	.word	0xe000e018
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3
 80077e0:	e000e014 	.word	0xe000e014

080077e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077f4 <vPortEnableVFP+0x10>
 80077e8:	6801      	ldr	r1, [r0, #0]
 80077ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ee:	6001      	str	r1, [r0, #0]
 80077f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077f2:	bf00      	nop
 80077f4:	e000ed88 	.word	0xe000ed88

080077f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077fe:	f3ef 8305 	mrs	r3, IPSR
 8007802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d914      	bls.n	8007834 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <vPortValidateInterruptPriority+0x70>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <vPortValidateInterruptPriority+0x74>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	7afa      	ldrb	r2, [r7, #11]
 800781a:	429a      	cmp	r2, r3
 800781c:	d20a      	bcs.n	8007834 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007834:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <vPortValidateInterruptPriority+0x78>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <vPortValidateInterruptPriority+0x7c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d90a      	bls.n	800785a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	603b      	str	r3, [r7, #0]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <vPortValidateInterruptPriority+0x60>
	}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	e000e3f0 	.word	0xe000e3f0
 800786c:	20000d60 	.word	0x20000d60
 8007870:	e000ed0c 	.word	0xe000ed0c
 8007874:	20000d64 	.word	0x20000d64

08007878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08a      	sub	sp, #40	; 0x28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007884:	f7fe fc06 	bl	8006094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007888:	4b5b      	ldr	r3, [pc, #364]	; (80079f8 <pvPortMalloc+0x180>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007890:	f000 f920 	bl	8007ad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007894:	4b59      	ldr	r3, [pc, #356]	; (80079fc <pvPortMalloc+0x184>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4013      	ands	r3, r2
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8093 	bne.w	80079c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80078a8:	2208      	movs	r2, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <pvPortMalloc+0x6c>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	617b      	str	r3, [r7, #20]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d06e      	beq.n	80079c8 <pvPortMalloc+0x150>
 80078ea:	4b45      	ldr	r3, [pc, #276]	; (8007a00 <pvPortMalloc+0x188>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d869      	bhi.n	80079c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078f4:	4b43      	ldr	r3, [pc, #268]	; (8007a04 <pvPortMalloc+0x18c>)
 80078f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078f8:	4b42      	ldr	r3, [pc, #264]	; (8007a04 <pvPortMalloc+0x18c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078fe:	e004      	b.n	800790a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d903      	bls.n	800791c <pvPortMalloc+0xa4>
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f1      	bne.n	8007900 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <pvPortMalloc+0x180>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007922:	429a      	cmp	r2, r3
 8007924:	d050      	beq.n	80079c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2208      	movs	r2, #8
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	1ad2      	subs	r2, r2, r3
 8007940:	2308      	movs	r3, #8
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	429a      	cmp	r2, r3
 8007946:	d91f      	bls.n	8007988 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4413      	add	r3, r2
 800794e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <pvPortMalloc+0xf8>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	613b      	str	r3, [r7, #16]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007982:	69b8      	ldr	r0, [r7, #24]
 8007984:	f000 f908 	bl	8007b98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007988:	4b1d      	ldr	r3, [pc, #116]	; (8007a00 <pvPortMalloc+0x188>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	4a1b      	ldr	r2, [pc, #108]	; (8007a00 <pvPortMalloc+0x188>)
 8007994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007996:	4b1a      	ldr	r3, [pc, #104]	; (8007a00 <pvPortMalloc+0x188>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <pvPortMalloc+0x190>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d203      	bcs.n	80079aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079a2:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <pvPortMalloc+0x188>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a18      	ldr	r2, [pc, #96]	; (8007a08 <pvPortMalloc+0x190>)
 80079a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	4b13      	ldr	r3, [pc, #76]	; (80079fc <pvPortMalloc+0x184>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079be:	4b13      	ldr	r3, [pc, #76]	; (8007a0c <pvPortMalloc+0x194>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a11      	ldr	r2, [pc, #68]	; (8007a0c <pvPortMalloc+0x194>)
 80079c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079c8:	f7fe fb72 	bl	80060b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f003 0307 	and.w	r3, r3, #7
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <pvPortMalloc+0x174>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	f383 8811 	msr	BASEPRI, r3
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f3bf 8f4f 	dsb	sy
 80079e6:	60fb      	str	r3, [r7, #12]
}
 80079e8:	bf00      	nop
 80079ea:	e7fe      	b.n	80079ea <pvPortMalloc+0x172>
	return pvReturn;
 80079ec:	69fb      	ldr	r3, [r7, #28]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20004970 	.word	0x20004970
 80079fc:	20004984 	.word	0x20004984
 8007a00:	20004974 	.word	0x20004974
 8007a04:	20004968 	.word	0x20004968
 8007a08:	20004978 	.word	0x20004978
 8007a0c:	2000497c 	.word	0x2000497c

08007a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d04d      	beq.n	8007abe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a22:	2308      	movs	r3, #8
 8007a24:	425b      	negs	r3, r3
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4b24      	ldr	r3, [pc, #144]	; (8007ac8 <vPortFree+0xb8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <vPortFree+0x44>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	60fb      	str	r3, [r7, #12]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <vPortFree+0x62>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <vPortFree+0xb8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11a      	bne.n	8007abe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <vPortFree+0xb8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a98:	f7fe fafc 	bl	8006094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <vPortFree+0xbc>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	4a09      	ldr	r2, [pc, #36]	; (8007acc <vPortFree+0xbc>)
 8007aa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aaa:	6938      	ldr	r0, [r7, #16]
 8007aac:	f000 f874 	bl	8007b98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ab0:	4b07      	ldr	r3, [pc, #28]	; (8007ad0 <vPortFree+0xc0>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	4a06      	ldr	r2, [pc, #24]	; (8007ad0 <vPortFree+0xc0>)
 8007ab8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aba:	f7fe faf9 	bl	80060b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20004984 	.word	0x20004984
 8007acc:	20004974 	.word	0x20004974
 8007ad0:	20004980 	.word	0x20004980

08007ad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ae0:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <prvHeapInit+0xac>)
 8007ae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f023 0307 	bic.w	r3, r3, #7
 8007afa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <prvHeapInit+0xac>)
 8007b04:	4413      	add	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b0c:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <prvHeapInit+0xb0>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b12:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <prvHeapInit+0xb0>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b20:	2208      	movs	r2, #8
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 0307 	bic.w	r3, r3, #7
 8007b2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <prvHeapInit+0xb4>)
 8007b34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <prvHeapInit+0xb4>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <prvHeapInit+0xb4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b54:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <prvHeapInit+0xb4>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <prvHeapInit+0xb8>)
 8007b62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <prvHeapInit+0xbc>)
 8007b6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b6c:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <prvHeapInit+0xc0>)
 8007b6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	20000d68 	.word	0x20000d68
 8007b84:	20004968 	.word	0x20004968
 8007b88:	20004970 	.word	0x20004970
 8007b8c:	20004978 	.word	0x20004978
 8007b90:	20004974 	.word	0x20004974
 8007b94:	20004984 	.word	0x20004984

08007b98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <prvInsertBlockIntoFreeList+0xac>)
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e002      	b.n	8007bac <prvInsertBlockIntoFreeList+0x14>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d8f7      	bhi.n	8007ba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d108      	bne.n	8007bda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	441a      	add	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d118      	bne.n	8007c20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d00d      	beq.n	8007c16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	e008      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c16:	4b0c      	ldr	r3, [pc, #48]	; (8007c48 <prvInsertBlockIntoFreeList+0xb0>)
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e003      	b.n	8007c28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d002      	beq.n	8007c36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c36:	bf00      	nop
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20004968 	.word	0x20004968
 8007c48:	20004970 	.word	0x20004970

08007c4c <__errno>:
 8007c4c:	4b01      	ldr	r3, [pc, #4]	; (8007c54 <__errno+0x8>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20000010 	.word	0x20000010

08007c58 <std>:
 8007c58:	2300      	movs	r3, #0
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c66:	6083      	str	r3, [r0, #8]
 8007c68:	8181      	strh	r1, [r0, #12]
 8007c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c6c:	81c2      	strh	r2, [r0, #14]
 8007c6e:	6183      	str	r3, [r0, #24]
 8007c70:	4619      	mov	r1, r3
 8007c72:	2208      	movs	r2, #8
 8007c74:	305c      	adds	r0, #92	; 0x5c
 8007c76:	f000 f91a 	bl	8007eae <memset>
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x38>)
 8007c7c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x3c>)
 8007c80:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x40>)
 8007c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <std+0x44>)
 8007c88:	6224      	str	r4, [r4, #32]
 8007c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08008a21 	.word	0x08008a21
 8007c94:	08008a43 	.word	0x08008a43
 8007c98:	08008a7b 	.word	0x08008a7b
 8007c9c:	08008a9f 	.word	0x08008a9f

08007ca0 <_cleanup_r>:
 8007ca0:	4901      	ldr	r1, [pc, #4]	; (8007ca8 <_cleanup_r+0x8>)
 8007ca2:	f000 b8af 	b.w	8007e04 <_fwalk_reent>
 8007ca6:	bf00      	nop
 8007ca8:	080098f1 	.word	0x080098f1

08007cac <__sfmoreglue>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	2268      	movs	r2, #104	; 0x68
 8007cb0:	1e4d      	subs	r5, r1, #1
 8007cb2:	4355      	muls	r5, r2
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cba:	f000 f921 	bl	8007f00 <_malloc_r>
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	b140      	cbz	r0, 8007cd4 <__sfmoreglue+0x28>
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc8:	300c      	adds	r0, #12
 8007cca:	60a0      	str	r0, [r4, #8]
 8007ccc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cd0:	f000 f8ed 	bl	8007eae <memset>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	bd70      	pop	{r4, r5, r6, pc}

08007cd8 <__sfp_lock_acquire>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_acquire+0x8>)
 8007cda:	f000 b8d8 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20004989 	.word	0x20004989

08007ce4 <__sfp_lock_release>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__sfp_lock_release+0x8>)
 8007ce6:	f000 b8d3 	b.w	8007e90 <__retarget_lock_release_recursive>
 8007cea:	bf00      	nop
 8007cec:	20004989 	.word	0x20004989

08007cf0 <__sinit_lock_acquire>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__sinit_lock_acquire+0x8>)
 8007cf2:	f000 b8cc 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	2000498a 	.word	0x2000498a

08007cfc <__sinit_lock_release>:
 8007cfc:	4801      	ldr	r0, [pc, #4]	; (8007d04 <__sinit_lock_release+0x8>)
 8007cfe:	f000 b8c7 	b.w	8007e90 <__retarget_lock_release_recursive>
 8007d02:	bf00      	nop
 8007d04:	2000498a 	.word	0x2000498a

08007d08 <__sinit>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	f7ff fff0 	bl	8007cf0 <__sinit_lock_acquire>
 8007d10:	69a3      	ldr	r3, [r4, #24]
 8007d12:	b11b      	cbz	r3, 8007d1c <__sinit+0x14>
 8007d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d18:	f7ff bff0 	b.w	8007cfc <__sinit_lock_release>
 8007d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d20:	6523      	str	r3, [r4, #80]	; 0x50
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <__sinit+0x68>)
 8007d24:	4a13      	ldr	r2, [pc, #76]	; (8007d74 <__sinit+0x6c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	bf04      	itt	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	61a3      	streq	r3, [r4, #24]
 8007d32:	4620      	mov	r0, r4
 8007d34:	f000 f820 	bl	8007d78 <__sfp>
 8007d38:	6060      	str	r0, [r4, #4]
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 f81c 	bl	8007d78 <__sfp>
 8007d40:	60a0      	str	r0, [r4, #8]
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 f818 	bl	8007d78 <__sfp>
 8007d48:	2200      	movs	r2, #0
 8007d4a:	60e0      	str	r0, [r4, #12]
 8007d4c:	2104      	movs	r1, #4
 8007d4e:	6860      	ldr	r0, [r4, #4]
 8007d50:	f7ff ff82 	bl	8007c58 <std>
 8007d54:	68a0      	ldr	r0, [r4, #8]
 8007d56:	2201      	movs	r2, #1
 8007d58:	2109      	movs	r1, #9
 8007d5a:	f7ff ff7d 	bl	8007c58 <std>
 8007d5e:	68e0      	ldr	r0, [r4, #12]
 8007d60:	2202      	movs	r2, #2
 8007d62:	2112      	movs	r1, #18
 8007d64:	f7ff ff78 	bl	8007c58 <std>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61a3      	str	r3, [r4, #24]
 8007d6c:	e7d2      	b.n	8007d14 <__sinit+0xc>
 8007d6e:	bf00      	nop
 8007d70:	0800ad28 	.word	0x0800ad28
 8007d74:	08007ca1 	.word	0x08007ca1

08007d78 <__sfp>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	4607      	mov	r7, r0
 8007d7c:	f7ff ffac 	bl	8007cd8 <__sfp_lock_acquire>
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <__sfp+0x84>)
 8007d82:	681e      	ldr	r6, [r3, #0]
 8007d84:	69b3      	ldr	r3, [r6, #24]
 8007d86:	b913      	cbnz	r3, 8007d8e <__sfp+0x16>
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffbd 	bl	8007d08 <__sinit>
 8007d8e:	3648      	adds	r6, #72	; 0x48
 8007d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	d503      	bpl.n	8007da0 <__sfp+0x28>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	b30b      	cbz	r3, 8007de0 <__sfp+0x68>
 8007d9c:	6836      	ldr	r6, [r6, #0]
 8007d9e:	e7f7      	b.n	8007d90 <__sfp+0x18>
 8007da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da4:	b9d5      	cbnz	r5, 8007ddc <__sfp+0x64>
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <__sfp+0x88>)
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dae:	6665      	str	r5, [r4, #100]	; 0x64
 8007db0:	f000 f86c 	bl	8007e8c <__retarget_lock_init_recursive>
 8007db4:	f7ff ff96 	bl	8007ce4 <__sfp_lock_release>
 8007db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	61a5      	str	r5, [r4, #24]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dcc:	f000 f86f 	bl	8007eae <memset>
 8007dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd8:	4620      	mov	r0, r4
 8007dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ddc:	3468      	adds	r4, #104	; 0x68
 8007dde:	e7d9      	b.n	8007d94 <__sfp+0x1c>
 8007de0:	2104      	movs	r1, #4
 8007de2:	4638      	mov	r0, r7
 8007de4:	f7ff ff62 	bl	8007cac <__sfmoreglue>
 8007de8:	4604      	mov	r4, r0
 8007dea:	6030      	str	r0, [r6, #0]
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d1d5      	bne.n	8007d9c <__sfp+0x24>
 8007df0:	f7ff ff78 	bl	8007ce4 <__sfp_lock_release>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	e7ee      	b.n	8007dd8 <__sfp+0x60>
 8007dfa:	bf00      	nop
 8007dfc:	0800ad28 	.word	0x0800ad28
 8007e00:	ffff0001 	.word	0xffff0001

08007e04 <_fwalk_reent>:
 8007e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e08:	4606      	mov	r6, r0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e10:	2700      	movs	r7, #0
 8007e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e16:	f1b9 0901 	subs.w	r9, r9, #1
 8007e1a:	d505      	bpl.n	8007e28 <_fwalk_reent+0x24>
 8007e1c:	6824      	ldr	r4, [r4, #0]
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	d1f7      	bne.n	8007e12 <_fwalk_reent+0xe>
 8007e22:	4638      	mov	r0, r7
 8007e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e28:	89ab      	ldrh	r3, [r5, #12]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d907      	bls.n	8007e3e <_fwalk_reent+0x3a>
 8007e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e32:	3301      	adds	r3, #1
 8007e34:	d003      	beq.n	8007e3e <_fwalk_reent+0x3a>
 8007e36:	4629      	mov	r1, r5
 8007e38:	4630      	mov	r0, r6
 8007e3a:	47c0      	blx	r8
 8007e3c:	4307      	orrs	r7, r0
 8007e3e:	3568      	adds	r5, #104	; 0x68
 8007e40:	e7e9      	b.n	8007e16 <_fwalk_reent+0x12>
	...

08007e44 <__libc_init_array>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	4d0d      	ldr	r5, [pc, #52]	; (8007e7c <__libc_init_array+0x38>)
 8007e48:	4c0d      	ldr	r4, [pc, #52]	; (8007e80 <__libc_init_array+0x3c>)
 8007e4a:	1b64      	subs	r4, r4, r5
 8007e4c:	10a4      	asrs	r4, r4, #2
 8007e4e:	2600      	movs	r6, #0
 8007e50:	42a6      	cmp	r6, r4
 8007e52:	d109      	bne.n	8007e68 <__libc_init_array+0x24>
 8007e54:	4d0b      	ldr	r5, [pc, #44]	; (8007e84 <__libc_init_array+0x40>)
 8007e56:	4c0c      	ldr	r4, [pc, #48]	; (8007e88 <__libc_init_array+0x44>)
 8007e58:	f002 fe92 	bl	800ab80 <_init>
 8007e5c:	1b64      	subs	r4, r4, r5
 8007e5e:	10a4      	asrs	r4, r4, #2
 8007e60:	2600      	movs	r6, #0
 8007e62:	42a6      	cmp	r6, r4
 8007e64:	d105      	bne.n	8007e72 <__libc_init_array+0x2e>
 8007e66:	bd70      	pop	{r4, r5, r6, pc}
 8007e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6c:	4798      	blx	r3
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7ee      	b.n	8007e50 <__libc_init_array+0xc>
 8007e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e76:	4798      	blx	r3
 8007e78:	3601      	adds	r6, #1
 8007e7a:	e7f2      	b.n	8007e62 <__libc_init_array+0x1e>
 8007e7c:	0800b0ac 	.word	0x0800b0ac
 8007e80:	0800b0ac 	.word	0x0800b0ac
 8007e84:	0800b0ac 	.word	0x0800b0ac
 8007e88:	0800b0b0 	.word	0x0800b0b0

08007e8c <__retarget_lock_init_recursive>:
 8007e8c:	4770      	bx	lr

08007e8e <__retarget_lock_acquire_recursive>:
 8007e8e:	4770      	bx	lr

08007e90 <__retarget_lock_release_recursive>:
 8007e90:	4770      	bx	lr

08007e92 <memcpy>:
 8007e92:	440a      	add	r2, r1
 8007e94:	4291      	cmp	r1, r2
 8007e96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e9a:	d100      	bne.n	8007e9e <memcpy+0xc>
 8007e9c:	4770      	bx	lr
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ea8:	4291      	cmp	r1, r2
 8007eaa:	d1f9      	bne.n	8007ea0 <memcpy+0xe>
 8007eac:	bd10      	pop	{r4, pc}

08007eae <memset>:
 8007eae:	4402      	add	r2, r0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>
	...

08007ec0 <sbrk_aligned>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	4e0e      	ldr	r6, [pc, #56]	; (8007efc <sbrk_aligned+0x3c>)
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6831      	ldr	r1, [r6, #0]
 8007ec8:	4605      	mov	r5, r0
 8007eca:	b911      	cbnz	r1, 8007ed2 <sbrk_aligned+0x12>
 8007ecc:	f000 fd78 	bl	80089c0 <_sbrk_r>
 8007ed0:	6030      	str	r0, [r6, #0]
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 fd73 	bl	80089c0 <_sbrk_r>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d00a      	beq.n	8007ef4 <sbrk_aligned+0x34>
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d007      	beq.n	8007ef8 <sbrk_aligned+0x38>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fd68 	bl	80089c0 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d101      	bne.n	8007ef8 <sbrk_aligned+0x38>
 8007ef4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ef8:	4620      	mov	r0, r4
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	20004990 	.word	0x20004990

08007f00 <_malloc_r>:
 8007f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f04:	1ccd      	adds	r5, r1, #3
 8007f06:	f025 0503 	bic.w	r5, r5, #3
 8007f0a:	3508      	adds	r5, #8
 8007f0c:	2d0c      	cmp	r5, #12
 8007f0e:	bf38      	it	cc
 8007f10:	250c      	movcc	r5, #12
 8007f12:	2d00      	cmp	r5, #0
 8007f14:	4607      	mov	r7, r0
 8007f16:	db01      	blt.n	8007f1c <_malloc_r+0x1c>
 8007f18:	42a9      	cmp	r1, r5
 8007f1a:	d905      	bls.n	8007f28 <_malloc_r+0x28>
 8007f1c:	230c      	movs	r3, #12
 8007f1e:	603b      	str	r3, [r7, #0]
 8007f20:	2600      	movs	r6, #0
 8007f22:	4630      	mov	r0, r6
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	4e2e      	ldr	r6, [pc, #184]	; (8007fe4 <_malloc_r+0xe4>)
 8007f2a:	f001 fd3b 	bl	80099a4 <__malloc_lock>
 8007f2e:	6833      	ldr	r3, [r6, #0]
 8007f30:	461c      	mov	r4, r3
 8007f32:	bb34      	cbnz	r4, 8007f82 <_malloc_r+0x82>
 8007f34:	4629      	mov	r1, r5
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ffc2 	bl	8007ec0 <sbrk_aligned>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	4604      	mov	r4, r0
 8007f40:	d14d      	bne.n	8007fde <_malloc_r+0xde>
 8007f42:	6834      	ldr	r4, [r6, #0]
 8007f44:	4626      	mov	r6, r4
 8007f46:	2e00      	cmp	r6, #0
 8007f48:	d140      	bne.n	8007fcc <_malloc_r+0xcc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4638      	mov	r0, r7
 8007f50:	eb04 0803 	add.w	r8, r4, r3
 8007f54:	f000 fd34 	bl	80089c0 <_sbrk_r>
 8007f58:	4580      	cmp	r8, r0
 8007f5a:	d13a      	bne.n	8007fd2 <_malloc_r+0xd2>
 8007f5c:	6821      	ldr	r1, [r4, #0]
 8007f5e:	3503      	adds	r5, #3
 8007f60:	1a6d      	subs	r5, r5, r1
 8007f62:	f025 0503 	bic.w	r5, r5, #3
 8007f66:	3508      	adds	r5, #8
 8007f68:	2d0c      	cmp	r5, #12
 8007f6a:	bf38      	it	cc
 8007f6c:	250c      	movcc	r5, #12
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ffa5 	bl	8007ec0 <sbrk_aligned>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d02b      	beq.n	8007fd2 <_malloc_r+0xd2>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	442b      	add	r3, r5
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	e00e      	b.n	8007fa0 <_malloc_r+0xa0>
 8007f82:	6822      	ldr	r2, [r4, #0]
 8007f84:	1b52      	subs	r2, r2, r5
 8007f86:	d41e      	bmi.n	8007fc6 <_malloc_r+0xc6>
 8007f88:	2a0b      	cmp	r2, #11
 8007f8a:	d916      	bls.n	8007fba <_malloc_r+0xba>
 8007f8c:	1961      	adds	r1, r4, r5
 8007f8e:	42a3      	cmp	r3, r4
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	bf18      	it	ne
 8007f94:	6059      	strne	r1, [r3, #4]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	bf08      	it	eq
 8007f9a:	6031      	streq	r1, [r6, #0]
 8007f9c:	5162      	str	r2, [r4, r5]
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f104 060b 	add.w	r6, r4, #11
 8007fa6:	f001 fd03 	bl	80099b0 <__malloc_unlock>
 8007faa:	f026 0607 	bic.w	r6, r6, #7
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	1af2      	subs	r2, r6, r3
 8007fb2:	d0b6      	beq.n	8007f22 <_malloc_r+0x22>
 8007fb4:	1b9b      	subs	r3, r3, r6
 8007fb6:	50a3      	str	r3, [r4, r2]
 8007fb8:	e7b3      	b.n	8007f22 <_malloc_r+0x22>
 8007fba:	6862      	ldr	r2, [r4, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	bf0c      	ite	eq
 8007fc0:	6032      	streq	r2, [r6, #0]
 8007fc2:	605a      	strne	r2, [r3, #4]
 8007fc4:	e7ec      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fc6:	4623      	mov	r3, r4
 8007fc8:	6864      	ldr	r4, [r4, #4]
 8007fca:	e7b2      	b.n	8007f32 <_malloc_r+0x32>
 8007fcc:	4634      	mov	r4, r6
 8007fce:	6876      	ldr	r6, [r6, #4]
 8007fd0:	e7b9      	b.n	8007f46 <_malloc_r+0x46>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	603b      	str	r3, [r7, #0]
 8007fd6:	4638      	mov	r0, r7
 8007fd8:	f001 fcea 	bl	80099b0 <__malloc_unlock>
 8007fdc:	e7a1      	b.n	8007f22 <_malloc_r+0x22>
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	e7de      	b.n	8007fa0 <_malloc_r+0xa0>
 8007fe2:	bf00      	nop
 8007fe4:	2000498c 	.word	0x2000498c

08007fe8 <__cvt>:
 8007fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fec:	ec55 4b10 	vmov	r4, r5, d0
 8007ff0:	2d00      	cmp	r5, #0
 8007ff2:	460e      	mov	r6, r1
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	bfbb      	ittet	lt
 8007ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ffe:	461d      	movlt	r5, r3
 8008000:	2300      	movge	r3, #0
 8008002:	232d      	movlt	r3, #45	; 0x2d
 8008004:	700b      	strb	r3, [r1, #0]
 8008006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800800c:	4691      	mov	r9, r2
 800800e:	f023 0820 	bic.w	r8, r3, #32
 8008012:	bfbc      	itt	lt
 8008014:	4622      	movlt	r2, r4
 8008016:	4614      	movlt	r4, r2
 8008018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800801c:	d005      	beq.n	800802a <__cvt+0x42>
 800801e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008022:	d100      	bne.n	8008026 <__cvt+0x3e>
 8008024:	3601      	adds	r6, #1
 8008026:	2102      	movs	r1, #2
 8008028:	e000      	b.n	800802c <__cvt+0x44>
 800802a:	2103      	movs	r1, #3
 800802c:	ab03      	add	r3, sp, #12
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	ab02      	add	r3, sp, #8
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	ec45 4b10 	vmov	d0, r4, r5
 8008038:	4653      	mov	r3, sl
 800803a:	4632      	mov	r2, r6
 800803c:	f000 fde4 	bl	8008c08 <_dtoa_r>
 8008040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008044:	4607      	mov	r7, r0
 8008046:	d102      	bne.n	800804e <__cvt+0x66>
 8008048:	f019 0f01 	tst.w	r9, #1
 800804c:	d022      	beq.n	8008094 <__cvt+0xac>
 800804e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008052:	eb07 0906 	add.w	r9, r7, r6
 8008056:	d110      	bne.n	800807a <__cvt+0x92>
 8008058:	783b      	ldrb	r3, [r7, #0]
 800805a:	2b30      	cmp	r3, #48	; 0x30
 800805c:	d10a      	bne.n	8008074 <__cvt+0x8c>
 800805e:	2200      	movs	r2, #0
 8008060:	2300      	movs	r3, #0
 8008062:	4620      	mov	r0, r4
 8008064:	4629      	mov	r1, r5
 8008066:	f7f8 fd4f 	bl	8000b08 <__aeabi_dcmpeq>
 800806a:	b918      	cbnz	r0, 8008074 <__cvt+0x8c>
 800806c:	f1c6 0601 	rsb	r6, r6, #1
 8008070:	f8ca 6000 	str.w	r6, [sl]
 8008074:	f8da 3000 	ldr.w	r3, [sl]
 8008078:	4499      	add	r9, r3
 800807a:	2200      	movs	r2, #0
 800807c:	2300      	movs	r3, #0
 800807e:	4620      	mov	r0, r4
 8008080:	4629      	mov	r1, r5
 8008082:	f7f8 fd41 	bl	8000b08 <__aeabi_dcmpeq>
 8008086:	b108      	cbz	r0, 800808c <__cvt+0xa4>
 8008088:	f8cd 900c 	str.w	r9, [sp, #12]
 800808c:	2230      	movs	r2, #48	; 0x30
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	454b      	cmp	r3, r9
 8008092:	d307      	bcc.n	80080a4 <__cvt+0xbc>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008098:	1bdb      	subs	r3, r3, r7
 800809a:	4638      	mov	r0, r7
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	b004      	add	sp, #16
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	1c59      	adds	r1, r3, #1
 80080a6:	9103      	str	r1, [sp, #12]
 80080a8:	701a      	strb	r2, [r3, #0]
 80080aa:	e7f0      	b.n	800808e <__cvt+0xa6>

080080ac <__exponent>:
 80080ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ae:	4603      	mov	r3, r0
 80080b0:	2900      	cmp	r1, #0
 80080b2:	bfb8      	it	lt
 80080b4:	4249      	neglt	r1, r1
 80080b6:	f803 2b02 	strb.w	r2, [r3], #2
 80080ba:	bfb4      	ite	lt
 80080bc:	222d      	movlt	r2, #45	; 0x2d
 80080be:	222b      	movge	r2, #43	; 0x2b
 80080c0:	2909      	cmp	r1, #9
 80080c2:	7042      	strb	r2, [r0, #1]
 80080c4:	dd2a      	ble.n	800811c <__exponent+0x70>
 80080c6:	f10d 0407 	add.w	r4, sp, #7
 80080ca:	46a4      	mov	ip, r4
 80080cc:	270a      	movs	r7, #10
 80080ce:	46a6      	mov	lr, r4
 80080d0:	460a      	mov	r2, r1
 80080d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80080d6:	fb07 1516 	mls	r5, r7, r6, r1
 80080da:	3530      	adds	r5, #48	; 0x30
 80080dc:	2a63      	cmp	r2, #99	; 0x63
 80080de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80080e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080e6:	4631      	mov	r1, r6
 80080e8:	dcf1      	bgt.n	80080ce <__exponent+0x22>
 80080ea:	3130      	adds	r1, #48	; 0x30
 80080ec:	f1ae 0502 	sub.w	r5, lr, #2
 80080f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080f4:	1c44      	adds	r4, r0, #1
 80080f6:	4629      	mov	r1, r5
 80080f8:	4561      	cmp	r1, ip
 80080fa:	d30a      	bcc.n	8008112 <__exponent+0x66>
 80080fc:	f10d 0209 	add.w	r2, sp, #9
 8008100:	eba2 020e 	sub.w	r2, r2, lr
 8008104:	4565      	cmp	r5, ip
 8008106:	bf88      	it	hi
 8008108:	2200      	movhi	r2, #0
 800810a:	4413      	add	r3, r2
 800810c:	1a18      	subs	r0, r3, r0
 800810e:	b003      	add	sp, #12
 8008110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800811a:	e7ed      	b.n	80080f8 <__exponent+0x4c>
 800811c:	2330      	movs	r3, #48	; 0x30
 800811e:	3130      	adds	r1, #48	; 0x30
 8008120:	7083      	strb	r3, [r0, #2]
 8008122:	70c1      	strb	r1, [r0, #3]
 8008124:	1d03      	adds	r3, r0, #4
 8008126:	e7f1      	b.n	800810c <__exponent+0x60>

08008128 <_printf_float>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	ed2d 8b02 	vpush	{d8}
 8008130:	b08d      	sub	sp, #52	; 0x34
 8008132:	460c      	mov	r4, r1
 8008134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008138:	4616      	mov	r6, r2
 800813a:	461f      	mov	r7, r3
 800813c:	4605      	mov	r5, r0
 800813e:	f001 fc13 	bl	8009968 <_localeconv_r>
 8008142:	f8d0 a000 	ldr.w	sl, [r0]
 8008146:	4650      	mov	r0, sl
 8008148:	f7f8 f862 	bl	8000210 <strlen>
 800814c:	2300      	movs	r3, #0
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	f8d8 3000 	ldr.w	r3, [r8]
 8008158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800815c:	3307      	adds	r3, #7
 800815e:	f023 0307 	bic.w	r3, r3, #7
 8008162:	f103 0208 	add.w	r2, r3, #8
 8008166:	f8c8 2000 	str.w	r2, [r8]
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008172:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800817a:	9307      	str	r3, [sp, #28]
 800817c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	4b9f      	ldr	r3, [pc, #636]	; (8008404 <_printf_float+0x2dc>)
 8008186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800818e:	f7f8 fced 	bl	8000b6c <__aeabi_dcmpun>
 8008192:	bb88      	cbnz	r0, 80081f8 <_printf_float+0xd0>
 8008194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008198:	4b9a      	ldr	r3, [pc, #616]	; (8008404 <_printf_float+0x2dc>)
 800819a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800819e:	f7f8 fcc7 	bl	8000b30 <__aeabi_dcmple>
 80081a2:	bb48      	cbnz	r0, 80081f8 <_printf_float+0xd0>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4640      	mov	r0, r8
 80081aa:	4649      	mov	r1, r9
 80081ac:	f7f8 fcb6 	bl	8000b1c <__aeabi_dcmplt>
 80081b0:	b110      	cbz	r0, 80081b8 <_printf_float+0x90>
 80081b2:	232d      	movs	r3, #45	; 0x2d
 80081b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081b8:	4b93      	ldr	r3, [pc, #588]	; (8008408 <_printf_float+0x2e0>)
 80081ba:	4894      	ldr	r0, [pc, #592]	; (800840c <_printf_float+0x2e4>)
 80081bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081c0:	bf94      	ite	ls
 80081c2:	4698      	movls	r8, r3
 80081c4:	4680      	movhi	r8, r0
 80081c6:	2303      	movs	r3, #3
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	9b05      	ldr	r3, [sp, #20]
 80081cc:	f023 0204 	bic.w	r2, r3, #4
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	9700      	str	r7, [sp, #0]
 80081d8:	4633      	mov	r3, r6
 80081da:	aa0b      	add	r2, sp, #44	; 0x2c
 80081dc:	4621      	mov	r1, r4
 80081de:	4628      	mov	r0, r5
 80081e0:	f000 f9d8 	bl	8008594 <_printf_common>
 80081e4:	3001      	adds	r0, #1
 80081e6:	f040 8090 	bne.w	800830a <_printf_float+0x1e2>
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ee:	b00d      	add	sp, #52	; 0x34
 80081f0:	ecbd 8b02 	vpop	{d8}
 80081f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f8:	4642      	mov	r2, r8
 80081fa:	464b      	mov	r3, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	4649      	mov	r1, r9
 8008200:	f7f8 fcb4 	bl	8000b6c <__aeabi_dcmpun>
 8008204:	b140      	cbz	r0, 8008218 <_printf_float+0xf0>
 8008206:	464b      	mov	r3, r9
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfbc      	itt	lt
 800820c:	232d      	movlt	r3, #45	; 0x2d
 800820e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008212:	487f      	ldr	r0, [pc, #508]	; (8008410 <_printf_float+0x2e8>)
 8008214:	4b7f      	ldr	r3, [pc, #508]	; (8008414 <_printf_float+0x2ec>)
 8008216:	e7d1      	b.n	80081bc <_printf_float+0x94>
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800821e:	9206      	str	r2, [sp, #24]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	d13f      	bne.n	80082a4 <_printf_float+0x17c>
 8008224:	2306      	movs	r3, #6
 8008226:	6063      	str	r3, [r4, #4]
 8008228:	9b05      	ldr	r3, [sp, #20]
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008230:	2300      	movs	r3, #0
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	ab0a      	add	r3, sp, #40	; 0x28
 8008236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800823a:	ab09      	add	r3, sp, #36	; 0x24
 800823c:	ec49 8b10 	vmov	d0, r8, r9
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	6022      	str	r2, [r4, #0]
 8008244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff fecd 	bl	8007fe8 <__cvt>
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008252:	2b47      	cmp	r3, #71	; 0x47
 8008254:	4680      	mov	r8, r0
 8008256:	d108      	bne.n	800826a <_printf_float+0x142>
 8008258:	1cc8      	adds	r0, r1, #3
 800825a:	db02      	blt.n	8008262 <_printf_float+0x13a>
 800825c:	6863      	ldr	r3, [r4, #4]
 800825e:	4299      	cmp	r1, r3
 8008260:	dd41      	ble.n	80082e6 <_printf_float+0x1be>
 8008262:	f1ab 0b02 	sub.w	fp, fp, #2
 8008266:	fa5f fb8b 	uxtb.w	fp, fp
 800826a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800826e:	d820      	bhi.n	80082b2 <_printf_float+0x18a>
 8008270:	3901      	subs	r1, #1
 8008272:	465a      	mov	r2, fp
 8008274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008278:	9109      	str	r1, [sp, #36]	; 0x24
 800827a:	f7ff ff17 	bl	80080ac <__exponent>
 800827e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008280:	1813      	adds	r3, r2, r0
 8008282:	2a01      	cmp	r2, #1
 8008284:	4681      	mov	r9, r0
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	dc02      	bgt.n	8008290 <_printf_float+0x168>
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	07d2      	lsls	r2, r2, #31
 800828e:	d501      	bpl.n	8008294 <_printf_float+0x16c>
 8008290:	3301      	adds	r3, #1
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008298:	2b00      	cmp	r3, #0
 800829a:	d09c      	beq.n	80081d6 <_printf_float+0xae>
 800829c:	232d      	movs	r3, #45	; 0x2d
 800829e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a2:	e798      	b.n	80081d6 <_printf_float+0xae>
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	2a47      	cmp	r2, #71	; 0x47
 80082a8:	d1be      	bne.n	8008228 <_printf_float+0x100>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1bc      	bne.n	8008228 <_printf_float+0x100>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7b9      	b.n	8008226 <_printf_float+0xfe>
 80082b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082b6:	d118      	bne.n	80082ea <_printf_float+0x1c2>
 80082b8:	2900      	cmp	r1, #0
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	dd0b      	ble.n	80082d6 <_printf_float+0x1ae>
 80082be:	6121      	str	r1, [r4, #16]
 80082c0:	b913      	cbnz	r3, 80082c8 <_printf_float+0x1a0>
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	07d0      	lsls	r0, r2, #31
 80082c6:	d502      	bpl.n	80082ce <_printf_float+0x1a6>
 80082c8:	3301      	adds	r3, #1
 80082ca:	440b      	add	r3, r1
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80082d0:	f04f 0900 	mov.w	r9, #0
 80082d4:	e7de      	b.n	8008294 <_printf_float+0x16c>
 80082d6:	b913      	cbnz	r3, 80082de <_printf_float+0x1b6>
 80082d8:	6822      	ldr	r2, [r4, #0]
 80082da:	07d2      	lsls	r2, r2, #31
 80082dc:	d501      	bpl.n	80082e2 <_printf_float+0x1ba>
 80082de:	3302      	adds	r3, #2
 80082e0:	e7f4      	b.n	80082cc <_printf_float+0x1a4>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e7f2      	b.n	80082cc <_printf_float+0x1a4>
 80082e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ec:	4299      	cmp	r1, r3
 80082ee:	db05      	blt.n	80082fc <_printf_float+0x1d4>
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	6121      	str	r1, [r4, #16]
 80082f4:	07d8      	lsls	r0, r3, #31
 80082f6:	d5ea      	bpl.n	80082ce <_printf_float+0x1a6>
 80082f8:	1c4b      	adds	r3, r1, #1
 80082fa:	e7e7      	b.n	80082cc <_printf_float+0x1a4>
 80082fc:	2900      	cmp	r1, #0
 80082fe:	bfd4      	ite	le
 8008300:	f1c1 0202 	rsble	r2, r1, #2
 8008304:	2201      	movgt	r2, #1
 8008306:	4413      	add	r3, r2
 8008308:	e7e0      	b.n	80082cc <_printf_float+0x1a4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	055a      	lsls	r2, r3, #21
 800830e:	d407      	bmi.n	8008320 <_printf_float+0x1f8>
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	4642      	mov	r2, r8
 8008314:	4631      	mov	r1, r6
 8008316:	4628      	mov	r0, r5
 8008318:	47b8      	blx	r7
 800831a:	3001      	adds	r0, #1
 800831c:	d12c      	bne.n	8008378 <_printf_float+0x250>
 800831e:	e764      	b.n	80081ea <_printf_float+0xc2>
 8008320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008324:	f240 80e0 	bls.w	80084e8 <_printf_float+0x3c0>
 8008328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800832c:	2200      	movs	r2, #0
 800832e:	2300      	movs	r3, #0
 8008330:	f7f8 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 8008334:	2800      	cmp	r0, #0
 8008336:	d034      	beq.n	80083a2 <_printf_float+0x27a>
 8008338:	4a37      	ldr	r2, [pc, #220]	; (8008418 <_printf_float+0x2f0>)
 800833a:	2301      	movs	r3, #1
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af51 	beq.w	80081ea <_printf_float+0xc2>
 8008348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800834c:	429a      	cmp	r2, r3
 800834e:	db02      	blt.n	8008356 <_printf_float+0x22e>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07d8      	lsls	r0, r3, #31
 8008354:	d510      	bpl.n	8008378 <_printf_float+0x250>
 8008356:	ee18 3a10 	vmov	r3, s16
 800835a:	4652      	mov	r2, sl
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af41 	beq.w	80081ea <_printf_float+0xc2>
 8008368:	f04f 0800 	mov.w	r8, #0
 800836c:	f104 091a 	add.w	r9, r4, #26
 8008370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	4543      	cmp	r3, r8
 8008376:	dc09      	bgt.n	800838c <_printf_float+0x264>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	f100 8105 	bmi.w	800858a <_printf_float+0x462>
 8008380:	68e0      	ldr	r0, [r4, #12]
 8008382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008384:	4298      	cmp	r0, r3
 8008386:	bfb8      	it	lt
 8008388:	4618      	movlt	r0, r3
 800838a:	e730      	b.n	80081ee <_printf_float+0xc6>
 800838c:	2301      	movs	r3, #1
 800838e:	464a      	mov	r2, r9
 8008390:	4631      	mov	r1, r6
 8008392:	4628      	mov	r0, r5
 8008394:	47b8      	blx	r7
 8008396:	3001      	adds	r0, #1
 8008398:	f43f af27 	beq.w	80081ea <_printf_float+0xc2>
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	e7e6      	b.n	8008370 <_printf_float+0x248>
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc39      	bgt.n	800841c <_printf_float+0x2f4>
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <_printf_float+0x2f0>)
 80083aa:	2301      	movs	r3, #1
 80083ac:	4631      	mov	r1, r6
 80083ae:	4628      	mov	r0, r5
 80083b0:	47b8      	blx	r7
 80083b2:	3001      	adds	r0, #1
 80083b4:	f43f af19 	beq.w	80081ea <_printf_float+0xc2>
 80083b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083bc:	4313      	orrs	r3, r2
 80083be:	d102      	bne.n	80083c6 <_printf_float+0x29e>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	d5d8      	bpl.n	8008378 <_printf_float+0x250>
 80083c6:	ee18 3a10 	vmov	r3, s16
 80083ca:	4652      	mov	r2, sl
 80083cc:	4631      	mov	r1, r6
 80083ce:	4628      	mov	r0, r5
 80083d0:	47b8      	blx	r7
 80083d2:	3001      	adds	r0, #1
 80083d4:	f43f af09 	beq.w	80081ea <_printf_float+0xc2>
 80083d8:	f04f 0900 	mov.w	r9, #0
 80083dc:	f104 0a1a 	add.w	sl, r4, #26
 80083e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e2:	425b      	negs	r3, r3
 80083e4:	454b      	cmp	r3, r9
 80083e6:	dc01      	bgt.n	80083ec <_printf_float+0x2c4>
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	e792      	b.n	8008312 <_printf_float+0x1ea>
 80083ec:	2301      	movs	r3, #1
 80083ee:	4652      	mov	r2, sl
 80083f0:	4631      	mov	r1, r6
 80083f2:	4628      	mov	r0, r5
 80083f4:	47b8      	blx	r7
 80083f6:	3001      	adds	r0, #1
 80083f8:	f43f aef7 	beq.w	80081ea <_printf_float+0xc2>
 80083fc:	f109 0901 	add.w	r9, r9, #1
 8008400:	e7ee      	b.n	80083e0 <_printf_float+0x2b8>
 8008402:	bf00      	nop
 8008404:	7fefffff 	.word	0x7fefffff
 8008408:	0800ad2c 	.word	0x0800ad2c
 800840c:	0800ad30 	.word	0x0800ad30
 8008410:	0800ad38 	.word	0x0800ad38
 8008414:	0800ad34 	.word	0x0800ad34
 8008418:	0800ad3c 	.word	0x0800ad3c
 800841c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800841e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008420:	429a      	cmp	r2, r3
 8008422:	bfa8      	it	ge
 8008424:	461a      	movge	r2, r3
 8008426:	2a00      	cmp	r2, #0
 8008428:	4691      	mov	r9, r2
 800842a:	dc37      	bgt.n	800849c <_printf_float+0x374>
 800842c:	f04f 0b00 	mov.w	fp, #0
 8008430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008434:	f104 021a 	add.w	r2, r4, #26
 8008438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800843a:	9305      	str	r3, [sp, #20]
 800843c:	eba3 0309 	sub.w	r3, r3, r9
 8008440:	455b      	cmp	r3, fp
 8008442:	dc33      	bgt.n	80084ac <_printf_float+0x384>
 8008444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008448:	429a      	cmp	r2, r3
 800844a:	db3b      	blt.n	80084c4 <_printf_float+0x39c>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07da      	lsls	r2, r3, #31
 8008450:	d438      	bmi.n	80084c4 <_printf_float+0x39c>
 8008452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008458:	1a9a      	subs	r2, r3, r2
 800845a:	eba3 0901 	sub.w	r9, r3, r1
 800845e:	4591      	cmp	r9, r2
 8008460:	bfa8      	it	ge
 8008462:	4691      	movge	r9, r2
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	dc35      	bgt.n	80084d6 <_printf_float+0x3ae>
 800846a:	f04f 0800 	mov.w	r8, #0
 800846e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008472:	f104 0a1a 	add.w	sl, r4, #26
 8008476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	eba3 0309 	sub.w	r3, r3, r9
 8008480:	4543      	cmp	r3, r8
 8008482:	f77f af79 	ble.w	8008378 <_printf_float+0x250>
 8008486:	2301      	movs	r3, #1
 8008488:	4652      	mov	r2, sl
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	f43f aeaa 	beq.w	80081ea <_printf_float+0xc2>
 8008496:	f108 0801 	add.w	r8, r8, #1
 800849a:	e7ec      	b.n	8008476 <_printf_float+0x34e>
 800849c:	4613      	mov	r3, r2
 800849e:	4631      	mov	r1, r6
 80084a0:	4642      	mov	r2, r8
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	d1c0      	bne.n	800842c <_printf_float+0x304>
 80084aa:	e69e      	b.n	80081ea <_printf_float+0xc2>
 80084ac:	2301      	movs	r3, #1
 80084ae:	4631      	mov	r1, r6
 80084b0:	4628      	mov	r0, r5
 80084b2:	9205      	str	r2, [sp, #20]
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f ae97 	beq.w	80081ea <_printf_float+0xc2>
 80084bc:	9a05      	ldr	r2, [sp, #20]
 80084be:	f10b 0b01 	add.w	fp, fp, #1
 80084c2:	e7b9      	b.n	8008438 <_printf_float+0x310>
 80084c4:	ee18 3a10 	vmov	r3, s16
 80084c8:	4652      	mov	r2, sl
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1be      	bne.n	8008452 <_printf_float+0x32a>
 80084d4:	e689      	b.n	80081ea <_printf_float+0xc2>
 80084d6:	9a05      	ldr	r2, [sp, #20]
 80084d8:	464b      	mov	r3, r9
 80084da:	4442      	add	r2, r8
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	d1c1      	bne.n	800846a <_printf_float+0x342>
 80084e6:	e680      	b.n	80081ea <_printf_float+0xc2>
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	2a01      	cmp	r2, #1
 80084ec:	dc01      	bgt.n	80084f2 <_printf_float+0x3ca>
 80084ee:	07db      	lsls	r3, r3, #31
 80084f0:	d538      	bpl.n	8008564 <_printf_float+0x43c>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4642      	mov	r2, r8
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae74 	beq.w	80081ea <_printf_float+0xc2>
 8008502:	ee18 3a10 	vmov	r3, s16
 8008506:	4652      	mov	r2, sl
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f ae6b 	beq.w	80081ea <_printf_float+0xc2>
 8008514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008518:	2200      	movs	r2, #0
 800851a:	2300      	movs	r3, #0
 800851c:	f7f8 faf4 	bl	8000b08 <__aeabi_dcmpeq>
 8008520:	b9d8      	cbnz	r0, 800855a <_printf_float+0x432>
 8008522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008524:	f108 0201 	add.w	r2, r8, #1
 8008528:	3b01      	subs	r3, #1
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	d10e      	bne.n	8008552 <_printf_float+0x42a>
 8008534:	e659      	b.n	80081ea <_printf_float+0xc2>
 8008536:	2301      	movs	r3, #1
 8008538:	4652      	mov	r2, sl
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae52 	beq.w	80081ea <_printf_float+0xc2>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854c:	3b01      	subs	r3, #1
 800854e:	4543      	cmp	r3, r8
 8008550:	dcf1      	bgt.n	8008536 <_printf_float+0x40e>
 8008552:	464b      	mov	r3, r9
 8008554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008558:	e6dc      	b.n	8008314 <_printf_float+0x1ec>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 0a1a 	add.w	sl, r4, #26
 8008562:	e7f2      	b.n	800854a <_printf_float+0x422>
 8008564:	2301      	movs	r3, #1
 8008566:	4642      	mov	r2, r8
 8008568:	e7df      	b.n	800852a <_printf_float+0x402>
 800856a:	2301      	movs	r3, #1
 800856c:	464a      	mov	r2, r9
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae38 	beq.w	80081ea <_printf_float+0xc2>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	4543      	cmp	r3, r8
 8008586:	dcf0      	bgt.n	800856a <_printf_float+0x442>
 8008588:	e6fa      	b.n	8008380 <_printf_float+0x258>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0919 	add.w	r9, r4, #25
 8008592:	e7f4      	b.n	800857e <_printf_float+0x456>

08008594 <_printf_common>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	4616      	mov	r6, r2
 800859a:	4699      	mov	r9, r3
 800859c:	688a      	ldr	r2, [r1, #8]
 800859e:	690b      	ldr	r3, [r1, #16]
 80085a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bfb8      	it	lt
 80085a8:	4613      	movlt	r3, r2
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b0:	4607      	mov	r7, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b10a      	cbz	r2, 80085ba <_printf_common+0x26>
 80085b6:	3301      	adds	r3, #1
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	0699      	lsls	r1, r3, #26
 80085be:	bf42      	ittt	mi
 80085c0:	6833      	ldrmi	r3, [r6, #0]
 80085c2:	3302      	addmi	r3, #2
 80085c4:	6033      	strmi	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	f015 0506 	ands.w	r5, r5, #6
 80085cc:	d106      	bne.n	80085dc <_printf_common+0x48>
 80085ce:	f104 0a19 	add.w	sl, r4, #25
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	6832      	ldr	r2, [r6, #0]
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc26      	bgt.n	800862a <_printf_common+0x96>
 80085dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e0:	1e13      	subs	r3, r2, #0
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	bf18      	it	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	0692      	lsls	r2, r2, #26
 80085ea:	d42b      	bmi.n	8008644 <_printf_common+0xb0>
 80085ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f0:	4649      	mov	r1, r9
 80085f2:	4638      	mov	r0, r7
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d01e      	beq.n	8008638 <_printf_common+0xa4>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	68e5      	ldr	r5, [r4, #12]
 80085fe:	6832      	ldr	r2, [r6, #0]
 8008600:	f003 0306 	and.w	r3, r3, #6
 8008604:	2b04      	cmp	r3, #4
 8008606:	bf08      	it	eq
 8008608:	1aad      	subeq	r5, r5, r2
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	6922      	ldr	r2, [r4, #16]
 800860e:	bf0c      	ite	eq
 8008610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008614:	2500      	movne	r5, #0
 8008616:	4293      	cmp	r3, r2
 8008618:	bfc4      	itt	gt
 800861a:	1a9b      	subgt	r3, r3, r2
 800861c:	18ed      	addgt	r5, r5, r3
 800861e:	2600      	movs	r6, #0
 8008620:	341a      	adds	r4, #26
 8008622:	42b5      	cmp	r5, r6
 8008624:	d11a      	bne.n	800865c <_printf_common+0xc8>
 8008626:	2000      	movs	r0, #0
 8008628:	e008      	b.n	800863c <_printf_common+0xa8>
 800862a:	2301      	movs	r3, #1
 800862c:	4652      	mov	r2, sl
 800862e:	4649      	mov	r1, r9
 8008630:	4638      	mov	r0, r7
 8008632:	47c0      	blx	r8
 8008634:	3001      	adds	r0, #1
 8008636:	d103      	bne.n	8008640 <_printf_common+0xac>
 8008638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008640:	3501      	adds	r5, #1
 8008642:	e7c6      	b.n	80085d2 <_printf_common+0x3e>
 8008644:	18e1      	adds	r1, r4, r3
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	2030      	movs	r0, #48	; 0x30
 800864a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800864e:	4422      	add	r2, r4
 8008650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008658:	3302      	adds	r3, #2
 800865a:	e7c7      	b.n	80085ec <_printf_common+0x58>
 800865c:	2301      	movs	r3, #1
 800865e:	4622      	mov	r2, r4
 8008660:	4649      	mov	r1, r9
 8008662:	4638      	mov	r0, r7
 8008664:	47c0      	blx	r8
 8008666:	3001      	adds	r0, #1
 8008668:	d0e6      	beq.n	8008638 <_printf_common+0xa4>
 800866a:	3601      	adds	r6, #1
 800866c:	e7d9      	b.n	8008622 <_printf_common+0x8e>
	...

08008670 <_printf_i>:
 8008670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	7e0f      	ldrb	r7, [r1, #24]
 8008676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008678:	2f78      	cmp	r7, #120	; 0x78
 800867a:	4691      	mov	r9, r2
 800867c:	4680      	mov	r8, r0
 800867e:	460c      	mov	r4, r1
 8008680:	469a      	mov	sl, r3
 8008682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008686:	d807      	bhi.n	8008698 <_printf_i+0x28>
 8008688:	2f62      	cmp	r7, #98	; 0x62
 800868a:	d80a      	bhi.n	80086a2 <_printf_i+0x32>
 800868c:	2f00      	cmp	r7, #0
 800868e:	f000 80d8 	beq.w	8008842 <_printf_i+0x1d2>
 8008692:	2f58      	cmp	r7, #88	; 0x58
 8008694:	f000 80a3 	beq.w	80087de <_printf_i+0x16e>
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a0:	e03a      	b.n	8008718 <_printf_i+0xa8>
 80086a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086a6:	2b15      	cmp	r3, #21
 80086a8:	d8f6      	bhi.n	8008698 <_printf_i+0x28>
 80086aa:	a101      	add	r1, pc, #4	; (adr r1, 80086b0 <_printf_i+0x40>)
 80086ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b0:	08008709 	.word	0x08008709
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	08008699 	.word	0x08008699
 80086bc:	08008699 	.word	0x08008699
 80086c0:	08008699 	.word	0x08008699
 80086c4:	08008699 	.word	0x08008699
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	08008699 	.word	0x08008699
 80086d0:	08008699 	.word	0x08008699
 80086d4:	08008699 	.word	0x08008699
 80086d8:	08008699 	.word	0x08008699
 80086dc:	08008829 	.word	0x08008829
 80086e0:	0800874d 	.word	0x0800874d
 80086e4:	0800880b 	.word	0x0800880b
 80086e8:	08008699 	.word	0x08008699
 80086ec:	08008699 	.word	0x08008699
 80086f0:	0800884b 	.word	0x0800884b
 80086f4:	08008699 	.word	0x08008699
 80086f8:	0800874d 	.word	0x0800874d
 80086fc:	08008699 	.word	0x08008699
 8008700:	08008699 	.word	0x08008699
 8008704:	08008813 	.word	0x08008813
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	602a      	str	r2, [r5, #0]
 8008710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008718:	2301      	movs	r3, #1
 800871a:	e0a3      	b.n	8008864 <_printf_i+0x1f4>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	6829      	ldr	r1, [r5, #0]
 8008720:	0606      	lsls	r6, r0, #24
 8008722:	f101 0304 	add.w	r3, r1, #4
 8008726:	d50a      	bpl.n	800873e <_printf_i+0xce>
 8008728:	680e      	ldr	r6, [r1, #0]
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	2e00      	cmp	r6, #0
 800872e:	da03      	bge.n	8008738 <_printf_i+0xc8>
 8008730:	232d      	movs	r3, #45	; 0x2d
 8008732:	4276      	negs	r6, r6
 8008734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008738:	485e      	ldr	r0, [pc, #376]	; (80088b4 <_printf_i+0x244>)
 800873a:	230a      	movs	r3, #10
 800873c:	e019      	b.n	8008772 <_printf_i+0x102>
 800873e:	680e      	ldr	r6, [r1, #0]
 8008740:	602b      	str	r3, [r5, #0]
 8008742:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008746:	bf18      	it	ne
 8008748:	b236      	sxthne	r6, r6
 800874a:	e7ef      	b.n	800872c <_printf_i+0xbc>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	6820      	ldr	r0, [r4, #0]
 8008750:	1d19      	adds	r1, r3, #4
 8008752:	6029      	str	r1, [r5, #0]
 8008754:	0601      	lsls	r1, r0, #24
 8008756:	d501      	bpl.n	800875c <_printf_i+0xec>
 8008758:	681e      	ldr	r6, [r3, #0]
 800875a:	e002      	b.n	8008762 <_printf_i+0xf2>
 800875c:	0646      	lsls	r6, r0, #25
 800875e:	d5fb      	bpl.n	8008758 <_printf_i+0xe8>
 8008760:	881e      	ldrh	r6, [r3, #0]
 8008762:	4854      	ldr	r0, [pc, #336]	; (80088b4 <_printf_i+0x244>)
 8008764:	2f6f      	cmp	r7, #111	; 0x6f
 8008766:	bf0c      	ite	eq
 8008768:	2308      	moveq	r3, #8
 800876a:	230a      	movne	r3, #10
 800876c:	2100      	movs	r1, #0
 800876e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008772:	6865      	ldr	r5, [r4, #4]
 8008774:	60a5      	str	r5, [r4, #8]
 8008776:	2d00      	cmp	r5, #0
 8008778:	bfa2      	ittt	ge
 800877a:	6821      	ldrge	r1, [r4, #0]
 800877c:	f021 0104 	bicge.w	r1, r1, #4
 8008780:	6021      	strge	r1, [r4, #0]
 8008782:	b90e      	cbnz	r6, 8008788 <_printf_i+0x118>
 8008784:	2d00      	cmp	r5, #0
 8008786:	d04d      	beq.n	8008824 <_printf_i+0x1b4>
 8008788:	4615      	mov	r5, r2
 800878a:	fbb6 f1f3 	udiv	r1, r6, r3
 800878e:	fb03 6711 	mls	r7, r3, r1, r6
 8008792:	5dc7      	ldrb	r7, [r0, r7]
 8008794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008798:	4637      	mov	r7, r6
 800879a:	42bb      	cmp	r3, r7
 800879c:	460e      	mov	r6, r1
 800879e:	d9f4      	bls.n	800878a <_printf_i+0x11a>
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d10b      	bne.n	80087bc <_printf_i+0x14c>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	07de      	lsls	r6, r3, #31
 80087a8:	d508      	bpl.n	80087bc <_printf_i+0x14c>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	4299      	cmp	r1, r3
 80087b0:	bfde      	ittt	le
 80087b2:	2330      	movle	r3, #48	; 0x30
 80087b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80087bc:	1b52      	subs	r2, r2, r5
 80087be:	6122      	str	r2, [r4, #16]
 80087c0:	f8cd a000 	str.w	sl, [sp]
 80087c4:	464b      	mov	r3, r9
 80087c6:	aa03      	add	r2, sp, #12
 80087c8:	4621      	mov	r1, r4
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7ff fee2 	bl	8008594 <_printf_common>
 80087d0:	3001      	adds	r0, #1
 80087d2:	d14c      	bne.n	800886e <_printf_i+0x1fe>
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d8:	b004      	add	sp, #16
 80087da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087de:	4835      	ldr	r0, [pc, #212]	; (80088b4 <_printf_i+0x244>)
 80087e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087e4:	6829      	ldr	r1, [r5, #0]
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ec:	6029      	str	r1, [r5, #0]
 80087ee:	061d      	lsls	r5, r3, #24
 80087f0:	d514      	bpl.n	800881c <_printf_i+0x1ac>
 80087f2:	07df      	lsls	r7, r3, #31
 80087f4:	bf44      	itt	mi
 80087f6:	f043 0320 	orrmi.w	r3, r3, #32
 80087fa:	6023      	strmi	r3, [r4, #0]
 80087fc:	b91e      	cbnz	r6, 8008806 <_printf_i+0x196>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	f023 0320 	bic.w	r3, r3, #32
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	2310      	movs	r3, #16
 8008808:	e7b0      	b.n	800876c <_printf_i+0xfc>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	f043 0320 	orr.w	r3, r3, #32
 8008810:	6023      	str	r3, [r4, #0]
 8008812:	2378      	movs	r3, #120	; 0x78
 8008814:	4828      	ldr	r0, [pc, #160]	; (80088b8 <_printf_i+0x248>)
 8008816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800881a:	e7e3      	b.n	80087e4 <_printf_i+0x174>
 800881c:	0659      	lsls	r1, r3, #25
 800881e:	bf48      	it	mi
 8008820:	b2b6      	uxthmi	r6, r6
 8008822:	e7e6      	b.n	80087f2 <_printf_i+0x182>
 8008824:	4615      	mov	r5, r2
 8008826:	e7bb      	b.n	80087a0 <_printf_i+0x130>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	6826      	ldr	r6, [r4, #0]
 800882c:	6961      	ldr	r1, [r4, #20]
 800882e:	1d18      	adds	r0, r3, #4
 8008830:	6028      	str	r0, [r5, #0]
 8008832:	0635      	lsls	r5, r6, #24
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	d501      	bpl.n	800883c <_printf_i+0x1cc>
 8008838:	6019      	str	r1, [r3, #0]
 800883a:	e002      	b.n	8008842 <_printf_i+0x1d2>
 800883c:	0670      	lsls	r0, r6, #25
 800883e:	d5fb      	bpl.n	8008838 <_printf_i+0x1c8>
 8008840:	8019      	strh	r1, [r3, #0]
 8008842:	2300      	movs	r3, #0
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	4615      	mov	r5, r2
 8008848:	e7ba      	b.n	80087c0 <_printf_i+0x150>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	1d1a      	adds	r2, r3, #4
 800884e:	602a      	str	r2, [r5, #0]
 8008850:	681d      	ldr	r5, [r3, #0]
 8008852:	6862      	ldr	r2, [r4, #4]
 8008854:	2100      	movs	r1, #0
 8008856:	4628      	mov	r0, r5
 8008858:	f7f7 fce2 	bl	8000220 <memchr>
 800885c:	b108      	cbz	r0, 8008862 <_printf_i+0x1f2>
 800885e:	1b40      	subs	r0, r0, r5
 8008860:	6060      	str	r0, [r4, #4]
 8008862:	6863      	ldr	r3, [r4, #4]
 8008864:	6123      	str	r3, [r4, #16]
 8008866:	2300      	movs	r3, #0
 8008868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886c:	e7a8      	b.n	80087c0 <_printf_i+0x150>
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	462a      	mov	r2, r5
 8008872:	4649      	mov	r1, r9
 8008874:	4640      	mov	r0, r8
 8008876:	47d0      	blx	sl
 8008878:	3001      	adds	r0, #1
 800887a:	d0ab      	beq.n	80087d4 <_printf_i+0x164>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	d413      	bmi.n	80088aa <_printf_i+0x23a>
 8008882:	68e0      	ldr	r0, [r4, #12]
 8008884:	9b03      	ldr	r3, [sp, #12]
 8008886:	4298      	cmp	r0, r3
 8008888:	bfb8      	it	lt
 800888a:	4618      	movlt	r0, r3
 800888c:	e7a4      	b.n	80087d8 <_printf_i+0x168>
 800888e:	2301      	movs	r3, #1
 8008890:	4632      	mov	r2, r6
 8008892:	4649      	mov	r1, r9
 8008894:	4640      	mov	r0, r8
 8008896:	47d0      	blx	sl
 8008898:	3001      	adds	r0, #1
 800889a:	d09b      	beq.n	80087d4 <_printf_i+0x164>
 800889c:	3501      	adds	r5, #1
 800889e:	68e3      	ldr	r3, [r4, #12]
 80088a0:	9903      	ldr	r1, [sp, #12]
 80088a2:	1a5b      	subs	r3, r3, r1
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	dcf2      	bgt.n	800888e <_printf_i+0x21e>
 80088a8:	e7eb      	b.n	8008882 <_printf_i+0x212>
 80088aa:	2500      	movs	r5, #0
 80088ac:	f104 0619 	add.w	r6, r4, #25
 80088b0:	e7f5      	b.n	800889e <_printf_i+0x22e>
 80088b2:	bf00      	nop
 80088b4:	0800ad3e 	.word	0x0800ad3e
 80088b8:	0800ad4f 	.word	0x0800ad4f

080088bc <iprintf>:
 80088bc:	b40f      	push	{r0, r1, r2, r3}
 80088be:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <iprintf+0x2c>)
 80088c0:	b513      	push	{r0, r1, r4, lr}
 80088c2:	681c      	ldr	r4, [r3, #0]
 80088c4:	b124      	cbz	r4, 80088d0 <iprintf+0x14>
 80088c6:	69a3      	ldr	r3, [r4, #24]
 80088c8:	b913      	cbnz	r3, 80088d0 <iprintf+0x14>
 80088ca:	4620      	mov	r0, r4
 80088cc:	f7ff fa1c 	bl	8007d08 <__sinit>
 80088d0:	ab05      	add	r3, sp, #20
 80088d2:	9a04      	ldr	r2, [sp, #16]
 80088d4:	68a1      	ldr	r1, [r4, #8]
 80088d6:	9301      	str	r3, [sp, #4]
 80088d8:	4620      	mov	r0, r4
 80088da:	f001 fddb 	bl	800a494 <_vfiprintf_r>
 80088de:	b002      	add	sp, #8
 80088e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e4:	b004      	add	sp, #16
 80088e6:	4770      	bx	lr
 80088e8:	20000010 	.word	0x20000010

080088ec <cleanup_glue>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	460c      	mov	r4, r1
 80088f0:	6809      	ldr	r1, [r1, #0]
 80088f2:	4605      	mov	r5, r0
 80088f4:	b109      	cbz	r1, 80088fa <cleanup_glue+0xe>
 80088f6:	f7ff fff9 	bl	80088ec <cleanup_glue>
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008902:	f001 bbf5 	b.w	800a0f0 <_free_r>
	...

08008908 <_reclaim_reent>:
 8008908:	4b2c      	ldr	r3, [pc, #176]	; (80089bc <_reclaim_reent+0xb4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4283      	cmp	r3, r0
 800890e:	b570      	push	{r4, r5, r6, lr}
 8008910:	4604      	mov	r4, r0
 8008912:	d051      	beq.n	80089b8 <_reclaim_reent+0xb0>
 8008914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008916:	b143      	cbz	r3, 800892a <_reclaim_reent+0x22>
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d14a      	bne.n	80089b4 <_reclaim_reent+0xac>
 800891e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008920:	6819      	ldr	r1, [r3, #0]
 8008922:	b111      	cbz	r1, 800892a <_reclaim_reent+0x22>
 8008924:	4620      	mov	r0, r4
 8008926:	f001 fbe3 	bl	800a0f0 <_free_r>
 800892a:	6961      	ldr	r1, [r4, #20]
 800892c:	b111      	cbz	r1, 8008934 <_reclaim_reent+0x2c>
 800892e:	4620      	mov	r0, r4
 8008930:	f001 fbde 	bl	800a0f0 <_free_r>
 8008934:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008936:	b111      	cbz	r1, 800893e <_reclaim_reent+0x36>
 8008938:	4620      	mov	r0, r4
 800893a:	f001 fbd9 	bl	800a0f0 <_free_r>
 800893e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008940:	b111      	cbz	r1, 8008948 <_reclaim_reent+0x40>
 8008942:	4620      	mov	r0, r4
 8008944:	f001 fbd4 	bl	800a0f0 <_free_r>
 8008948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800894a:	b111      	cbz	r1, 8008952 <_reclaim_reent+0x4a>
 800894c:	4620      	mov	r0, r4
 800894e:	f001 fbcf 	bl	800a0f0 <_free_r>
 8008952:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008954:	b111      	cbz	r1, 800895c <_reclaim_reent+0x54>
 8008956:	4620      	mov	r0, r4
 8008958:	f001 fbca 	bl	800a0f0 <_free_r>
 800895c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800895e:	b111      	cbz	r1, 8008966 <_reclaim_reent+0x5e>
 8008960:	4620      	mov	r0, r4
 8008962:	f001 fbc5 	bl	800a0f0 <_free_r>
 8008966:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008968:	b111      	cbz	r1, 8008970 <_reclaim_reent+0x68>
 800896a:	4620      	mov	r0, r4
 800896c:	f001 fbc0 	bl	800a0f0 <_free_r>
 8008970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008972:	b111      	cbz	r1, 800897a <_reclaim_reent+0x72>
 8008974:	4620      	mov	r0, r4
 8008976:	f001 fbbb 	bl	800a0f0 <_free_r>
 800897a:	69a3      	ldr	r3, [r4, #24]
 800897c:	b1e3      	cbz	r3, 80089b8 <_reclaim_reent+0xb0>
 800897e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008980:	4620      	mov	r0, r4
 8008982:	4798      	blx	r3
 8008984:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008986:	b1b9      	cbz	r1, 80089b8 <_reclaim_reent+0xb0>
 8008988:	4620      	mov	r0, r4
 800898a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800898e:	f7ff bfad 	b.w	80088ec <cleanup_glue>
 8008992:	5949      	ldr	r1, [r1, r5]
 8008994:	b941      	cbnz	r1, 80089a8 <_reclaim_reent+0xa0>
 8008996:	3504      	adds	r5, #4
 8008998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800899a:	2d80      	cmp	r5, #128	; 0x80
 800899c:	68d9      	ldr	r1, [r3, #12]
 800899e:	d1f8      	bne.n	8008992 <_reclaim_reent+0x8a>
 80089a0:	4620      	mov	r0, r4
 80089a2:	f001 fba5 	bl	800a0f0 <_free_r>
 80089a6:	e7ba      	b.n	800891e <_reclaim_reent+0x16>
 80089a8:	680e      	ldr	r6, [r1, #0]
 80089aa:	4620      	mov	r0, r4
 80089ac:	f001 fba0 	bl	800a0f0 <_free_r>
 80089b0:	4631      	mov	r1, r6
 80089b2:	e7ef      	b.n	8008994 <_reclaim_reent+0x8c>
 80089b4:	2500      	movs	r5, #0
 80089b6:	e7ef      	b.n	8008998 <_reclaim_reent+0x90>
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	bf00      	nop
 80089bc:	20000010 	.word	0x20000010

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_sbrk_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f9 f984 	bl	8001cd8 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20004994 	.word	0x20004994

080089e0 <siprintf>:
 80089e0:	b40e      	push	{r1, r2, r3}
 80089e2:	b500      	push	{lr}
 80089e4:	b09c      	sub	sp, #112	; 0x70
 80089e6:	ab1d      	add	r3, sp, #116	; 0x74
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f0:	4809      	ldr	r0, [pc, #36]	; (8008a18 <siprintf+0x38>)
 80089f2:	9107      	str	r1, [sp, #28]
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	4909      	ldr	r1, [pc, #36]	; (8008a1c <siprintf+0x3c>)
 80089f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	a902      	add	r1, sp, #8
 8008a04:	f001 fc1c 	bl	800a240 <_svfiprintf_r>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	b01c      	add	sp, #112	; 0x70
 8008a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a14:	b003      	add	sp, #12
 8008a16:	4770      	bx	lr
 8008a18:	20000010 	.word	0x20000010
 8008a1c:	ffff0208 	.word	0xffff0208

08008a20 <__sread>:
 8008a20:	b510      	push	{r4, lr}
 8008a22:	460c      	mov	r4, r1
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	f001 fe64 	bl	800a6f4 <_read_r>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	bfab      	itete	ge
 8008a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a32:	89a3      	ldrhlt	r3, [r4, #12]
 8008a34:	181b      	addge	r3, r3, r0
 8008a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a3a:	bfac      	ite	ge
 8008a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a3e:	81a3      	strhlt	r3, [r4, #12]
 8008a40:	bd10      	pop	{r4, pc}

08008a42 <__swrite>:
 8008a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	461f      	mov	r7, r3
 8008a48:	898b      	ldrh	r3, [r1, #12]
 8008a4a:	05db      	lsls	r3, r3, #23
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	4616      	mov	r6, r2
 8008a52:	d505      	bpl.n	8008a60 <__swrite+0x1e>
 8008a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a58:	2302      	movs	r3, #2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f000 ff88 	bl	8009970 <_lseek_r>
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a6a:	81a3      	strh	r3, [r4, #12]
 8008a6c:	4632      	mov	r2, r6
 8008a6e:	463b      	mov	r3, r7
 8008a70:	4628      	mov	r0, r5
 8008a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a76:	f000 b817 	b.w	8008aa8 <_write_r>

08008a7a <__sseek>:
 8008a7a:	b510      	push	{r4, lr}
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a82:	f000 ff75 	bl	8009970 <_lseek_r>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	bf15      	itete	ne
 8008a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a96:	81a3      	strheq	r3, [r4, #12]
 8008a98:	bf18      	it	ne
 8008a9a:	81a3      	strhne	r3, [r4, #12]
 8008a9c:	bd10      	pop	{r4, pc}

08008a9e <__sclose>:
 8008a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa2:	f000 b813 	b.w	8008acc <_close_r>
	...

08008aa8 <_write_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	; (8008ac8 <_write_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f9 f8bd 	bl	8001c36 <_write>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_write_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_write_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20004994 	.word	0x20004994

08008acc <_close_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d06      	ldr	r5, [pc, #24]	; (8008ae8 <_close_r+0x1c>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	f7f9 f8c9 	bl	8001c6e <_close>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_close_r+0x1a>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_close_r+0x1a>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20004994 	.word	0x20004994

08008aec <quorem>:
 8008aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	6903      	ldr	r3, [r0, #16]
 8008af2:	690c      	ldr	r4, [r1, #16]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	4607      	mov	r7, r0
 8008af8:	f2c0 8081 	blt.w	8008bfe <quorem+0x112>
 8008afc:	3c01      	subs	r4, #1
 8008afe:	f101 0814 	add.w	r8, r1, #20
 8008b02:	f100 0514 	add.w	r5, r0, #20
 8008b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b14:	3301      	adds	r3, #1
 8008b16:	429a      	cmp	r2, r3
 8008b18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b20:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b24:	d331      	bcc.n	8008b8a <quorem+0x9e>
 8008b26:	f04f 0e00 	mov.w	lr, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	46ac      	mov	ip, r5
 8008b2e:	46f2      	mov	sl, lr
 8008b30:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b34:	b293      	uxth	r3, r2
 8008b36:	fb06 e303 	mla	r3, r6, r3, lr
 8008b3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	ebaa 0303 	sub.w	r3, sl, r3
 8008b44:	f8dc a000 	ldr.w	sl, [ip]
 8008b48:	0c12      	lsrs	r2, r2, #16
 8008b4a:	fa13 f38a 	uxtah	r3, r3, sl
 8008b4e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	9b00      	ldr	r3, [sp, #0]
 8008b56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b64:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b68:	4581      	cmp	r9, r0
 8008b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b6e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b76:	d2db      	bcs.n	8008b30 <quorem+0x44>
 8008b78:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b7c:	b92b      	cbnz	r3, 8008b8a <quorem+0x9e>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	429d      	cmp	r5, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	d32e      	bcc.n	8008be6 <quorem+0xfa>
 8008b88:	613c      	str	r4, [r7, #16]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f001 f998 	bl	8009ec0 <__mcmp>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	db24      	blt.n	8008bde <quorem+0xf2>
 8008b94:	3601      	adds	r6, #1
 8008b96:	4628      	mov	r0, r5
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ba4:	b293      	uxth	r3, r2
 8008ba6:	ebac 0303 	sub.w	r3, ip, r3
 8008baa:	0c12      	lsrs	r2, r2, #16
 8008bac:	fa13 f38e 	uxtah	r3, r3, lr
 8008bb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbe:	45c1      	cmp	r9, r8
 8008bc0:	f840 3b04 	str.w	r3, [r0], #4
 8008bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc8:	d2e8      	bcs.n	8008b9c <quorem+0xb0>
 8008bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bd2:	b922      	cbnz	r2, 8008bde <quorem+0xf2>
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	d30a      	bcc.n	8008bf2 <quorem+0x106>
 8008bdc:	613c      	str	r4, [r7, #16]
 8008bde:	4630      	mov	r0, r6
 8008be0:	b003      	add	sp, #12
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	3b04      	subs	r3, #4
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d1cc      	bne.n	8008b88 <quorem+0x9c>
 8008bee:	3c01      	subs	r4, #1
 8008bf0:	e7c7      	b.n	8008b82 <quorem+0x96>
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1f0      	bne.n	8008bdc <quorem+0xf0>
 8008bfa:	3c01      	subs	r4, #1
 8008bfc:	e7eb      	b.n	8008bd6 <quorem+0xea>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e7ee      	b.n	8008be0 <quorem+0xf4>
 8008c02:	0000      	movs	r0, r0
 8008c04:	0000      	movs	r0, r0
	...

08008c08 <_dtoa_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b04 	vpush	{d8-d9}
 8008c10:	ec57 6b10 	vmov	r6, r7, d0
 8008c14:	b093      	sub	sp, #76	; 0x4c
 8008c16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c1c:	9106      	str	r1, [sp, #24]
 8008c1e:	ee10 aa10 	vmov	sl, s0
 8008c22:	4604      	mov	r4, r0
 8008c24:	9209      	str	r2, [sp, #36]	; 0x24
 8008c26:	930c      	str	r3, [sp, #48]	; 0x30
 8008c28:	46bb      	mov	fp, r7
 8008c2a:	b975      	cbnz	r5, 8008c4a <_dtoa_r+0x42>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f000 feb1 	bl	8009994 <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6260      	str	r0, [r4, #36]	; 0x24
 8008c36:	b920      	cbnz	r0, 8008c42 <_dtoa_r+0x3a>
 8008c38:	4ba7      	ldr	r3, [pc, #668]	; (8008ed8 <_dtoa_r+0x2d0>)
 8008c3a:	21ea      	movs	r1, #234	; 0xea
 8008c3c:	48a7      	ldr	r0, [pc, #668]	; (8008edc <_dtoa_r+0x2d4>)
 8008c3e:	f001 fe2b 	bl	800a898 <__assert_func>
 8008c42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c46:	6005      	str	r5, [r0, #0]
 8008c48:	60c5      	str	r5, [r0, #12]
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	b151      	cbz	r1, 8008c66 <_dtoa_r+0x5e>
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	604a      	str	r2, [r1, #4]
 8008c54:	2301      	movs	r3, #1
 8008c56:	4093      	lsls	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 feee 	bl	8009a3c <_Bfree>
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	1e3b      	subs	r3, r7, #0
 8008c68:	bfaa      	itet	ge
 8008c6a:	2300      	movge	r3, #0
 8008c6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c70:	f8c8 3000 	strge.w	r3, [r8]
 8008c74:	4b9a      	ldr	r3, [pc, #616]	; (8008ee0 <_dtoa_r+0x2d8>)
 8008c76:	bfbc      	itt	lt
 8008c78:	2201      	movlt	r2, #1
 8008c7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c7e:	ea33 030b 	bics.w	r3, r3, fp
 8008c82:	d11b      	bne.n	8008cbc <_dtoa_r+0xb4>
 8008c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c90:	4333      	orrs	r3, r6
 8008c92:	f000 8592 	beq.w	80097ba <_dtoa_r+0xbb2>
 8008c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c98:	b963      	cbnz	r3, 8008cb4 <_dtoa_r+0xac>
 8008c9a:	4b92      	ldr	r3, [pc, #584]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008c9c:	e022      	b.n	8008ce4 <_dtoa_r+0xdc>
 8008c9e:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <_dtoa_r+0x2e0>)
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	b013      	add	sp, #76	; 0x4c
 8008cac:	ecbd 8b04 	vpop	{d8-d9}
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	4b8b      	ldr	r3, [pc, #556]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	3303      	adds	r3, #3
 8008cba:	e7f3      	b.n	8008ca4 <_dtoa_r+0x9c>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	f7f7 ff20 	bl	8000b08 <__aeabi_dcmpeq>
 8008cc8:	ec4b ab19 	vmov	d9, sl, fp
 8008ccc:	4680      	mov	r8, r0
 8008cce:	b158      	cbz	r0, 8008ce8 <_dtoa_r+0xe0>
 8008cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 856b 	beq.w	80097b4 <_dtoa_r+0xbac>
 8008cde:	4883      	ldr	r0, [pc, #524]	; (8008eec <_dtoa_r+0x2e4>)
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	1e43      	subs	r3, r0, #1
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	e7df      	b.n	8008ca8 <_dtoa_r+0xa0>
 8008ce8:	ec4b ab10 	vmov	d0, sl, fp
 8008cec:	aa10      	add	r2, sp, #64	; 0x40
 8008cee:	a911      	add	r1, sp, #68	; 0x44
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 f98b 	bl	800a00c <__d2b>
 8008cf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cfa:	ee08 0a10 	vmov	s16, r0
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	f000 8084 	beq.w	8008e0c <_dtoa_r+0x204>
 8008d04:	ee19 3a90 	vmov	r3, s19
 8008d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d10:	4656      	mov	r6, sl
 8008d12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d1e:	4b74      	ldr	r3, [pc, #464]	; (8008ef0 <_dtoa_r+0x2e8>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 facf 	bl	80002c8 <__aeabi_dsub>
 8008d2a:	a365      	add	r3, pc, #404	; (adr r3, 8008ec0 <_dtoa_r+0x2b8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	a364      	add	r3, pc, #400	; (adr r3, 8008ec8 <_dtoa_r+0x2c0>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 fac7 	bl	80002cc <__adddf3>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4628      	mov	r0, r5
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 fc0e 	bl	8000564 <__aeabi_i2d>
 8008d48:	a361      	add	r3, pc, #388	; (adr r3, 8008ed0 <_dtoa_r+0x2c8>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc73 	bl	8000638 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fab7 	bl	80002cc <__adddf3>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	f7f7 ff19 	bl	8000b98 <__aeabi_d2iz>
 8008d66:	2200      	movs	r2, #0
 8008d68:	9000      	str	r0, [sp, #0]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fed4 	bl	8000b1c <__aeabi_dcmplt>
 8008d74:	b150      	cbz	r0, 8008d8c <_dtoa_r+0x184>
 8008d76:	9800      	ldr	r0, [sp, #0]
 8008d78:	f7f7 fbf4 	bl	8000564 <__aeabi_i2d>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fec2 	bl	8000b08 <__aeabi_dcmpeq>
 8008d84:	b910      	cbnz	r0, 8008d8c <_dtoa_r+0x184>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	2b16      	cmp	r3, #22
 8008d90:	d85a      	bhi.n	8008e48 <_dtoa_r+0x240>
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	4b57      	ldr	r3, [pc, #348]	; (8008ef4 <_dtoa_r+0x2ec>)
 8008d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	ec51 0b19 	vmov	r0, r1, d9
 8008da2:	f7f7 febb 	bl	8000b1c <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d050      	beq.n	8008e4c <_dtoa_r+0x244>
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008db6:	1b5d      	subs	r5, r3, r5
 8008db8:	1e6b      	subs	r3, r5, #1
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	bf45      	ittet	mi
 8008dbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dc2:	9304      	strmi	r3, [sp, #16]
 8008dc4:	2300      	movpl	r3, #0
 8008dc6:	2300      	movmi	r3, #0
 8008dc8:	bf4c      	ite	mi
 8008dca:	9305      	strmi	r3, [sp, #20]
 8008dcc:	9304      	strpl	r3, [sp, #16]
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db3d      	blt.n	8008e50 <_dtoa_r+0x248>
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	9a00      	ldr	r2, [sp, #0]
 8008dd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dda:	4413      	add	r3, r2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b09      	cmp	r3, #9
 8008de6:	f200 8089 	bhi.w	8008efc <_dtoa_r+0x2f4>
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	bfc4      	itt	gt
 8008dee:	3b04      	subgt	r3, #4
 8008df0:	9306      	strgt	r3, [sp, #24]
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	f1a3 0302 	sub.w	r3, r3, #2
 8008df8:	bfcc      	ite	gt
 8008dfa:	2500      	movgt	r5, #0
 8008dfc:	2501      	movle	r5, #1
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	f200 8087 	bhi.w	8008f12 <_dtoa_r+0x30a>
 8008e04:	e8df f003 	tbb	[pc, r3]
 8008e08:	59383a2d 	.word	0x59383a2d
 8008e0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e10:	441d      	add	r5, r3
 8008e12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	bfc1      	itttt	gt
 8008e1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e2a:	bfda      	itte	le
 8008e2c:	f1c3 0320 	rsble	r3, r3, #32
 8008e30:	fa06 f003 	lslle.w	r0, r6, r3
 8008e34:	4318      	orrgt	r0, r3
 8008e36:	f7f7 fb85 	bl	8000544 <__aeabi_ui2d>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e42:	3d01      	subs	r5, #1
 8008e44:	930e      	str	r3, [sp, #56]	; 0x38
 8008e46:	e76a      	b.n	8008d1e <_dtoa_r+0x116>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7b2      	b.n	8008db2 <_dtoa_r+0x1aa>
 8008e4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e4e:	e7b1      	b.n	8008db4 <_dtoa_r+0x1ac>
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	9a00      	ldr	r2, [sp, #0]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	4253      	negs	r3, r2
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e60:	e7bf      	b.n	8008de2 <_dtoa_r+0x1da>
 8008e62:	2300      	movs	r3, #0
 8008e64:	9308      	str	r3, [sp, #32]
 8008e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc55      	bgt.n	8008f18 <_dtoa_r+0x310>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e72:	461a      	mov	r2, r3
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	e00c      	b.n	8008e92 <_dtoa_r+0x28a>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7f3      	b.n	8008e64 <_dtoa_r+0x25c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	4413      	add	r3, r2
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	bfb8      	it	lt
 8008e90:	2301      	movlt	r3, #1
 8008e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	6042      	str	r2, [r0, #4]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	f102 0614 	add.w	r6, r2, #20
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	6841      	ldr	r1, [r0, #4]
 8008ea2:	d93d      	bls.n	8008f20 <_dtoa_r+0x318>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f000 fd89 	bl	80099bc <_Balloc>
 8008eaa:	9001      	str	r0, [sp, #4]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d13b      	bne.n	8008f28 <_dtoa_r+0x320>
 8008eb0:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <_dtoa_r+0x2f0>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eb8:	e6c0      	b.n	8008c3c <_dtoa_r+0x34>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7df      	b.n	8008e7e <_dtoa_r+0x276>
 8008ebe:	bf00      	nop
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800ad6d 	.word	0x0800ad6d
 8008edc:	0800ad84 	.word	0x0800ad84
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800ad69 	.word	0x0800ad69
 8008ee8:	0800ad60 	.word	0x0800ad60
 8008eec:	0800ad3d 	.word	0x0800ad3d
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800ae78 	.word	0x0800ae78
 8008ef8:	0800addf 	.word	0x0800addf
 8008efc:	2501      	movs	r5, #1
 8008efe:	2300      	movs	r3, #0
 8008f00:	9306      	str	r3, [sp, #24]
 8008f02:	9508      	str	r5, [sp, #32]
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2312      	movs	r3, #18
 8008f10:	e7b0      	b.n	8008e74 <_dtoa_r+0x26c>
 8008f12:	2301      	movs	r3, #1
 8008f14:	9308      	str	r3, [sp, #32]
 8008f16:	e7f5      	b.n	8008f04 <_dtoa_r+0x2fc>
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f1e:	e7b8      	b.n	8008e92 <_dtoa_r+0x28a>
 8008f20:	3101      	adds	r1, #1
 8008f22:	6041      	str	r1, [r0, #4]
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	e7b8      	b.n	8008e9a <_dtoa_r+0x292>
 8008f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2a:	9a01      	ldr	r2, [sp, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	2b0e      	cmp	r3, #14
 8008f32:	f200 809d 	bhi.w	8009070 <_dtoa_r+0x468>
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	f000 809a 	beq.w	8009070 <_dtoa_r+0x468>
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dd32      	ble.n	8008fa8 <_dtoa_r+0x3a0>
 8008f42:	4ab7      	ldr	r2, [pc, #732]	; (8009220 <_dtoa_r+0x618>)
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f50:	9b00      	ldr	r3, [sp, #0]
 8008f52:	05d8      	lsls	r0, r3, #23
 8008f54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f58:	d516      	bpl.n	8008f88 <_dtoa_r+0x380>
 8008f5a:	4bb2      	ldr	r3, [pc, #712]	; (8009224 <_dtoa_r+0x61c>)
 8008f5c:	ec51 0b19 	vmov	r0, r1, d9
 8008f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f64:	f7f7 fc92 	bl	800088c <__aeabi_ddiv>
 8008f68:	f007 070f 	and.w	r7, r7, #15
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	468b      	mov	fp, r1
 8008f70:	2503      	movs	r5, #3
 8008f72:	4eac      	ldr	r6, [pc, #688]	; (8009224 <_dtoa_r+0x61c>)
 8008f74:	b957      	cbnz	r7, 8008f8c <_dtoa_r+0x384>
 8008f76:	4642      	mov	r2, r8
 8008f78:	464b      	mov	r3, r9
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	f7f7 fc85 	bl	800088c <__aeabi_ddiv>
 8008f82:	4682      	mov	sl, r0
 8008f84:	468b      	mov	fp, r1
 8008f86:	e028      	b.n	8008fda <_dtoa_r+0x3d2>
 8008f88:	2502      	movs	r5, #2
 8008f8a:	e7f2      	b.n	8008f72 <_dtoa_r+0x36a>
 8008f8c:	07f9      	lsls	r1, r7, #31
 8008f8e:	d508      	bpl.n	8008fa2 <_dtoa_r+0x39a>
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f98:	f7f7 fb4e 	bl	8000638 <__aeabi_dmul>
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4689      	mov	r9, r1
 8008fa2:	107f      	asrs	r7, r7, #1
 8008fa4:	3608      	adds	r6, #8
 8008fa6:	e7e5      	b.n	8008f74 <_dtoa_r+0x36c>
 8008fa8:	f000 809b 	beq.w	80090e2 <_dtoa_r+0x4da>
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	4f9d      	ldr	r7, [pc, #628]	; (8009224 <_dtoa_r+0x61c>)
 8008fb0:	425e      	negs	r6, r3
 8008fb2:	4b9b      	ldr	r3, [pc, #620]	; (8009220 <_dtoa_r+0x618>)
 8008fb4:	f006 020f 	and.w	r2, r6, #15
 8008fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	ec51 0b19 	vmov	r0, r1, d9
 8008fc4:	f7f7 fb38 	bl	8000638 <__aeabi_dmul>
 8008fc8:	1136      	asrs	r6, r6, #4
 8008fca:	4682      	mov	sl, r0
 8008fcc:	468b      	mov	fp, r1
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2502      	movs	r5, #2
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d17a      	bne.n	80090cc <_dtoa_r+0x4c4>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1d3      	bne.n	8008f82 <_dtoa_r+0x37a>
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8082 	beq.w	80090e6 <_dtoa_r+0x4de>
 8008fe2:	4b91      	ldr	r3, [pc, #580]	; (8009228 <_dtoa_r+0x620>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	f7f7 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d079      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d076      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd36      	ble.n	800906c <_dtoa_r+0x464>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	4650      	mov	r0, sl
 8009002:	4659      	mov	r1, fp
 8009004:	1e5f      	subs	r7, r3, #1
 8009006:	2200      	movs	r2, #0
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <_dtoa_r+0x624>)
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	9e02      	ldr	r6, [sp, #8]
 8009010:	4682      	mov	sl, r0
 8009012:	468b      	mov	fp, r1
 8009014:	3501      	adds	r5, #1
 8009016:	4628      	mov	r0, r5
 8009018:	f7f7 faa4 	bl	8000564 <__aeabi_i2d>
 800901c:	4652      	mov	r2, sl
 800901e:	465b      	mov	r3, fp
 8009020:	f7f7 fb0a 	bl	8000638 <__aeabi_dmul>
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <_dtoa_r+0x628>)
 8009026:	2200      	movs	r2, #0
 8009028:	f7f7 f950 	bl	80002cc <__adddf3>
 800902c:	46d0      	mov	r8, sl
 800902e:	46d9      	mov	r9, fp
 8009030:	4682      	mov	sl, r0
 8009032:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009036:	2e00      	cmp	r6, #0
 8009038:	d158      	bne.n	80090ec <_dtoa_r+0x4e4>
 800903a:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <_dtoa_r+0x62c>)
 800903c:	2200      	movs	r2, #0
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 f941 	bl	80002c8 <__aeabi_dsub>
 8009046:	4652      	mov	r2, sl
 8009048:	465b      	mov	r3, fp
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	f7f7 fd83 	bl	8000b58 <__aeabi_dcmpgt>
 8009052:	2800      	cmp	r0, #0
 8009054:	f040 8295 	bne.w	8009582 <_dtoa_r+0x97a>
 8009058:	4652      	mov	r2, sl
 800905a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fd5b 	bl	8000b1c <__aeabi_dcmplt>
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8289 	bne.w	800957e <_dtoa_r+0x976>
 800906c:	ec5b ab19 	vmov	sl, fp, d9
 8009070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009072:	2b00      	cmp	r3, #0
 8009074:	f2c0 8148 	blt.w	8009308 <_dtoa_r+0x700>
 8009078:	9a00      	ldr	r2, [sp, #0]
 800907a:	2a0e      	cmp	r2, #14
 800907c:	f300 8144 	bgt.w	8009308 <_dtoa_r+0x700>
 8009080:	4b67      	ldr	r3, [pc, #412]	; (8009220 <_dtoa_r+0x618>)
 8009082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800908a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	f280 80d5 	bge.w	800923c <_dtoa_r+0x634>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f300 80d1 	bgt.w	800923c <_dtoa_r+0x634>
 800909a:	f040 826f 	bne.w	800957c <_dtoa_r+0x974>
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <_dtoa_r+0x62c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4640      	mov	r0, r8
 80090a4:	4649      	mov	r1, r9
 80090a6:	f7f7 fac7 	bl	8000638 <__aeabi_dmul>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 fd49 	bl	8000b44 <__aeabi_dcmpge>
 80090b2:	9e03      	ldr	r6, [sp, #12]
 80090b4:	4637      	mov	r7, r6
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f040 8245 	bne.w	8009546 <_dtoa_r+0x93e>
 80090bc:	9d01      	ldr	r5, [sp, #4]
 80090be:	2331      	movs	r3, #49	; 0x31
 80090c0:	f805 3b01 	strb.w	r3, [r5], #1
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	e240      	b.n	800954e <_dtoa_r+0x946>
 80090cc:	07f2      	lsls	r2, r6, #31
 80090ce:	d505      	bpl.n	80090dc <_dtoa_r+0x4d4>
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	f7f7 fab0 	bl	8000638 <__aeabi_dmul>
 80090d8:	3501      	adds	r5, #1
 80090da:	2301      	movs	r3, #1
 80090dc:	1076      	asrs	r6, r6, #1
 80090de:	3708      	adds	r7, #8
 80090e0:	e777      	b.n	8008fd2 <_dtoa_r+0x3ca>
 80090e2:	2502      	movs	r5, #2
 80090e4:	e779      	b.n	8008fda <_dtoa_r+0x3d2>
 80090e6:	9f00      	ldr	r7, [sp, #0]
 80090e8:	9e03      	ldr	r6, [sp, #12]
 80090ea:	e794      	b.n	8009016 <_dtoa_r+0x40e>
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	4b4c      	ldr	r3, [pc, #304]	; (8009220 <_dtoa_r+0x618>)
 80090f0:	4431      	add	r1, r6
 80090f2:	910d      	str	r1, [sp, #52]	; 0x34
 80090f4:	9908      	ldr	r1, [sp, #32]
 80090f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090fe:	2900      	cmp	r1, #0
 8009100:	d043      	beq.n	800918a <_dtoa_r+0x582>
 8009102:	494d      	ldr	r1, [pc, #308]	; (8009238 <_dtoa_r+0x630>)
 8009104:	2000      	movs	r0, #0
 8009106:	f7f7 fbc1 	bl	800088c <__aeabi_ddiv>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	f7f7 f8db 	bl	80002c8 <__aeabi_dsub>
 8009112:	9d01      	ldr	r5, [sp, #4]
 8009114:	4682      	mov	sl, r0
 8009116:	468b      	mov	fp, r1
 8009118:	4649      	mov	r1, r9
 800911a:	4640      	mov	r0, r8
 800911c:	f7f7 fd3c 	bl	8000b98 <__aeabi_d2iz>
 8009120:	4606      	mov	r6, r0
 8009122:	f7f7 fa1f 	bl	8000564 <__aeabi_i2d>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f8cb 	bl	80002c8 <__aeabi_dsub>
 8009132:	3630      	adds	r6, #48	; 0x30
 8009134:	f805 6b01 	strb.w	r6, [r5], #1
 8009138:	4652      	mov	r2, sl
 800913a:	465b      	mov	r3, fp
 800913c:	4680      	mov	r8, r0
 800913e:	4689      	mov	r9, r1
 8009140:	f7f7 fcec 	bl	8000b1c <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	d163      	bne.n	8009210 <_dtoa_r+0x608>
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	4936      	ldr	r1, [pc, #216]	; (8009228 <_dtoa_r+0x620>)
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 f8ba 	bl	80002c8 <__aeabi_dsub>
 8009154:	4652      	mov	r2, sl
 8009156:	465b      	mov	r3, fp
 8009158:	f7f7 fce0 	bl	8000b1c <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f040 80b5 	bne.w	80092cc <_dtoa_r+0x6c4>
 8009162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009164:	429d      	cmp	r5, r3
 8009166:	d081      	beq.n	800906c <_dtoa_r+0x464>
 8009168:	4b30      	ldr	r3, [pc, #192]	; (800922c <_dtoa_r+0x624>)
 800916a:	2200      	movs	r2, #0
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	f7f7 fa62 	bl	8000638 <__aeabi_dmul>
 8009174:	4b2d      	ldr	r3, [pc, #180]	; (800922c <_dtoa_r+0x624>)
 8009176:	4682      	mov	sl, r0
 8009178:	468b      	mov	fp, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	2200      	movs	r2, #0
 8009180:	f7f7 fa5a 	bl	8000638 <__aeabi_dmul>
 8009184:	4680      	mov	r8, r0
 8009186:	4689      	mov	r9, r1
 8009188:	e7c6      	b.n	8009118 <_dtoa_r+0x510>
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 fa53 	bl	8000638 <__aeabi_dmul>
 8009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	930f      	str	r3, [sp, #60]	; 0x3c
 8009198:	4682      	mov	sl, r0
 800919a:	468b      	mov	fp, r1
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	f7f7 fcfa 	bl	8000b98 <__aeabi_d2iz>
 80091a4:	4606      	mov	r6, r0
 80091a6:	f7f7 f9dd 	bl	8000564 <__aeabi_i2d>
 80091aa:	3630      	adds	r6, #48	; 0x30
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 f888 	bl	80002c8 <__aeabi_dsub>
 80091b8:	f805 6b01 	strb.w	r6, [r5], #1
 80091bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091be:	429d      	cmp	r5, r3
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	d124      	bne.n	8009214 <_dtoa_r+0x60c>
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <_dtoa_r+0x630>)
 80091cc:	4650      	mov	r0, sl
 80091ce:	4659      	mov	r1, fp
 80091d0:	f7f7 f87c 	bl	80002cc <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	f7f7 fcbc 	bl	8000b58 <__aeabi_dcmpgt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d173      	bne.n	80092cc <_dtoa_r+0x6c4>
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	4913      	ldr	r1, [pc, #76]	; (8009238 <_dtoa_r+0x630>)
 80091ea:	2000      	movs	r0, #0
 80091ec:	f7f7 f86c 	bl	80002c8 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	f7f7 fc90 	bl	8000b1c <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f af35 	beq.w	800906c <_dtoa_r+0x464>
 8009202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009204:	1e6b      	subs	r3, r5, #1
 8009206:	930f      	str	r3, [sp, #60]	; 0x3c
 8009208:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800920c:	2b30      	cmp	r3, #48	; 0x30
 800920e:	d0f8      	beq.n	8009202 <_dtoa_r+0x5fa>
 8009210:	9700      	str	r7, [sp, #0]
 8009212:	e049      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <_dtoa_r+0x624>)
 8009216:	f7f7 fa0f 	bl	8000638 <__aeabi_dmul>
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	e7bd      	b.n	800919c <_dtoa_r+0x594>
 8009220:	0800ae78 	.word	0x0800ae78
 8009224:	0800ae50 	.word	0x0800ae50
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	40240000 	.word	0x40240000
 8009230:	401c0000 	.word	0x401c0000
 8009234:	40140000 	.word	0x40140000
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	9d01      	ldr	r5, [sp, #4]
 800923e:	4656      	mov	r6, sl
 8009240:	465f      	mov	r7, fp
 8009242:	4642      	mov	r2, r8
 8009244:	464b      	mov	r3, r9
 8009246:	4630      	mov	r0, r6
 8009248:	4639      	mov	r1, r7
 800924a:	f7f7 fb1f 	bl	800088c <__aeabi_ddiv>
 800924e:	f7f7 fca3 	bl	8000b98 <__aeabi_d2iz>
 8009252:	4682      	mov	sl, r0
 8009254:	f7f7 f986 	bl	8000564 <__aeabi_i2d>
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	f7f7 f9ec 	bl	8000638 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800926c:	f7f7 f82c 	bl	80002c8 <__aeabi_dsub>
 8009270:	f805 6b01 	strb.w	r6, [r5], #1
 8009274:	9e01      	ldr	r6, [sp, #4]
 8009276:	9f03      	ldr	r7, [sp, #12]
 8009278:	1bae      	subs	r6, r5, r6
 800927a:	42b7      	cmp	r7, r6
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	d135      	bne.n	80092ee <_dtoa_r+0x6e6>
 8009282:	f7f7 f823 	bl	80002cc <__adddf3>
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	f7f7 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 8009292:	b9d0      	cbnz	r0, 80092ca <_dtoa_r+0x6c2>
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fc34 	bl	8000b08 <__aeabi_dcmpeq>
 80092a0:	b110      	cbz	r0, 80092a8 <_dtoa_r+0x6a0>
 80092a2:	f01a 0f01 	tst.w	sl, #1
 80092a6:	d110      	bne.n	80092ca <_dtoa_r+0x6c2>
 80092a8:	4620      	mov	r0, r4
 80092aa:	ee18 1a10 	vmov	r1, s16
 80092ae:	f000 fbc5 	bl	8009a3c <_Bfree>
 80092b2:	2300      	movs	r3, #0
 80092b4:	9800      	ldr	r0, [sp, #0]
 80092b6:	702b      	strb	r3, [r5, #0]
 80092b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ba:	3001      	adds	r0, #1
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f43f acf1 	beq.w	8008ca8 <_dtoa_r+0xa0>
 80092c6:	601d      	str	r5, [r3, #0]
 80092c8:	e4ee      	b.n	8008ca8 <_dtoa_r+0xa0>
 80092ca:	9f00      	ldr	r7, [sp, #0]
 80092cc:	462b      	mov	r3, r5
 80092ce:	461d      	mov	r5, r3
 80092d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d4:	2a39      	cmp	r2, #57	; 0x39
 80092d6:	d106      	bne.n	80092e6 <_dtoa_r+0x6de>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d1f7      	bne.n	80092ce <_dtoa_r+0x6c6>
 80092de:	9901      	ldr	r1, [sp, #4]
 80092e0:	2230      	movs	r2, #48	; 0x30
 80092e2:	3701      	adds	r7, #1
 80092e4:	700a      	strb	r2, [r1, #0]
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	3201      	adds	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e790      	b.n	8009210 <_dtoa_r+0x608>
 80092ee:	4ba6      	ldr	r3, [pc, #664]	; (8009588 <_dtoa_r+0x980>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f9a1 	bl	8000638 <__aeabi_dmul>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	f7f7 fc03 	bl	8000b08 <__aeabi_dcmpeq>
 8009302:	2800      	cmp	r0, #0
 8009304:	d09d      	beq.n	8009242 <_dtoa_r+0x63a>
 8009306:	e7cf      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 80d7 	beq.w	80094be <_dtoa_r+0x8b6>
 8009310:	9a06      	ldr	r2, [sp, #24]
 8009312:	2a01      	cmp	r2, #1
 8009314:	f300 80ba 	bgt.w	800948c <_dtoa_r+0x884>
 8009318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800931a:	2a00      	cmp	r2, #0
 800931c:	f000 80b2 	beq.w	8009484 <_dtoa_r+0x87c>
 8009320:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009324:	9e07      	ldr	r6, [sp, #28]
 8009326:	9d04      	ldr	r5, [sp, #16]
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	441a      	add	r2, r3
 800932c:	9204      	str	r2, [sp, #16]
 800932e:	9a05      	ldr	r2, [sp, #20]
 8009330:	2101      	movs	r1, #1
 8009332:	441a      	add	r2, r3
 8009334:	4620      	mov	r0, r4
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	f000 fc38 	bl	8009bac <__i2b>
 800933c:	4607      	mov	r7, r0
 800933e:	2d00      	cmp	r5, #0
 8009340:	dd0c      	ble.n	800935c <_dtoa_r+0x754>
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd09      	ble.n	800935c <_dtoa_r+0x754>
 8009348:	42ab      	cmp	r3, r5
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	bfa8      	it	ge
 800934e:	462b      	movge	r3, r5
 8009350:	1ad2      	subs	r2, r2, r3
 8009352:	9204      	str	r2, [sp, #16]
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	1aed      	subs	r5, r5, r3
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	b31b      	cbz	r3, 80093a8 <_dtoa_r+0x7a0>
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80af 	beq.w	80094c6 <_dtoa_r+0x8be>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd13      	ble.n	8009394 <_dtoa_r+0x78c>
 800936c:	4639      	mov	r1, r7
 800936e:	4632      	mov	r2, r6
 8009370:	4620      	mov	r0, r4
 8009372:	f000 fcdb 	bl	8009d2c <__pow5mult>
 8009376:	ee18 2a10 	vmov	r2, s16
 800937a:	4601      	mov	r1, r0
 800937c:	4607      	mov	r7, r0
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fc2a 	bl	8009bd8 <__multiply>
 8009384:	ee18 1a10 	vmov	r1, s16
 8009388:	4680      	mov	r8, r0
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fb56 	bl	8009a3c <_Bfree>
 8009390:	ee08 8a10 	vmov	s16, r8
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	1b9a      	subs	r2, r3, r6
 8009398:	d006      	beq.n	80093a8 <_dtoa_r+0x7a0>
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fcc4 	bl	8009d2c <__pow5mult>
 80093a4:	ee08 0a10 	vmov	s16, r0
 80093a8:	2101      	movs	r1, #1
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fbfe 	bl	8009bac <__i2b>
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	4606      	mov	r6, r0
 80093b6:	f340 8088 	ble.w	80094ca <_dtoa_r+0x8c2>
 80093ba:	461a      	mov	r2, r3
 80093bc:	4601      	mov	r1, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fcb4 	bl	8009d2c <__pow5mult>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	4606      	mov	r6, r0
 80093ca:	f340 8081 	ble.w	80094d0 <_dtoa_r+0x8c8>
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	6933      	ldr	r3, [r6, #16]
 80093d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d8:	6918      	ldr	r0, [r3, #16]
 80093da:	f000 fb97 	bl	8009b0c <__hi0bits>
 80093de:	f1c0 0020 	rsb	r0, r0, #32
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	4418      	add	r0, r3
 80093e6:	f010 001f 	ands.w	r0, r0, #31
 80093ea:	f000 8092 	beq.w	8009512 <_dtoa_r+0x90a>
 80093ee:	f1c0 0320 	rsb	r3, r0, #32
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	f340 808a 	ble.w	800950c <_dtoa_r+0x904>
 80093f8:	f1c0 001c 	rsb	r0, r0, #28
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	4403      	add	r3, r0
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	4403      	add	r3, r0
 8009406:	4405      	add	r5, r0
 8009408:	9305      	str	r3, [sp, #20]
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd07      	ble.n	8009420 <_dtoa_r+0x818>
 8009410:	ee18 1a10 	vmov	r1, s16
 8009414:	461a      	mov	r2, r3
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fce2 	bl	8009de0 <__lshift>
 800941c:	ee08 0a10 	vmov	s16, r0
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0x82a>
 8009426:	4631      	mov	r1, r6
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f000 fcd8 	bl	8009de0 <__lshift>
 8009430:	4606      	mov	r6, r0
 8009432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d06e      	beq.n	8009516 <_dtoa_r+0x90e>
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	4631      	mov	r1, r6
 800943e:	f000 fd3f 	bl	8009ec0 <__mcmp>
 8009442:	2800      	cmp	r0, #0
 8009444:	da67      	bge.n	8009516 <_dtoa_r+0x90e>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	ee18 1a10 	vmov	r1, s16
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	220a      	movs	r2, #10
 8009452:	2300      	movs	r3, #0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fb13 	bl	8009a80 <__multadd>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	ee08 0a10 	vmov	s16, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 81b1 	beq.w	80097c8 <_dtoa_r+0xbc0>
 8009466:	2300      	movs	r3, #0
 8009468:	4639      	mov	r1, r7
 800946a:	220a      	movs	r2, #10
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fb07 	bl	8009a80 <__multadd>
 8009472:	9b02      	ldr	r3, [sp, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	4607      	mov	r7, r0
 8009478:	f300 808e 	bgt.w	8009598 <_dtoa_r+0x990>
 800947c:	9b06      	ldr	r3, [sp, #24]
 800947e:	2b02      	cmp	r3, #2
 8009480:	dc51      	bgt.n	8009526 <_dtoa_r+0x91e>
 8009482:	e089      	b.n	8009598 <_dtoa_r+0x990>
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800948a:	e74b      	b.n	8009324 <_dtoa_r+0x71c>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1e5e      	subs	r6, r3, #1
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	42b3      	cmp	r3, r6
 8009494:	bfbf      	itttt	lt
 8009496:	9b07      	ldrlt	r3, [sp, #28]
 8009498:	9607      	strlt	r6, [sp, #28]
 800949a:	1af2      	sublt	r2, r6, r3
 800949c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800949e:	bfb6      	itet	lt
 80094a0:	189b      	addlt	r3, r3, r2
 80094a2:	1b9e      	subge	r6, r3, r6
 80094a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	bfb8      	it	lt
 80094aa:	2600      	movlt	r6, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfb7      	itett	lt
 80094b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094b8:	1a9d      	sublt	r5, r3, r2
 80094ba:	2300      	movlt	r3, #0
 80094bc:	e734      	b.n	8009328 <_dtoa_r+0x720>
 80094be:	9e07      	ldr	r6, [sp, #28]
 80094c0:	9d04      	ldr	r5, [sp, #16]
 80094c2:	9f08      	ldr	r7, [sp, #32]
 80094c4:	e73b      	b.n	800933e <_dtoa_r+0x736>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	e767      	b.n	800939a <_dtoa_r+0x792>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	dc18      	bgt.n	8009502 <_dtoa_r+0x8fa>
 80094d0:	f1ba 0f00 	cmp.w	sl, #0
 80094d4:	d115      	bne.n	8009502 <_dtoa_r+0x8fa>
 80094d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094da:	b993      	cbnz	r3, 8009502 <_dtoa_r+0x8fa>
 80094dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094e0:	0d1b      	lsrs	r3, r3, #20
 80094e2:	051b      	lsls	r3, r3, #20
 80094e4:	b183      	cbz	r3, 8009508 <_dtoa_r+0x900>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9b05      	ldr	r3, [sp, #20]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	f04f 0801 	mov.w	r8, #1
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f af6a 	bne.w	80093d2 <_dtoa_r+0x7ca>
 80094fe:	2001      	movs	r0, #1
 8009500:	e76f      	b.n	80093e2 <_dtoa_r+0x7da>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	e7f6      	b.n	80094f6 <_dtoa_r+0x8ee>
 8009508:	4698      	mov	r8, r3
 800950a:	e7f4      	b.n	80094f6 <_dtoa_r+0x8ee>
 800950c:	f43f af7d 	beq.w	800940a <_dtoa_r+0x802>
 8009510:	4618      	mov	r0, r3
 8009512:	301c      	adds	r0, #28
 8009514:	e772      	b.n	80093fc <_dtoa_r+0x7f4>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc37      	bgt.n	800958c <_dtoa_r+0x984>
 800951c:	9b06      	ldr	r3, [sp, #24]
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd34      	ble.n	800958c <_dtoa_r+0x984>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	b96b      	cbnz	r3, 8009546 <_dtoa_r+0x93e>
 800952a:	4631      	mov	r1, r6
 800952c:	2205      	movs	r2, #5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 faa6 	bl	8009a80 <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4606      	mov	r6, r0
 8009538:	ee18 0a10 	vmov	r0, s16
 800953c:	f000 fcc0 	bl	8009ec0 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	f73f adbb 	bgt.w	80090bc <_dtoa_r+0x4b4>
 8009546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009548:	9d01      	ldr	r5, [sp, #4]
 800954a:	43db      	mvns	r3, r3
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	4631      	mov	r1, r6
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fa71 	bl	8009a3c <_Bfree>
 800955a:	2f00      	cmp	r7, #0
 800955c:	f43f aea4 	beq.w	80092a8 <_dtoa_r+0x6a0>
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d005      	beq.n	8009572 <_dtoa_r+0x96a>
 8009566:	45b8      	cmp	r8, r7
 8009568:	d003      	beq.n	8009572 <_dtoa_r+0x96a>
 800956a:	4641      	mov	r1, r8
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fa65 	bl	8009a3c <_Bfree>
 8009572:	4639      	mov	r1, r7
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fa61 	bl	8009a3c <_Bfree>
 800957a:	e695      	b.n	80092a8 <_dtoa_r+0x6a0>
 800957c:	2600      	movs	r6, #0
 800957e:	4637      	mov	r7, r6
 8009580:	e7e1      	b.n	8009546 <_dtoa_r+0x93e>
 8009582:	9700      	str	r7, [sp, #0]
 8009584:	4637      	mov	r7, r6
 8009586:	e599      	b.n	80090bc <_dtoa_r+0x4b4>
 8009588:	40240000 	.word	0x40240000
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80ca 	beq.w	8009728 <_dtoa_r+0xb20>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	2d00      	cmp	r5, #0
 800959a:	dd05      	ble.n	80095a8 <_dtoa_r+0x9a0>
 800959c:	4639      	mov	r1, r7
 800959e:	462a      	mov	r2, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 fc1d 	bl	8009de0 <__lshift>
 80095a6:	4607      	mov	r7, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d05b      	beq.n	8009666 <_dtoa_r+0xa5e>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fa03 	bl	80099bc <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <_dtoa_r+0x9be>
 80095ba:	4b87      	ldr	r3, [pc, #540]	; (80097d8 <_dtoa_r+0xbd0>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095c2:	f7ff bb3b 	b.w	8008c3c <_dtoa_r+0x34>
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7fe fc5e 	bl	8007e92 <memcpy>
 80095d6:	2201      	movs	r2, #1
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fc00 	bl	8009de0 <__lshift>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	f103 0901 	add.w	r9, r3, #1
 80095e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095ea:	4413      	add	r3, r2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f00a 0301 	and.w	r3, sl, #1
 80095f2:	46b8      	mov	r8, r7
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	4607      	mov	r7, r0
 80095f8:	4631      	mov	r1, r6
 80095fa:	ee18 0a10 	vmov	r0, s16
 80095fe:	f7ff fa75 	bl	8008aec <quorem>
 8009602:	4641      	mov	r1, r8
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800960a:	ee18 0a10 	vmov	r0, s16
 800960e:	f000 fc57 	bl	8009ec0 <__mcmp>
 8009612:	463a      	mov	r2, r7
 8009614:	9003      	str	r0, [sp, #12]
 8009616:	4631      	mov	r1, r6
 8009618:	4620      	mov	r0, r4
 800961a:	f000 fc6d 	bl	8009ef8 <__mdiff>
 800961e:	68c2      	ldr	r2, [r0, #12]
 8009620:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009624:	4605      	mov	r5, r0
 8009626:	bb02      	cbnz	r2, 800966a <_dtoa_r+0xa62>
 8009628:	4601      	mov	r1, r0
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	f000 fc47 	bl	8009ec0 <__mcmp>
 8009632:	4602      	mov	r2, r0
 8009634:	4629      	mov	r1, r5
 8009636:	4620      	mov	r0, r4
 8009638:	9207      	str	r2, [sp, #28]
 800963a:	f000 f9ff 	bl	8009a3c <_Bfree>
 800963e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	430b      	orrs	r3, r1
 800964a:	464d      	mov	r5, r9
 800964c:	d10f      	bne.n	800966e <_dtoa_r+0xa66>
 800964e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009652:	d02a      	beq.n	80096aa <_dtoa_r+0xaa2>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd02      	ble.n	8009660 <_dtoa_r+0xa58>
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009660:	f88b a000 	strb.w	sl, [fp]
 8009664:	e775      	b.n	8009552 <_dtoa_r+0x94a>
 8009666:	4638      	mov	r0, r7
 8009668:	e7ba      	b.n	80095e0 <_dtoa_r+0x9d8>
 800966a:	2201      	movs	r2, #1
 800966c:	e7e2      	b.n	8009634 <_dtoa_r+0xa2c>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db04      	blt.n	800967e <_dtoa_r+0xa76>
 8009674:	9906      	ldr	r1, [sp, #24]
 8009676:	430b      	orrs	r3, r1
 8009678:	9904      	ldr	r1, [sp, #16]
 800967a:	430b      	orrs	r3, r1
 800967c:	d122      	bne.n	80096c4 <_dtoa_r+0xabc>
 800967e:	2a00      	cmp	r2, #0
 8009680:	ddee      	ble.n	8009660 <_dtoa_r+0xa58>
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	2201      	movs	r2, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fba9 	bl	8009de0 <__lshift>
 800968e:	4631      	mov	r1, r6
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	f000 fc14 	bl	8009ec0 <__mcmp>
 8009698:	2800      	cmp	r0, #0
 800969a:	dc03      	bgt.n	80096a4 <_dtoa_r+0xa9c>
 800969c:	d1e0      	bne.n	8009660 <_dtoa_r+0xa58>
 800969e:	f01a 0f01 	tst.w	sl, #1
 80096a2:	d0dd      	beq.n	8009660 <_dtoa_r+0xa58>
 80096a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a8:	d1d7      	bne.n	800965a <_dtoa_r+0xa52>
 80096aa:	2339      	movs	r3, #57	; 0x39
 80096ac:	f88b 3000 	strb.w	r3, [fp]
 80096b0:	462b      	mov	r3, r5
 80096b2:	461d      	mov	r5, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096ba:	2a39      	cmp	r2, #57	; 0x39
 80096bc:	d071      	beq.n	80097a2 <_dtoa_r+0xb9a>
 80096be:	3201      	adds	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e746      	b.n	8009552 <_dtoa_r+0x94a>
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	dd07      	ble.n	80096d8 <_dtoa_r+0xad0>
 80096c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096cc:	d0ed      	beq.n	80096aa <_dtoa_r+0xaa2>
 80096ce:	f10a 0301 	add.w	r3, sl, #1
 80096d2:	f88b 3000 	strb.w	r3, [fp]
 80096d6:	e73c      	b.n	8009552 <_dtoa_r+0x94a>
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096de:	4599      	cmp	r9, r3
 80096e0:	d047      	beq.n	8009772 <_dtoa_r+0xb6a>
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	2300      	movs	r3, #0
 80096e8:	220a      	movs	r2, #10
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f9c8 	bl	8009a80 <__multadd>
 80096f0:	45b8      	cmp	r8, r7
 80096f2:	ee08 0a10 	vmov	s16, r0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	f04f 020a 	mov.w	r2, #10
 80096fe:	4641      	mov	r1, r8
 8009700:	4620      	mov	r0, r4
 8009702:	d106      	bne.n	8009712 <_dtoa_r+0xb0a>
 8009704:	f000 f9bc 	bl	8009a80 <__multadd>
 8009708:	4680      	mov	r8, r0
 800970a:	4607      	mov	r7, r0
 800970c:	f109 0901 	add.w	r9, r9, #1
 8009710:	e772      	b.n	80095f8 <_dtoa_r+0x9f0>
 8009712:	f000 f9b5 	bl	8009a80 <__multadd>
 8009716:	4639      	mov	r1, r7
 8009718:	4680      	mov	r8, r0
 800971a:	2300      	movs	r3, #0
 800971c:	220a      	movs	r2, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f9ae 	bl	8009a80 <__multadd>
 8009724:	4607      	mov	r7, r0
 8009726:	e7f1      	b.n	800970c <_dtoa_r+0xb04>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	9d01      	ldr	r5, [sp, #4]
 800972e:	ee18 0a10 	vmov	r0, s16
 8009732:	4631      	mov	r1, r6
 8009734:	f7ff f9da 	bl	8008aec <quorem>
 8009738:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	f805 ab01 	strb.w	sl, [r5], #1
 8009742:	1aea      	subs	r2, r5, r3
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	4293      	cmp	r3, r2
 8009748:	dd09      	ble.n	800975e <_dtoa_r+0xb56>
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	2300      	movs	r3, #0
 8009750:	220a      	movs	r2, #10
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f994 	bl	8009a80 <__multadd>
 8009758:	ee08 0a10 	vmov	s16, r0
 800975c:	e7e7      	b.n	800972e <_dtoa_r+0xb26>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfc8      	it	gt
 8009764:	461d      	movgt	r5, r3
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	bfd8      	it	le
 800976a:	2501      	movle	r5, #1
 800976c:	441d      	add	r5, r3
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	2201      	movs	r2, #1
 8009778:	4620      	mov	r0, r4
 800977a:	f000 fb31 	bl	8009de0 <__lshift>
 800977e:	4631      	mov	r1, r6
 8009780:	ee08 0a10 	vmov	s16, r0
 8009784:	f000 fb9c 	bl	8009ec0 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	dc91      	bgt.n	80096b0 <_dtoa_r+0xaa8>
 800978c:	d102      	bne.n	8009794 <_dtoa_r+0xb8c>
 800978e:	f01a 0f01 	tst.w	sl, #1
 8009792:	d18d      	bne.n	80096b0 <_dtoa_r+0xaa8>
 8009794:	462b      	mov	r3, r5
 8009796:	461d      	mov	r5, r3
 8009798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979c:	2a30      	cmp	r2, #48	; 0x30
 800979e:	d0fa      	beq.n	8009796 <_dtoa_r+0xb8e>
 80097a0:	e6d7      	b.n	8009552 <_dtoa_r+0x94a>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d184      	bne.n	80096b2 <_dtoa_r+0xaaa>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2331      	movs	r3, #49	; 0x31
 80097b0:	7013      	strb	r3, [r2, #0]
 80097b2:	e6ce      	b.n	8009552 <_dtoa_r+0x94a>
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <_dtoa_r+0xbd4>)
 80097b6:	f7ff ba95 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f aa6e 	bne.w	8008c9e <_dtoa_r+0x96>
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <_dtoa_r+0xbd8>)
 80097c4:	f7ff ba8e 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dcae      	bgt.n	800972c <_dtoa_r+0xb24>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f73f aea8 	bgt.w	8009526 <_dtoa_r+0x91e>
 80097d6:	e7a9      	b.n	800972c <_dtoa_r+0xb24>
 80097d8:	0800addf 	.word	0x0800addf
 80097dc:	0800ad3c 	.word	0x0800ad3c
 80097e0:	0800ad60 	.word	0x0800ad60

080097e4 <__sflush_r>:
 80097e4:	898a      	ldrh	r2, [r1, #12]
 80097e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	0710      	lsls	r0, r2, #28
 80097ee:	460c      	mov	r4, r1
 80097f0:	d458      	bmi.n	80098a4 <__sflush_r+0xc0>
 80097f2:	684b      	ldr	r3, [r1, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dc05      	bgt.n	8009804 <__sflush_r+0x20>
 80097f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dc02      	bgt.n	8009804 <__sflush_r+0x20>
 80097fe:	2000      	movs	r0, #0
 8009800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009806:	2e00      	cmp	r6, #0
 8009808:	d0f9      	beq.n	80097fe <__sflush_r+0x1a>
 800980a:	2300      	movs	r3, #0
 800980c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009810:	682f      	ldr	r7, [r5, #0]
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	d032      	beq.n	800987c <__sflush_r+0x98>
 8009816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	075a      	lsls	r2, r3, #29
 800981c:	d505      	bpl.n	800982a <__sflush_r+0x46>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009824:	b10b      	cbz	r3, 800982a <__sflush_r+0x46>
 8009826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	2300      	movs	r3, #0
 800982c:	4602      	mov	r2, r0
 800982e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009830:	6a21      	ldr	r1, [r4, #32]
 8009832:	4628      	mov	r0, r5
 8009834:	47b0      	blx	r6
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	d106      	bne.n	800984a <__sflush_r+0x66>
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	291d      	cmp	r1, #29
 8009840:	d82c      	bhi.n	800989c <__sflush_r+0xb8>
 8009842:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <__sflush_r+0x108>)
 8009844:	40ca      	lsrs	r2, r1
 8009846:	07d6      	lsls	r6, r2, #31
 8009848:	d528      	bpl.n	800989c <__sflush_r+0xb8>
 800984a:	2200      	movs	r2, #0
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	04d9      	lsls	r1, r3, #19
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	d504      	bpl.n	8009860 <__sflush_r+0x7c>
 8009856:	1c42      	adds	r2, r0, #1
 8009858:	d101      	bne.n	800985e <__sflush_r+0x7a>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b903      	cbnz	r3, 8009860 <__sflush_r+0x7c>
 800985e:	6560      	str	r0, [r4, #84]	; 0x54
 8009860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009862:	602f      	str	r7, [r5, #0]
 8009864:	2900      	cmp	r1, #0
 8009866:	d0ca      	beq.n	80097fe <__sflush_r+0x1a>
 8009868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__sflush_r+0x92>
 8009870:	4628      	mov	r0, r5
 8009872:	f000 fc3d 	bl	800a0f0 <_free_r>
 8009876:	2000      	movs	r0, #0
 8009878:	6360      	str	r0, [r4, #52]	; 0x34
 800987a:	e7c1      	b.n	8009800 <__sflush_r+0x1c>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c41      	adds	r1, r0, #1
 8009886:	d1c7      	bne.n	8009818 <__sflush_r+0x34>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c4      	beq.n	8009818 <__sflush_r+0x34>
 800988e:	2b1d      	cmp	r3, #29
 8009890:	d001      	beq.n	8009896 <__sflush_r+0xb2>
 8009892:	2b16      	cmp	r3, #22
 8009894:	d101      	bne.n	800989a <__sflush_r+0xb6>
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	e7b1      	b.n	80097fe <__sflush_r+0x1a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7ad      	b.n	8009800 <__sflush_r+0x1c>
 80098a4:	690f      	ldr	r7, [r1, #16]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0a9      	beq.n	80097fe <__sflush_r+0x1a>
 80098aa:	0793      	lsls	r3, r2, #30
 80098ac:	680e      	ldr	r6, [r1, #0]
 80098ae:	bf08      	it	eq
 80098b0:	694b      	ldreq	r3, [r1, #20]
 80098b2:	600f      	str	r7, [r1, #0]
 80098b4:	bf18      	it	ne
 80098b6:	2300      	movne	r3, #0
 80098b8:	eba6 0807 	sub.w	r8, r6, r7
 80098bc:	608b      	str	r3, [r1, #8]
 80098be:	f1b8 0f00 	cmp.w	r8, #0
 80098c2:	dd9c      	ble.n	80097fe <__sflush_r+0x1a>
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c8:	4643      	mov	r3, r8
 80098ca:	463a      	mov	r2, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc06      	bgt.n	80098e2 <__sflush_r+0xfe>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098e0:	e78e      	b.n	8009800 <__sflush_r+0x1c>
 80098e2:	4407      	add	r7, r0
 80098e4:	eba8 0800 	sub.w	r8, r8, r0
 80098e8:	e7e9      	b.n	80098be <__sflush_r+0xda>
 80098ea:	bf00      	nop
 80098ec:	20400001 	.word	0x20400001

080098f0 <_fflush_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	690b      	ldr	r3, [r1, #16]
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b913      	cbnz	r3, 8009900 <_fflush_r+0x10>
 80098fa:	2500      	movs	r5, #0
 80098fc:	4628      	mov	r0, r5
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	b118      	cbz	r0, 800990a <_fflush_r+0x1a>
 8009902:	6983      	ldr	r3, [r0, #24]
 8009904:	b90b      	cbnz	r3, 800990a <_fflush_r+0x1a>
 8009906:	f7fe f9ff 	bl	8007d08 <__sinit>
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <_fflush_r+0x6c>)
 800990c:	429c      	cmp	r4, r3
 800990e:	d11b      	bne.n	8009948 <_fflush_r+0x58>
 8009910:	686c      	ldr	r4, [r5, #4]
 8009912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0ef      	beq.n	80098fa <_fflush_r+0xa>
 800991a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800991c:	07d0      	lsls	r0, r2, #31
 800991e:	d404      	bmi.n	800992a <_fflush_r+0x3a>
 8009920:	0599      	lsls	r1, r3, #22
 8009922:	d402      	bmi.n	800992a <_fflush_r+0x3a>
 8009924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009926:	f7fe fab2 	bl	8007e8e <__retarget_lock_acquire_recursive>
 800992a:	4628      	mov	r0, r5
 800992c:	4621      	mov	r1, r4
 800992e:	f7ff ff59 	bl	80097e4 <__sflush_r>
 8009932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009934:	07da      	lsls	r2, r3, #31
 8009936:	4605      	mov	r5, r0
 8009938:	d4e0      	bmi.n	80098fc <_fflush_r+0xc>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	059b      	lsls	r3, r3, #22
 800993e:	d4dd      	bmi.n	80098fc <_fflush_r+0xc>
 8009940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009942:	f7fe faa5 	bl	8007e90 <__retarget_lock_release_recursive>
 8009946:	e7d9      	b.n	80098fc <_fflush_r+0xc>
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <_fflush_r+0x70>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <_fflush_r+0x62>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7df      	b.n	8009912 <_fflush_r+0x22>
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <_fflush_r+0x74>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7da      	b.n	8009912 <_fflush_r+0x22>
 800995c:	0800ace8 	.word	0x0800ace8
 8009960:	0800ad08 	.word	0x0800ad08
 8009964:	0800acc8 	.word	0x0800acc8

08009968 <_localeconv_r>:
 8009968:	4800      	ldr	r0, [pc, #0]	; (800996c <_localeconv_r+0x4>)
 800996a:	4770      	bx	lr
 800996c:	20000164 	.word	0x20000164

08009970 <_lseek_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d07      	ldr	r5, [pc, #28]	; (8009990 <_lseek_r+0x20>)
 8009974:	4604      	mov	r4, r0
 8009976:	4608      	mov	r0, r1
 8009978:	4611      	mov	r1, r2
 800997a:	2200      	movs	r2, #0
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f8 f99c 	bl	8001cbc <_lseek>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_lseek_r+0x1e>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_lseek_r+0x1e>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20004994 	.word	0x20004994

08009994 <malloc>:
 8009994:	4b02      	ldr	r3, [pc, #8]	; (80099a0 <malloc+0xc>)
 8009996:	4601      	mov	r1, r0
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f7fe bab1 	b.w	8007f00 <_malloc_r>
 800999e:	bf00      	nop
 80099a0:	20000010 	.word	0x20000010

080099a4 <__malloc_lock>:
 80099a4:	4801      	ldr	r0, [pc, #4]	; (80099ac <__malloc_lock+0x8>)
 80099a6:	f7fe ba72 	b.w	8007e8e <__retarget_lock_acquire_recursive>
 80099aa:	bf00      	nop
 80099ac:	20004988 	.word	0x20004988

080099b0 <__malloc_unlock>:
 80099b0:	4801      	ldr	r0, [pc, #4]	; (80099b8 <__malloc_unlock+0x8>)
 80099b2:	f7fe ba6d 	b.w	8007e90 <__retarget_lock_release_recursive>
 80099b6:	bf00      	nop
 80099b8:	20004988 	.word	0x20004988

080099bc <_Balloc>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Balloc+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ffe4 	bl	8009994 <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6260      	str	r0, [r4, #36]	; 0x24
 80099d0:	b920      	cbnz	r0, 80099dc <_Balloc+0x20>
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <_Balloc+0x78>)
 80099d4:	4818      	ldr	r0, [pc, #96]	; (8009a38 <_Balloc+0x7c>)
 80099d6:	2166      	movs	r1, #102	; 0x66
 80099d8:	f000 ff5e 	bl	800a898 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099e6:	68f3      	ldr	r3, [r6, #12]
 80099e8:	b183      	cbz	r3, 8009a0c <_Balloc+0x50>
 80099ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f2:	b9b8      	cbnz	r0, 8009a24 <_Balloc+0x68>
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f605 	lsl.w	r6, r1, r5
 80099fa:	1d72      	adds	r2, r6, #5
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 fb60 	bl	800a0c4 <_calloc_r>
 8009a04:	b160      	cbz	r0, 8009a20 <_Balloc+0x64>
 8009a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0a:	e00e      	b.n	8009a2a <_Balloc+0x6e>
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	2104      	movs	r1, #4
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fb57 	bl	800a0c4 <_calloc_r>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	60f0      	str	r0, [r6, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <_Balloc+0x2e>
 8009a20:	2000      	movs	r0, #0
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	6802      	ldr	r2, [r0, #0]
 8009a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a30:	e7f7      	b.n	8009a22 <_Balloc+0x66>
 8009a32:	bf00      	nop
 8009a34:	0800ad6d 	.word	0x0800ad6d
 8009a38:	0800adf0 	.word	0x0800adf0

08009a3c <_Bfree>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b976      	cbnz	r6, 8009a64 <_Bfree+0x28>
 8009a46:	2010      	movs	r0, #16
 8009a48:	f7ff ffa4 	bl	8009994 <malloc>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009a50:	b920      	cbnz	r0, 8009a5c <_Bfree+0x20>
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <_Bfree+0x3c>)
 8009a54:	4809      	ldr	r0, [pc, #36]	; (8009a7c <_Bfree+0x40>)
 8009a56:	218a      	movs	r1, #138	; 0x8a
 8009a58:	f000 ff1e 	bl	800a898 <__assert_func>
 8009a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a60:	6006      	str	r6, [r0, #0]
 8009a62:	60c6      	str	r6, [r0, #12]
 8009a64:	b13c      	cbz	r4, 8009a76 <_Bfree+0x3a>
 8009a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a68:	6862      	ldr	r2, [r4, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a70:	6021      	str	r1, [r4, #0]
 8009a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	0800ad6d 	.word	0x0800ad6d
 8009a7c:	0800adf0 	.word	0x0800adf0

08009a80 <__multadd>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	690d      	ldr	r5, [r1, #16]
 8009a86:	4607      	mov	r7, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	f101 0c14 	add.w	ip, r1, #20
 8009a90:	2000      	movs	r0, #0
 8009a92:	f8dc 3000 	ldr.w	r3, [ip]
 8009a96:	b299      	uxth	r1, r3
 8009a98:	fb02 6101 	mla	r1, r2, r1, r6
 8009a9c:	0c1e      	lsrs	r6, r3, #16
 8009a9e:	0c0b      	lsrs	r3, r1, #16
 8009aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa4:	b289      	uxth	r1, r1
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aac:	4285      	cmp	r5, r0
 8009aae:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab6:	dcec      	bgt.n	8009a92 <__multadd+0x12>
 8009ab8:	b30e      	cbz	r6, 8009afe <__multadd+0x7e>
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	42ab      	cmp	r3, r5
 8009abe:	dc19      	bgt.n	8009af4 <__multadd+0x74>
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f7ff ff79 	bl	80099bc <_Balloc>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__multadd+0x5a>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <__multadd+0x84>)
 8009ad2:	480d      	ldr	r0, [pc, #52]	; (8009b08 <__multadd+0x88>)
 8009ad4:	21b5      	movs	r1, #181	; 0xb5
 8009ad6:	f000 fedf 	bl	800a898 <__assert_func>
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f104 010c 	add.w	r1, r4, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7fe f9d4 	bl	8007e92 <memcpy>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ffa5 	bl	8009a3c <_Bfree>
 8009af2:	4644      	mov	r4, r8
 8009af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af8:	3501      	adds	r5, #1
 8009afa:	615e      	str	r6, [r3, #20]
 8009afc:	6125      	str	r5, [r4, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	0800addf 	.word	0x0800addf
 8009b08:	0800adf0 	.word	0x0800adf0

08009b0c <__hi0bits>:
 8009b0c:	0c03      	lsrs	r3, r0, #16
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	b9d3      	cbnz	r3, 8009b48 <__hi0bits+0x3c>
 8009b12:	0400      	lsls	r0, r0, #16
 8009b14:	2310      	movs	r3, #16
 8009b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	0200      	lsleq	r0, r0, #8
 8009b1e:	3308      	addeq	r3, #8
 8009b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	0100      	lsleq	r0, r0, #4
 8009b28:	3304      	addeq	r3, #4
 8009b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0080      	lsleq	r0, r0, #2
 8009b32:	3302      	addeq	r3, #2
 8009b34:	2800      	cmp	r0, #0
 8009b36:	db05      	blt.n	8009b44 <__hi0bits+0x38>
 8009b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b3c:	f103 0301 	add.w	r3, r3, #1
 8009b40:	bf08      	it	eq
 8009b42:	2320      	moveq	r3, #32
 8009b44:	4618      	mov	r0, r3
 8009b46:	4770      	bx	lr
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7e4      	b.n	8009b16 <__hi0bits+0xa>

08009b4c <__lo0bits>:
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	f013 0207 	ands.w	r2, r3, #7
 8009b52:	4601      	mov	r1, r0
 8009b54:	d00b      	beq.n	8009b6e <__lo0bits+0x22>
 8009b56:	07da      	lsls	r2, r3, #31
 8009b58:	d423      	bmi.n	8009ba2 <__lo0bits+0x56>
 8009b5a:	0798      	lsls	r0, r3, #30
 8009b5c:	bf49      	itett	mi
 8009b5e:	085b      	lsrmi	r3, r3, #1
 8009b60:	089b      	lsrpl	r3, r3, #2
 8009b62:	2001      	movmi	r0, #1
 8009b64:	600b      	strmi	r3, [r1, #0]
 8009b66:	bf5c      	itt	pl
 8009b68:	600b      	strpl	r3, [r1, #0]
 8009b6a:	2002      	movpl	r0, #2
 8009b6c:	4770      	bx	lr
 8009b6e:	b298      	uxth	r0, r3
 8009b70:	b9a8      	cbnz	r0, 8009b9e <__lo0bits+0x52>
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	2010      	movs	r0, #16
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	b90a      	cbnz	r2, 8009b7e <__lo0bits+0x32>
 8009b7a:	3008      	adds	r0, #8
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	071a      	lsls	r2, r3, #28
 8009b80:	bf04      	itt	eq
 8009b82:	091b      	lsreq	r3, r3, #4
 8009b84:	3004      	addeq	r0, #4
 8009b86:	079a      	lsls	r2, r3, #30
 8009b88:	bf04      	itt	eq
 8009b8a:	089b      	lsreq	r3, r3, #2
 8009b8c:	3002      	addeq	r0, #2
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d403      	bmi.n	8009b9a <__lo0bits+0x4e>
 8009b92:	085b      	lsrs	r3, r3, #1
 8009b94:	f100 0001 	add.w	r0, r0, #1
 8009b98:	d005      	beq.n	8009ba6 <__lo0bits+0x5a>
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	e7e9      	b.n	8009b76 <__lo0bits+0x2a>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	4770      	bx	lr
 8009ba6:	2020      	movs	r0, #32
 8009ba8:	4770      	bx	lr
	...

08009bac <__i2b>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	460c      	mov	r4, r1
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	f7ff ff03 	bl	80099bc <_Balloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	b928      	cbnz	r0, 8009bc6 <__i2b+0x1a>
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <__i2b+0x24>)
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <__i2b+0x28>)
 8009bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bc2:	f000 fe69 	bl	800a898 <__assert_func>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	6144      	str	r4, [r0, #20]
 8009bca:	6103      	str	r3, [r0, #16]
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800addf 	.word	0x0800addf
 8009bd4:	0800adf0 	.word	0x0800adf0

08009bd8 <__multiply>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4691      	mov	r9, r2
 8009bde:	690a      	ldr	r2, [r1, #16]
 8009be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bfb8      	it	lt
 8009be8:	460b      	movlt	r3, r1
 8009bea:	460c      	mov	r4, r1
 8009bec:	bfbc      	itt	lt
 8009bee:	464c      	movlt	r4, r9
 8009bf0:	4699      	movlt	r9, r3
 8009bf2:	6927      	ldr	r7, [r4, #16]
 8009bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	6861      	ldr	r1, [r4, #4]
 8009bfc:	eb07 060a 	add.w	r6, r7, sl
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	b085      	sub	sp, #20
 8009c04:	bfb8      	it	lt
 8009c06:	3101      	addlt	r1, #1
 8009c08:	f7ff fed8 	bl	80099bc <_Balloc>
 8009c0c:	b930      	cbnz	r0, 8009c1c <__multiply+0x44>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <__multiply+0x14c>)
 8009c12:	4845      	ldr	r0, [pc, #276]	; (8009d28 <__multiply+0x150>)
 8009c14:	f240 115d 	movw	r1, #349	; 0x15d
 8009c18:	f000 fe3e 	bl	800a898 <__assert_func>
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c24:	462b      	mov	r3, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	d321      	bcc.n	8009c70 <__multiply+0x98>
 8009c2c:	f104 0314 	add.w	r3, r4, #20
 8009c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c34:	f109 0314 	add.w	r3, r9, #20
 8009c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c3c:	9202      	str	r2, [sp, #8]
 8009c3e:	1b3a      	subs	r2, r7, r4
 8009c40:	3a15      	subs	r2, #21
 8009c42:	f022 0203 	bic.w	r2, r2, #3
 8009c46:	3204      	adds	r2, #4
 8009c48:	f104 0115 	add.w	r1, r4, #21
 8009c4c:	428f      	cmp	r7, r1
 8009c4e:	bf38      	it	cc
 8009c50:	2204      	movcc	r2, #4
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9a02      	ldr	r2, [sp, #8]
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d80c      	bhi.n	8009c76 <__multiply+0x9e>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd03      	ble.n	8009c68 <__multiply+0x90>
 8009c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d05a      	beq.n	8009d1e <__multiply+0x146>
 8009c68:	6106      	str	r6, [r0, #16]
 8009c6a:	b005      	add	sp, #20
 8009c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	f843 2b04 	str.w	r2, [r3], #4
 8009c74:	e7d8      	b.n	8009c28 <__multiply+0x50>
 8009c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c7a:	f1ba 0f00 	cmp.w	sl, #0
 8009c7e:	d024      	beq.n	8009cca <__multiply+0xf2>
 8009c80:	f104 0e14 	add.w	lr, r4, #20
 8009c84:	46a9      	mov	r9, r5
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c92:	fa1f fb82 	uxth.w	fp, r2
 8009c96:	b289      	uxth	r1, r1
 8009c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca4:	4461      	add	r1, ip
 8009ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cb2:	b289      	uxth	r1, r1
 8009cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb8:	4577      	cmp	r7, lr
 8009cba:	f849 1b04 	str.w	r1, [r9], #4
 8009cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cc2:	d8e2      	bhi.n	8009c8a <__multiply+0xb2>
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	f845 c002 	str.w	ip, [r5, r2]
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d020      	beq.n	8009d1a <__multiply+0x142>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	f104 0c14 	add.w	ip, r4, #20
 8009cde:	46ae      	mov	lr, r5
 8009ce0:	f04f 0a00 	mov.w	sl, #0
 8009ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cec:	fb09 220b 	mla	r2, r9, fp, r2
 8009cf0:	4492      	add	sl, r2
 8009cf2:	b289      	uxth	r1, r1
 8009cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8009cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d00:	f8be 1000 	ldrh.w	r1, [lr]
 8009d04:	0c12      	lsrs	r2, r2, #16
 8009d06:	fb09 1102 	mla	r1, r9, r2, r1
 8009d0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d0e:	4567      	cmp	r7, ip
 8009d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d14:	d8e6      	bhi.n	8009ce4 <__multiply+0x10c>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	50a9      	str	r1, [r5, r2]
 8009d1a:	3504      	adds	r5, #4
 8009d1c:	e79a      	b.n	8009c54 <__multiply+0x7c>
 8009d1e:	3e01      	subs	r6, #1
 8009d20:	e79c      	b.n	8009c5c <__multiply+0x84>
 8009d22:	bf00      	nop
 8009d24:	0800addf 	.word	0x0800addf
 8009d28:	0800adf0 	.word	0x0800adf0

08009d2c <__pow5mult>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4615      	mov	r5, r2
 8009d32:	f012 0203 	ands.w	r2, r2, #3
 8009d36:	4606      	mov	r6, r0
 8009d38:	460f      	mov	r7, r1
 8009d3a:	d007      	beq.n	8009d4c <__pow5mult+0x20>
 8009d3c:	4c25      	ldr	r4, [pc, #148]	; (8009dd4 <__pow5mult+0xa8>)
 8009d3e:	3a01      	subs	r2, #1
 8009d40:	2300      	movs	r3, #0
 8009d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d46:	f7ff fe9b 	bl	8009a80 <__multadd>
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	10ad      	asrs	r5, r5, #2
 8009d4e:	d03d      	beq.n	8009dcc <__pow5mult+0xa0>
 8009d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d52:	b97c      	cbnz	r4, 8009d74 <__pow5mult+0x48>
 8009d54:	2010      	movs	r0, #16
 8009d56:	f7ff fe1d 	bl	8009994 <malloc>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d5e:	b928      	cbnz	r0, 8009d6c <__pow5mult+0x40>
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <__pow5mult+0xac>)
 8009d62:	481e      	ldr	r0, [pc, #120]	; (8009ddc <__pow5mult+0xb0>)
 8009d64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d68:	f000 fd96 	bl	800a898 <__assert_func>
 8009d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d70:	6004      	str	r4, [r0, #0]
 8009d72:	60c4      	str	r4, [r0, #12]
 8009d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d7c:	b94c      	cbnz	r4, 8009d92 <__pow5mult+0x66>
 8009d7e:	f240 2171 	movw	r1, #625	; 0x271
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff12 	bl	8009bac <__i2b>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8e:	4604      	mov	r4, r0
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	07eb      	lsls	r3, r5, #31
 8009d98:	d50a      	bpl.n	8009db0 <__pow5mult+0x84>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff1a 	bl	8009bd8 <__multiply>
 8009da4:	4639      	mov	r1, r7
 8009da6:	4680      	mov	r8, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff fe47 	bl	8009a3c <_Bfree>
 8009dae:	4647      	mov	r7, r8
 8009db0:	106d      	asrs	r5, r5, #1
 8009db2:	d00b      	beq.n	8009dcc <__pow5mult+0xa0>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	b938      	cbnz	r0, 8009dc8 <__pow5mult+0x9c>
 8009db8:	4622      	mov	r2, r4
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff ff0b 	bl	8009bd8 <__multiply>
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	f8c0 9000 	str.w	r9, [r0]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	e7e4      	b.n	8009d96 <__pow5mult+0x6a>
 8009dcc:	4638      	mov	r0, r7
 8009dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	bf00      	nop
 8009dd4:	0800af40 	.word	0x0800af40
 8009dd8:	0800ad6d 	.word	0x0800ad6d
 8009ddc:	0800adf0 	.word	0x0800adf0

08009de0 <__lshift>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	460c      	mov	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	4607      	mov	r7, r0
 8009df2:	4691      	mov	r9, r2
 8009df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df8:	f108 0601 	add.w	r6, r8, #1
 8009dfc:	42b3      	cmp	r3, r6
 8009dfe:	db0b      	blt.n	8009e18 <__lshift+0x38>
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff fddb 	bl	80099bc <_Balloc>
 8009e06:	4605      	mov	r5, r0
 8009e08:	b948      	cbnz	r0, 8009e1e <__lshift+0x3e>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <__lshift+0xd8>)
 8009e0e:	482b      	ldr	r0, [pc, #172]	; (8009ebc <__lshift+0xdc>)
 8009e10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e14:	f000 fd40 	bl	800a898 <__assert_func>
 8009e18:	3101      	adds	r1, #1
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	e7ee      	b.n	8009dfc <__lshift+0x1c>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f100 0114 	add.w	r1, r0, #20
 8009e24:	f100 0210 	add.w	r2, r0, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	4553      	cmp	r3, sl
 8009e2c:	db37      	blt.n	8009e9e <__lshift+0xbe>
 8009e2e:	6920      	ldr	r0, [r4, #16]
 8009e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e34:	f104 0314 	add.w	r3, r4, #20
 8009e38:	f019 091f 	ands.w	r9, r9, #31
 8009e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e44:	d02f      	beq.n	8009ea6 <__lshift+0xc6>
 8009e46:	f1c9 0e20 	rsb	lr, r9, #32
 8009e4a:	468a      	mov	sl, r1
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	fa02 f209 	lsl.w	r2, r2, r9
 8009e56:	ea42 020c 	orr.w	r2, r2, ip
 8009e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	4298      	cmp	r0, r3
 8009e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e68:	d8f2      	bhi.n	8009e50 <__lshift+0x70>
 8009e6a:	1b03      	subs	r3, r0, r4
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3304      	adds	r3, #4
 8009e74:	f104 0215 	add.w	r2, r4, #21
 8009e78:	4290      	cmp	r0, r2
 8009e7a:	bf38      	it	cc
 8009e7c:	2304      	movcc	r3, #4
 8009e7e:	f841 c003 	str.w	ip, [r1, r3]
 8009e82:	f1bc 0f00 	cmp.w	ip, #0
 8009e86:	d001      	beq.n	8009e8c <__lshift+0xac>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fdd2 	bl	8009a3c <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c1      	b.n	8009e2a <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc8>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xac>
 8009eb6:	bf00      	nop
 8009eb8:	0800addf 	.word	0x0800addf
 8009ebc:	0800adf0 	.word	0x0800adf0

08009ec0 <__mcmp>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690c      	ldr	r4, [r1, #16]
 8009ec6:	1b12      	subs	r2, r2, r4
 8009ec8:	d10e      	bne.n	8009ee8 <__mcmp+0x28>
 8009eca:	f100 0314 	add.w	r3, r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d305      	bcc.n	8009ef2 <__mcmp+0x32>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fa      	b.n	8009ee8 <__mcmp+0x28>
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ef6:	e7f7      	b.n	8009ee8 <__mcmp+0x28>

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4620      	mov	r0, r4
 8009f04:	4690      	mov	r8, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d110      	bne.n	8009f30 <__mdiff+0x38>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd53 	bl	80099bc <_Balloc>
 8009f16:	b930      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f18:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <__mdiff+0x10c>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f240 2132 	movw	r1, #562	; 0x232
 8009f20:	4839      	ldr	r0, [pc, #228]	; (800a008 <__mdiff+0x110>)
 8009f22:	f000 fcb9 	bl	800a898 <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	bfa4      	itt	ge
 8009f32:	4643      	movge	r3, r8
 8009f34:	46a0      	movge	r8, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f3c:	bfa6      	itte	ge
 8009f3e:	461c      	movge	r4, r3
 8009f40:	2500      	movge	r5, #0
 8009f42:	2501      	movlt	r5, #1
 8009f44:	f7ff fd3a 	bl	80099bc <_Balloc>
 8009f48:	b920      	cbnz	r0, 8009f54 <__mdiff+0x5c>
 8009f4a:	4b2e      	ldr	r3, [pc, #184]	; (800a004 <__mdiff+0x10c>)
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f52:	e7e5      	b.n	8009f20 <__mdiff+0x28>
 8009f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f58:	6926      	ldr	r6, [r4, #16]
 8009f5a:	60c5      	str	r5, [r0, #12]
 8009f5c:	f104 0914 	add.w	r9, r4, #20
 8009f60:	f108 0514 	add.w	r5, r8, #20
 8009f64:	f100 0e14 	add.w	lr, r0, #20
 8009f68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f70:	f108 0210 	add.w	r2, r8, #16
 8009f74:	46f2      	mov	sl, lr
 8009f76:	2100      	movs	r1, #0
 8009f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f80:	fa1f f883 	uxth.w	r8, r3
 8009f84:	fa11 f18b 	uxtah	r1, r1, fp
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	eba1 0808 	sub.w	r8, r1, r8
 8009f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f96:	fa1f f888 	uxth.w	r8, r8
 8009f9a:	1419      	asrs	r1, r3, #16
 8009f9c:	454e      	cmp	r6, r9
 8009f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fa6:	d8e7      	bhi.n	8009f78 <__mdiff+0x80>
 8009fa8:	1b33      	subs	r3, r6, r4
 8009faa:	3b15      	subs	r3, #21
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	3415      	adds	r4, #21
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	bf38      	it	cc
 8009fb8:	2304      	movcc	r3, #4
 8009fba:	441d      	add	r5, r3
 8009fbc:	4473      	add	r3, lr
 8009fbe:	469e      	mov	lr, r3
 8009fc0:	462e      	mov	r6, r5
 8009fc2:	4566      	cmp	r6, ip
 8009fc4:	d30e      	bcc.n	8009fe4 <__mdiff+0xec>
 8009fc6:	f10c 0203 	add.w	r2, ip, #3
 8009fca:	1b52      	subs	r2, r2, r5
 8009fcc:	f022 0203 	bic.w	r2, r2, #3
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	45ac      	cmp	ip, r5
 8009fd4:	bf38      	it	cc
 8009fd6:	2200      	movcc	r2, #0
 8009fd8:	441a      	add	r2, r3
 8009fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fde:	b17b      	cbz	r3, 800a000 <__mdiff+0x108>
 8009fe0:	6107      	str	r7, [r0, #16]
 8009fe2:	e7a3      	b.n	8009f2c <__mdiff+0x34>
 8009fe4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe8:	fa11 f288 	uxtah	r2, r1, r8
 8009fec:	1414      	asrs	r4, r2, #16
 8009fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ffc:	1421      	asrs	r1, r4, #16
 8009ffe:	e7e0      	b.n	8009fc2 <__mdiff+0xca>
 800a000:	3f01      	subs	r7, #1
 800a002:	e7ea      	b.n	8009fda <__mdiff+0xe2>
 800a004:	0800addf 	.word	0x0800addf
 800a008:	0800adf0 	.word	0x0800adf0

0800a00c <__d2b>:
 800a00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4689      	mov	r9, r1
 800a012:	2101      	movs	r1, #1
 800a014:	ec57 6b10 	vmov	r6, r7, d0
 800a018:	4690      	mov	r8, r2
 800a01a:	f7ff fccf 	bl	80099bc <_Balloc>
 800a01e:	4604      	mov	r4, r0
 800a020:	b930      	cbnz	r0, 800a030 <__d2b+0x24>
 800a022:	4602      	mov	r2, r0
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <__d2b+0xb0>)
 800a026:	4826      	ldr	r0, [pc, #152]	; (800a0c0 <__d2b+0xb4>)
 800a028:	f240 310a 	movw	r1, #778	; 0x30a
 800a02c:	f000 fc34 	bl	800a898 <__assert_func>
 800a030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a038:	bb35      	cbnz	r5, 800a088 <__d2b+0x7c>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	d028      	beq.n	800a092 <__d2b+0x86>
 800a040:	4668      	mov	r0, sp
 800a042:	9600      	str	r6, [sp, #0]
 800a044:	f7ff fd82 	bl	8009b4c <__lo0bits>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	b300      	cbz	r0, 800a08e <__d2b+0x82>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	430b      	orrs	r3, r1
 800a058:	40c2      	lsrs	r2, r0
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	61a3      	str	r3, [r4, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf14      	ite	ne
 800a066:	2202      	movne	r2, #2
 800a068:	2201      	moveq	r2, #1
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	b1d5      	cbz	r5, 800a0a4 <__d2b+0x98>
 800a06e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a072:	4405      	add	r5, r0
 800a074:	f8c9 5000 	str.w	r5, [r9]
 800a078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a07c:	f8c8 0000 	str.w	r0, [r8]
 800a080:	4620      	mov	r0, r4
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08c:	e7d5      	b.n	800a03a <__d2b+0x2e>
 800a08e:	6161      	str	r1, [r4, #20]
 800a090:	e7e5      	b.n	800a05e <__d2b+0x52>
 800a092:	a801      	add	r0, sp, #4
 800a094:	f7ff fd5a 	bl	8009b4c <__lo0bits>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	2201      	movs	r2, #1
 800a09e:	6122      	str	r2, [r4, #16]
 800a0a0:	3020      	adds	r0, #32
 800a0a2:	e7e3      	b.n	800a06c <__d2b+0x60>
 800a0a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ac:	f8c9 0000 	str.w	r0, [r9]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fd2b 	bl	8009b0c <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7df      	b.n	800a07c <__d2b+0x70>
 800a0bc:	0800addf 	.word	0x0800addf
 800a0c0:	0800adf0 	.word	0x0800adf0

0800a0c4 <_calloc_r>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a0ca:	b94c      	cbnz	r4, 800a0e0 <_calloc_r+0x1c>
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	f7fd ff16 	bl	8007f00 <_malloc_r>
 800a0d4:	9a01      	ldr	r2, [sp, #4]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b930      	cbnz	r0, 800a0e8 <_calloc_r+0x24>
 800a0da:	4628      	mov	r0, r5
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	6002      	str	r2, [r0, #0]
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	e7f8      	b.n	800a0da <_calloc_r+0x16>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7fd fee0 	bl	8007eae <memset>
 800a0ee:	e7f4      	b.n	800a0da <_calloc_r+0x16>

0800a0f0 <_free_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d044      	beq.n	800a180 <_free_r+0x90>
 800a0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a102:	bfb8      	it	lt
 800a104:	18e4      	addlt	r4, r4, r3
 800a106:	f7ff fc4d 	bl	80099a4 <__malloc_lock>
 800a10a:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <_free_r+0x94>)
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x30>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a11c:	f7ff bc48 	b.w	80099b0 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x46>
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1961      	adds	r1, r4, r5
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1949      	addeq	r1, r1, r5
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x22>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x50>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x46>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1855      	adds	r5, r2, r1
 800a144:	42a5      	cmp	r5, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x70>
 800a148:	6824      	ldr	r4, [r4, #0]
 800a14a:	4421      	add	r1, r4
 800a14c:	1854      	adds	r4, r2, r1
 800a14e:	42a3      	cmp	r3, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x26>
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	4421      	add	r1, r4
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x26>
 800a160:	d902      	bls.n	800a168 <_free_r+0x78>
 800a162:	230c      	movs	r3, #12
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x26>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x26>
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	2000498c 	.word	0x2000498c

0800a188 <__ssputs_r>:
 800a188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	688e      	ldr	r6, [r1, #8]
 800a18e:	429e      	cmp	r6, r3
 800a190:	4682      	mov	sl, r0
 800a192:	460c      	mov	r4, r1
 800a194:	4690      	mov	r8, r2
 800a196:	461f      	mov	r7, r3
 800a198:	d838      	bhi.n	800a20c <__ssputs_r+0x84>
 800a19a:	898a      	ldrh	r2, [r1, #12]
 800a19c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1a0:	d032      	beq.n	800a208 <__ssputs_r+0x80>
 800a1a2:	6825      	ldr	r5, [r4, #0]
 800a1a4:	6909      	ldr	r1, [r1, #16]
 800a1a6:	eba5 0901 	sub.w	r9, r5, r1
 800a1aa:	6965      	ldr	r5, [r4, #20]
 800a1ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	444b      	add	r3, r9
 800a1b8:	106d      	asrs	r5, r5, #1
 800a1ba:	429d      	cmp	r5, r3
 800a1bc:	bf38      	it	cc
 800a1be:	461d      	movcc	r5, r3
 800a1c0:	0553      	lsls	r3, r2, #21
 800a1c2:	d531      	bpl.n	800a228 <__ssputs_r+0xa0>
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7fd fe9b 	bl	8007f00 <_malloc_r>
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	b950      	cbnz	r0, 800a1e4 <__ssputs_r+0x5c>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	f8ca 3000 	str.w	r3, [sl]
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e4:	6921      	ldr	r1, [r4, #16]
 800a1e6:	464a      	mov	r2, r9
 800a1e8:	f7fd fe53 	bl	8007e92 <memcpy>
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	6126      	str	r6, [r4, #16]
 800a1fa:	6165      	str	r5, [r4, #20]
 800a1fc:	444e      	add	r6, r9
 800a1fe:	eba5 0509 	sub.w	r5, r5, r9
 800a202:	6026      	str	r6, [r4, #0]
 800a204:	60a5      	str	r5, [r4, #8]
 800a206:	463e      	mov	r6, r7
 800a208:	42be      	cmp	r6, r7
 800a20a:	d900      	bls.n	800a20e <__ssputs_r+0x86>
 800a20c:	463e      	mov	r6, r7
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	4632      	mov	r2, r6
 800a212:	4641      	mov	r1, r8
 800a214:	f000 fbe8 	bl	800a9e8 <memmove>
 800a218:	68a3      	ldr	r3, [r4, #8]
 800a21a:	1b9b      	subs	r3, r3, r6
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	4433      	add	r3, r6
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	2000      	movs	r0, #0
 800a226:	e7db      	b.n	800a1e0 <__ssputs_r+0x58>
 800a228:	462a      	mov	r2, r5
 800a22a:	f000 fbf7 	bl	800aa1c <_realloc_r>
 800a22e:	4606      	mov	r6, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	d1e1      	bne.n	800a1f8 <__ssputs_r+0x70>
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	4650      	mov	r0, sl
 800a238:	f7ff ff5a 	bl	800a0f0 <_free_r>
 800a23c:	e7c7      	b.n	800a1ce <__ssputs_r+0x46>
	...

0800a240 <_svfiprintf_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	4698      	mov	r8, r3
 800a246:	898b      	ldrh	r3, [r1, #12]
 800a248:	061b      	lsls	r3, r3, #24
 800a24a:	b09d      	sub	sp, #116	; 0x74
 800a24c:	4607      	mov	r7, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	4614      	mov	r4, r2
 800a252:	d50e      	bpl.n	800a272 <_svfiprintf_r+0x32>
 800a254:	690b      	ldr	r3, [r1, #16]
 800a256:	b963      	cbnz	r3, 800a272 <_svfiprintf_r+0x32>
 800a258:	2140      	movs	r1, #64	; 0x40
 800a25a:	f7fd fe51 	bl	8007f00 <_malloc_r>
 800a25e:	6028      	str	r0, [r5, #0]
 800a260:	6128      	str	r0, [r5, #16]
 800a262:	b920      	cbnz	r0, 800a26e <_svfiprintf_r+0x2e>
 800a264:	230c      	movs	r3, #12
 800a266:	603b      	str	r3, [r7, #0]
 800a268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26c:	e0d1      	b.n	800a412 <_svfiprintf_r+0x1d2>
 800a26e:	2340      	movs	r3, #64	; 0x40
 800a270:	616b      	str	r3, [r5, #20]
 800a272:	2300      	movs	r3, #0
 800a274:	9309      	str	r3, [sp, #36]	; 0x24
 800a276:	2320      	movs	r3, #32
 800a278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a280:	2330      	movs	r3, #48	; 0x30
 800a282:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a42c <_svfiprintf_r+0x1ec>
 800a286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a28a:	f04f 0901 	mov.w	r9, #1
 800a28e:	4623      	mov	r3, r4
 800a290:	469a      	mov	sl, r3
 800a292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a296:	b10a      	cbz	r2, 800a29c <_svfiprintf_r+0x5c>
 800a298:	2a25      	cmp	r2, #37	; 0x25
 800a29a:	d1f9      	bne.n	800a290 <_svfiprintf_r+0x50>
 800a29c:	ebba 0b04 	subs.w	fp, sl, r4
 800a2a0:	d00b      	beq.n	800a2ba <_svfiprintf_r+0x7a>
 800a2a2:	465b      	mov	r3, fp
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff ff6d 	bl	800a188 <__ssputs_r>
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f000 80aa 	beq.w	800a408 <_svfiprintf_r+0x1c8>
 800a2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2b6:	445a      	add	r2, fp
 800a2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f000 80a2 	beq.w	800a408 <_svfiprintf_r+0x1c8>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ce:	f10a 0a01 	add.w	sl, sl, #1
 800a2d2:	9304      	str	r3, [sp, #16]
 800a2d4:	9307      	str	r3, [sp, #28]
 800a2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2da:	931a      	str	r3, [sp, #104]	; 0x68
 800a2dc:	4654      	mov	r4, sl
 800a2de:	2205      	movs	r2, #5
 800a2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e4:	4851      	ldr	r0, [pc, #324]	; (800a42c <_svfiprintf_r+0x1ec>)
 800a2e6:	f7f5 ff9b 	bl	8000220 <memchr>
 800a2ea:	9a04      	ldr	r2, [sp, #16]
 800a2ec:	b9d8      	cbnz	r0, 800a326 <_svfiprintf_r+0xe6>
 800a2ee:	06d0      	lsls	r0, r2, #27
 800a2f0:	bf44      	itt	mi
 800a2f2:	2320      	movmi	r3, #32
 800a2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f8:	0711      	lsls	r1, r2, #28
 800a2fa:	bf44      	itt	mi
 800a2fc:	232b      	movmi	r3, #43	; 0x2b
 800a2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a302:	f89a 3000 	ldrb.w	r3, [sl]
 800a306:	2b2a      	cmp	r3, #42	; 0x2a
 800a308:	d015      	beq.n	800a336 <_svfiprintf_r+0xf6>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	4654      	mov	r4, sl
 800a30e:	2000      	movs	r0, #0
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4621      	mov	r1, r4
 800a316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a31a:	3b30      	subs	r3, #48	; 0x30
 800a31c:	2b09      	cmp	r3, #9
 800a31e:	d94e      	bls.n	800a3be <_svfiprintf_r+0x17e>
 800a320:	b1b0      	cbz	r0, 800a350 <_svfiprintf_r+0x110>
 800a322:	9207      	str	r2, [sp, #28]
 800a324:	e014      	b.n	800a350 <_svfiprintf_r+0x110>
 800a326:	eba0 0308 	sub.w	r3, r0, r8
 800a32a:	fa09 f303 	lsl.w	r3, r9, r3
 800a32e:	4313      	orrs	r3, r2
 800a330:	9304      	str	r3, [sp, #16]
 800a332:	46a2      	mov	sl, r4
 800a334:	e7d2      	b.n	800a2dc <_svfiprintf_r+0x9c>
 800a336:	9b03      	ldr	r3, [sp, #12]
 800a338:	1d19      	adds	r1, r3, #4
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	9103      	str	r1, [sp, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bfbb      	ittet	lt
 800a342:	425b      	neglt	r3, r3
 800a344:	f042 0202 	orrlt.w	r2, r2, #2
 800a348:	9307      	strge	r3, [sp, #28]
 800a34a:	9307      	strlt	r3, [sp, #28]
 800a34c:	bfb8      	it	lt
 800a34e:	9204      	strlt	r2, [sp, #16]
 800a350:	7823      	ldrb	r3, [r4, #0]
 800a352:	2b2e      	cmp	r3, #46	; 0x2e
 800a354:	d10c      	bne.n	800a370 <_svfiprintf_r+0x130>
 800a356:	7863      	ldrb	r3, [r4, #1]
 800a358:	2b2a      	cmp	r3, #42	; 0x2a
 800a35a:	d135      	bne.n	800a3c8 <_svfiprintf_r+0x188>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	1d1a      	adds	r2, r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	9203      	str	r2, [sp, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bfb8      	it	lt
 800a368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a36c:	3402      	adds	r4, #2
 800a36e:	9305      	str	r3, [sp, #20]
 800a370:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a43c <_svfiprintf_r+0x1fc>
 800a374:	7821      	ldrb	r1, [r4, #0]
 800a376:	2203      	movs	r2, #3
 800a378:	4650      	mov	r0, sl
 800a37a:	f7f5 ff51 	bl	8000220 <memchr>
 800a37e:	b140      	cbz	r0, 800a392 <_svfiprintf_r+0x152>
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	eba0 000a 	sub.w	r0, r0, sl
 800a386:	fa03 f000 	lsl.w	r0, r3, r0
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	4303      	orrs	r3, r0
 800a38e:	3401      	adds	r4, #1
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4826      	ldr	r0, [pc, #152]	; (800a430 <_svfiprintf_r+0x1f0>)
 800a398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a39c:	2206      	movs	r2, #6
 800a39e:	f7f5 ff3f 	bl	8000220 <memchr>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d038      	beq.n	800a418 <_svfiprintf_r+0x1d8>
 800a3a6:	4b23      	ldr	r3, [pc, #140]	; (800a434 <_svfiprintf_r+0x1f4>)
 800a3a8:	bb1b      	cbnz	r3, 800a3f2 <_svfiprintf_r+0x1b2>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	3307      	adds	r3, #7
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	3308      	adds	r3, #8
 800a3b4:	9303      	str	r3, [sp, #12]
 800a3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b8:	4433      	add	r3, r6
 800a3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a3bc:	e767      	b.n	800a28e <_svfiprintf_r+0x4e>
 800a3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	e7a5      	b.n	800a314 <_svfiprintf_r+0xd4>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	9305      	str	r3, [sp, #20]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3da:	3a30      	subs	r2, #48	; 0x30
 800a3dc:	2a09      	cmp	r2, #9
 800a3de:	d903      	bls.n	800a3e8 <_svfiprintf_r+0x1a8>
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0c5      	beq.n	800a370 <_svfiprintf_r+0x130>
 800a3e4:	9105      	str	r1, [sp, #20]
 800a3e6:	e7c3      	b.n	800a370 <_svfiprintf_r+0x130>
 800a3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e7f0      	b.n	800a3d4 <_svfiprintf_r+0x194>
 800a3f2:	ab03      	add	r3, sp, #12
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <_svfiprintf_r+0x1f8>)
 800a3fa:	a904      	add	r1, sp, #16
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7fd fe93 	bl	8008128 <_printf_float>
 800a402:	1c42      	adds	r2, r0, #1
 800a404:	4606      	mov	r6, r0
 800a406:	d1d6      	bne.n	800a3b6 <_svfiprintf_r+0x176>
 800a408:	89ab      	ldrh	r3, [r5, #12]
 800a40a:	065b      	lsls	r3, r3, #25
 800a40c:	f53f af2c 	bmi.w	800a268 <_svfiprintf_r+0x28>
 800a410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a412:	b01d      	add	sp, #116	; 0x74
 800a414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a418:	ab03      	add	r3, sp, #12
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <_svfiprintf_r+0x1f8>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	4638      	mov	r0, r7
 800a424:	f7fe f924 	bl	8008670 <_printf_i>
 800a428:	e7eb      	b.n	800a402 <_svfiprintf_r+0x1c2>
 800a42a:	bf00      	nop
 800a42c:	0800af4c 	.word	0x0800af4c
 800a430:	0800af56 	.word	0x0800af56
 800a434:	08008129 	.word	0x08008129
 800a438:	0800a189 	.word	0x0800a189
 800a43c:	0800af52 	.word	0x0800af52

0800a440 <__sfputc_r>:
 800a440:	6893      	ldr	r3, [r2, #8]
 800a442:	3b01      	subs	r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	b410      	push	{r4}
 800a448:	6093      	str	r3, [r2, #8]
 800a44a:	da08      	bge.n	800a45e <__sfputc_r+0x1e>
 800a44c:	6994      	ldr	r4, [r2, #24]
 800a44e:	42a3      	cmp	r3, r4
 800a450:	db01      	blt.n	800a456 <__sfputc_r+0x16>
 800a452:	290a      	cmp	r1, #10
 800a454:	d103      	bne.n	800a45e <__sfputc_r+0x1e>
 800a456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a45a:	f000 b95d 	b.w	800a718 <__swbuf_r>
 800a45e:	6813      	ldr	r3, [r2, #0]
 800a460:	1c58      	adds	r0, r3, #1
 800a462:	6010      	str	r0, [r2, #0]
 800a464:	7019      	strb	r1, [r3, #0]
 800a466:	4608      	mov	r0, r1
 800a468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <__sfputs_r>:
 800a46e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	4614      	mov	r4, r2
 800a476:	18d5      	adds	r5, r2, r3
 800a478:	42ac      	cmp	r4, r5
 800a47a:	d101      	bne.n	800a480 <__sfputs_r+0x12>
 800a47c:	2000      	movs	r0, #0
 800a47e:	e007      	b.n	800a490 <__sfputs_r+0x22>
 800a480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a484:	463a      	mov	r2, r7
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ffda 	bl	800a440 <__sfputc_r>
 800a48c:	1c43      	adds	r3, r0, #1
 800a48e:	d1f3      	bne.n	800a478 <__sfputs_r+0xa>
 800a490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a494 <_vfiprintf_r>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	460d      	mov	r5, r1
 800a49a:	b09d      	sub	sp, #116	; 0x74
 800a49c:	4614      	mov	r4, r2
 800a49e:	4698      	mov	r8, r3
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	b118      	cbz	r0, 800a4ac <_vfiprintf_r+0x18>
 800a4a4:	6983      	ldr	r3, [r0, #24]
 800a4a6:	b90b      	cbnz	r3, 800a4ac <_vfiprintf_r+0x18>
 800a4a8:	f7fd fc2e 	bl	8007d08 <__sinit>
 800a4ac:	4b89      	ldr	r3, [pc, #548]	; (800a6d4 <_vfiprintf_r+0x240>)
 800a4ae:	429d      	cmp	r5, r3
 800a4b0:	d11b      	bne.n	800a4ea <_vfiprintf_r+0x56>
 800a4b2:	6875      	ldr	r5, [r6, #4]
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x32>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x32>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c2:	f7fd fce4 	bl	8007e8e <__retarget_lock_acquire_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	071b      	lsls	r3, r3, #28
 800a4ca:	d501      	bpl.n	800a4d0 <_vfiprintf_r+0x3c>
 800a4cc:	692b      	ldr	r3, [r5, #16]
 800a4ce:	b9eb      	cbnz	r3, 800a50c <_vfiprintf_r+0x78>
 800a4d0:	4629      	mov	r1, r5
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 f972 	bl	800a7bc <__swsetup_r>
 800a4d8:	b1c0      	cbz	r0, 800a50c <_vfiprintf_r+0x78>
 800a4da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4dc:	07dc      	lsls	r4, r3, #31
 800a4de:	d50e      	bpl.n	800a4fe <_vfiprintf_r+0x6a>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4e4:	b01d      	add	sp, #116	; 0x74
 800a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ea:	4b7b      	ldr	r3, [pc, #492]	; (800a6d8 <_vfiprintf_r+0x244>)
 800a4ec:	429d      	cmp	r5, r3
 800a4ee:	d101      	bne.n	800a4f4 <_vfiprintf_r+0x60>
 800a4f0:	68b5      	ldr	r5, [r6, #8]
 800a4f2:	e7df      	b.n	800a4b4 <_vfiprintf_r+0x20>
 800a4f4:	4b79      	ldr	r3, [pc, #484]	; (800a6dc <_vfiprintf_r+0x248>)
 800a4f6:	429d      	cmp	r5, r3
 800a4f8:	bf08      	it	eq
 800a4fa:	68f5      	ldreq	r5, [r6, #12]
 800a4fc:	e7da      	b.n	800a4b4 <_vfiprintf_r+0x20>
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	0598      	lsls	r0, r3, #22
 800a502:	d4ed      	bmi.n	800a4e0 <_vfiprintf_r+0x4c>
 800a504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a506:	f7fd fcc3 	bl	8007e90 <__retarget_lock_release_recursive>
 800a50a:	e7e9      	b.n	800a4e0 <_vfiprintf_r+0x4c>
 800a50c:	2300      	movs	r3, #0
 800a50e:	9309      	str	r3, [sp, #36]	; 0x24
 800a510:	2320      	movs	r3, #32
 800a512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a516:	f8cd 800c 	str.w	r8, [sp, #12]
 800a51a:	2330      	movs	r3, #48	; 0x30
 800a51c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6e0 <_vfiprintf_r+0x24c>
 800a520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a524:	f04f 0901 	mov.w	r9, #1
 800a528:	4623      	mov	r3, r4
 800a52a:	469a      	mov	sl, r3
 800a52c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a530:	b10a      	cbz	r2, 800a536 <_vfiprintf_r+0xa2>
 800a532:	2a25      	cmp	r2, #37	; 0x25
 800a534:	d1f9      	bne.n	800a52a <_vfiprintf_r+0x96>
 800a536:	ebba 0b04 	subs.w	fp, sl, r4
 800a53a:	d00b      	beq.n	800a554 <_vfiprintf_r+0xc0>
 800a53c:	465b      	mov	r3, fp
 800a53e:	4622      	mov	r2, r4
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff ff93 	bl	800a46e <__sfputs_r>
 800a548:	3001      	adds	r0, #1
 800a54a:	f000 80aa 	beq.w	800a6a2 <_vfiprintf_r+0x20e>
 800a54e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a550:	445a      	add	r2, fp
 800a552:	9209      	str	r2, [sp, #36]	; 0x24
 800a554:	f89a 3000 	ldrb.w	r3, [sl]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80a2 	beq.w	800a6a2 <_vfiprintf_r+0x20e>
 800a55e:	2300      	movs	r3, #0
 800a560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a568:	f10a 0a01 	add.w	sl, sl, #1
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a574:	931a      	str	r3, [sp, #104]	; 0x68
 800a576:	4654      	mov	r4, sl
 800a578:	2205      	movs	r2, #5
 800a57a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57e:	4858      	ldr	r0, [pc, #352]	; (800a6e0 <_vfiprintf_r+0x24c>)
 800a580:	f7f5 fe4e 	bl	8000220 <memchr>
 800a584:	9a04      	ldr	r2, [sp, #16]
 800a586:	b9d8      	cbnz	r0, 800a5c0 <_vfiprintf_r+0x12c>
 800a588:	06d1      	lsls	r1, r2, #27
 800a58a:	bf44      	itt	mi
 800a58c:	2320      	movmi	r3, #32
 800a58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a592:	0713      	lsls	r3, r2, #28
 800a594:	bf44      	itt	mi
 800a596:	232b      	movmi	r3, #43	; 0x2b
 800a598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a59c:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a2:	d015      	beq.n	800a5d0 <_vfiprintf_r+0x13c>
 800a5a4:	9a07      	ldr	r2, [sp, #28]
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f04f 0c0a 	mov.w	ip, #10
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5b4:	3b30      	subs	r3, #48	; 0x30
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	d94e      	bls.n	800a658 <_vfiprintf_r+0x1c4>
 800a5ba:	b1b0      	cbz	r0, 800a5ea <_vfiprintf_r+0x156>
 800a5bc:	9207      	str	r2, [sp, #28]
 800a5be:	e014      	b.n	800a5ea <_vfiprintf_r+0x156>
 800a5c0:	eba0 0308 	sub.w	r3, r0, r8
 800a5c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	9304      	str	r3, [sp, #16]
 800a5cc:	46a2      	mov	sl, r4
 800a5ce:	e7d2      	b.n	800a576 <_vfiprintf_r+0xe2>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	1d19      	adds	r1, r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	9103      	str	r1, [sp, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfbb      	ittet	lt
 800a5dc:	425b      	neglt	r3, r3
 800a5de:	f042 0202 	orrlt.w	r2, r2, #2
 800a5e2:	9307      	strge	r3, [sp, #28]
 800a5e4:	9307      	strlt	r3, [sp, #28]
 800a5e6:	bfb8      	it	lt
 800a5e8:	9204      	strlt	r2, [sp, #16]
 800a5ea:	7823      	ldrb	r3, [r4, #0]
 800a5ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a5ee:	d10c      	bne.n	800a60a <_vfiprintf_r+0x176>
 800a5f0:	7863      	ldrb	r3, [r4, #1]
 800a5f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a5f4:	d135      	bne.n	800a662 <_vfiprintf_r+0x1ce>
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	1d1a      	adds	r2, r3, #4
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	9203      	str	r2, [sp, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	bfb8      	it	lt
 800a602:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a606:	3402      	adds	r4, #2
 800a608:	9305      	str	r3, [sp, #20]
 800a60a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6f0 <_vfiprintf_r+0x25c>
 800a60e:	7821      	ldrb	r1, [r4, #0]
 800a610:	2203      	movs	r2, #3
 800a612:	4650      	mov	r0, sl
 800a614:	f7f5 fe04 	bl	8000220 <memchr>
 800a618:	b140      	cbz	r0, 800a62c <_vfiprintf_r+0x198>
 800a61a:	2340      	movs	r3, #64	; 0x40
 800a61c:	eba0 000a 	sub.w	r0, r0, sl
 800a620:	fa03 f000 	lsl.w	r0, r3, r0
 800a624:	9b04      	ldr	r3, [sp, #16]
 800a626:	4303      	orrs	r3, r0
 800a628:	3401      	adds	r4, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	482c      	ldr	r0, [pc, #176]	; (800a6e4 <_vfiprintf_r+0x250>)
 800a632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a636:	2206      	movs	r2, #6
 800a638:	f7f5 fdf2 	bl	8000220 <memchr>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d03f      	beq.n	800a6c0 <_vfiprintf_r+0x22c>
 800a640:	4b29      	ldr	r3, [pc, #164]	; (800a6e8 <_vfiprintf_r+0x254>)
 800a642:	bb1b      	cbnz	r3, 800a68c <_vfiprintf_r+0x1f8>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	3307      	adds	r3, #7
 800a648:	f023 0307 	bic.w	r3, r3, #7
 800a64c:	3308      	adds	r3, #8
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	443b      	add	r3, r7
 800a654:	9309      	str	r3, [sp, #36]	; 0x24
 800a656:	e767      	b.n	800a528 <_vfiprintf_r+0x94>
 800a658:	fb0c 3202 	mla	r2, ip, r2, r3
 800a65c:	460c      	mov	r4, r1
 800a65e:	2001      	movs	r0, #1
 800a660:	e7a5      	b.n	800a5ae <_vfiprintf_r+0x11a>
 800a662:	2300      	movs	r3, #0
 800a664:	3401      	adds	r4, #1
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	4619      	mov	r1, r3
 800a66a:	f04f 0c0a 	mov.w	ip, #10
 800a66e:	4620      	mov	r0, r4
 800a670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a674:	3a30      	subs	r2, #48	; 0x30
 800a676:	2a09      	cmp	r2, #9
 800a678:	d903      	bls.n	800a682 <_vfiprintf_r+0x1ee>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0c5      	beq.n	800a60a <_vfiprintf_r+0x176>
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	e7c3      	b.n	800a60a <_vfiprintf_r+0x176>
 800a682:	fb0c 2101 	mla	r1, ip, r1, r2
 800a686:	4604      	mov	r4, r0
 800a688:	2301      	movs	r3, #1
 800a68a:	e7f0      	b.n	800a66e <_vfiprintf_r+0x1da>
 800a68c:	ab03      	add	r3, sp, #12
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	462a      	mov	r2, r5
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <_vfiprintf_r+0x258>)
 800a694:	a904      	add	r1, sp, #16
 800a696:	4630      	mov	r0, r6
 800a698:	f7fd fd46 	bl	8008128 <_printf_float>
 800a69c:	4607      	mov	r7, r0
 800a69e:	1c78      	adds	r0, r7, #1
 800a6a0:	d1d6      	bne.n	800a650 <_vfiprintf_r+0x1bc>
 800a6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a4:	07d9      	lsls	r1, r3, #31
 800a6a6:	d405      	bmi.n	800a6b4 <_vfiprintf_r+0x220>
 800a6a8:	89ab      	ldrh	r3, [r5, #12]
 800a6aa:	059a      	lsls	r2, r3, #22
 800a6ac:	d402      	bmi.n	800a6b4 <_vfiprintf_r+0x220>
 800a6ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6b0:	f7fd fbee 	bl	8007e90 <__retarget_lock_release_recursive>
 800a6b4:	89ab      	ldrh	r3, [r5, #12]
 800a6b6:	065b      	lsls	r3, r3, #25
 800a6b8:	f53f af12 	bmi.w	800a4e0 <_vfiprintf_r+0x4c>
 800a6bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6be:	e711      	b.n	800a4e4 <_vfiprintf_r+0x50>
 800a6c0:	ab03      	add	r3, sp, #12
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4b09      	ldr	r3, [pc, #36]	; (800a6ec <_vfiprintf_r+0x258>)
 800a6c8:	a904      	add	r1, sp, #16
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7fd ffd0 	bl	8008670 <_printf_i>
 800a6d0:	e7e4      	b.n	800a69c <_vfiprintf_r+0x208>
 800a6d2:	bf00      	nop
 800a6d4:	0800ace8 	.word	0x0800ace8
 800a6d8:	0800ad08 	.word	0x0800ad08
 800a6dc:	0800acc8 	.word	0x0800acc8
 800a6e0:	0800af4c 	.word	0x0800af4c
 800a6e4:	0800af56 	.word	0x0800af56
 800a6e8:	08008129 	.word	0x08008129
 800a6ec:	0800a46f 	.word	0x0800a46f
 800a6f0:	0800af52 	.word	0x0800af52

0800a6f4 <_read_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_read_r+0x20>)
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	4611      	mov	r1, r2
 800a6fe:	2200      	movs	r2, #0
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	461a      	mov	r2, r3
 800a704:	f7f7 fa7a 	bl	8001bfc <_read>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_read_r+0x1e>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_read_r+0x1e>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20004994 	.word	0x20004994

0800a718 <__swbuf_r>:
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	460e      	mov	r6, r1
 800a71c:	4614      	mov	r4, r2
 800a71e:	4605      	mov	r5, r0
 800a720:	b118      	cbz	r0, 800a72a <__swbuf_r+0x12>
 800a722:	6983      	ldr	r3, [r0, #24]
 800a724:	b90b      	cbnz	r3, 800a72a <__swbuf_r+0x12>
 800a726:	f7fd faef 	bl	8007d08 <__sinit>
 800a72a:	4b21      	ldr	r3, [pc, #132]	; (800a7b0 <__swbuf_r+0x98>)
 800a72c:	429c      	cmp	r4, r3
 800a72e:	d12b      	bne.n	800a788 <__swbuf_r+0x70>
 800a730:	686c      	ldr	r4, [r5, #4]
 800a732:	69a3      	ldr	r3, [r4, #24]
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	071a      	lsls	r2, r3, #28
 800a73a:	d52f      	bpl.n	800a79c <__swbuf_r+0x84>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	b36b      	cbz	r3, 800a79c <__swbuf_r+0x84>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	1ac0      	subs	r0, r0, r3
 800a746:	6963      	ldr	r3, [r4, #20]
 800a748:	b2f6      	uxtb	r6, r6
 800a74a:	4283      	cmp	r3, r0
 800a74c:	4637      	mov	r7, r6
 800a74e:	dc04      	bgt.n	800a75a <__swbuf_r+0x42>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f7ff f8cc 	bl	80098f0 <_fflush_r>
 800a758:	bb30      	cbnz	r0, 800a7a8 <__swbuf_r+0x90>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	60a3      	str	r3, [r4, #8]
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	6022      	str	r2, [r4, #0]
 800a766:	701e      	strb	r6, [r3, #0]
 800a768:	6963      	ldr	r3, [r4, #20]
 800a76a:	3001      	adds	r0, #1
 800a76c:	4283      	cmp	r3, r0
 800a76e:	d004      	beq.n	800a77a <__swbuf_r+0x62>
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	07db      	lsls	r3, r3, #31
 800a774:	d506      	bpl.n	800a784 <__swbuf_r+0x6c>
 800a776:	2e0a      	cmp	r6, #10
 800a778:	d104      	bne.n	800a784 <__swbuf_r+0x6c>
 800a77a:	4621      	mov	r1, r4
 800a77c:	4628      	mov	r0, r5
 800a77e:	f7ff f8b7 	bl	80098f0 <_fflush_r>
 800a782:	b988      	cbnz	r0, 800a7a8 <__swbuf_r+0x90>
 800a784:	4638      	mov	r0, r7
 800a786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <__swbuf_r+0x9c>)
 800a78a:	429c      	cmp	r4, r3
 800a78c:	d101      	bne.n	800a792 <__swbuf_r+0x7a>
 800a78e:	68ac      	ldr	r4, [r5, #8]
 800a790:	e7cf      	b.n	800a732 <__swbuf_r+0x1a>
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <__swbuf_r+0xa0>)
 800a794:	429c      	cmp	r4, r3
 800a796:	bf08      	it	eq
 800a798:	68ec      	ldreq	r4, [r5, #12]
 800a79a:	e7ca      	b.n	800a732 <__swbuf_r+0x1a>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f80c 	bl	800a7bc <__swsetup_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d0cb      	beq.n	800a740 <__swbuf_r+0x28>
 800a7a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a7ac:	e7ea      	b.n	800a784 <__swbuf_r+0x6c>
 800a7ae:	bf00      	nop
 800a7b0:	0800ace8 	.word	0x0800ace8
 800a7b4:	0800ad08 	.word	0x0800ad08
 800a7b8:	0800acc8 	.word	0x0800acc8

0800a7bc <__swsetup_r>:
 800a7bc:	4b32      	ldr	r3, [pc, #200]	; (800a888 <__swsetup_r+0xcc>)
 800a7be:	b570      	push	{r4, r5, r6, lr}
 800a7c0:	681d      	ldr	r5, [r3, #0]
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	b125      	cbz	r5, 800a7d2 <__swsetup_r+0x16>
 800a7c8:	69ab      	ldr	r3, [r5, #24]
 800a7ca:	b913      	cbnz	r3, 800a7d2 <__swsetup_r+0x16>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f7fd fa9b 	bl	8007d08 <__sinit>
 800a7d2:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <__swsetup_r+0xd0>)
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d10f      	bne.n	800a7f8 <__swsetup_r+0x3c>
 800a7d8:	686c      	ldr	r4, [r5, #4]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7e0:	0719      	lsls	r1, r3, #28
 800a7e2:	d42c      	bmi.n	800a83e <__swsetup_r+0x82>
 800a7e4:	06dd      	lsls	r5, r3, #27
 800a7e6:	d411      	bmi.n	800a80c <__swsetup_r+0x50>
 800a7e8:	2309      	movs	r3, #9
 800a7ea:	6033      	str	r3, [r6, #0]
 800a7ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7f0:	81a3      	strh	r3, [r4, #12]
 800a7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7f6:	e03e      	b.n	800a876 <__swsetup_r+0xba>
 800a7f8:	4b25      	ldr	r3, [pc, #148]	; (800a890 <__swsetup_r+0xd4>)
 800a7fa:	429c      	cmp	r4, r3
 800a7fc:	d101      	bne.n	800a802 <__swsetup_r+0x46>
 800a7fe:	68ac      	ldr	r4, [r5, #8]
 800a800:	e7eb      	b.n	800a7da <__swsetup_r+0x1e>
 800a802:	4b24      	ldr	r3, [pc, #144]	; (800a894 <__swsetup_r+0xd8>)
 800a804:	429c      	cmp	r4, r3
 800a806:	bf08      	it	eq
 800a808:	68ec      	ldreq	r4, [r5, #12]
 800a80a:	e7e6      	b.n	800a7da <__swsetup_r+0x1e>
 800a80c:	0758      	lsls	r0, r3, #29
 800a80e:	d512      	bpl.n	800a836 <__swsetup_r+0x7a>
 800a810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a812:	b141      	cbz	r1, 800a826 <__swsetup_r+0x6a>
 800a814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a818:	4299      	cmp	r1, r3
 800a81a:	d002      	beq.n	800a822 <__swsetup_r+0x66>
 800a81c:	4630      	mov	r0, r6
 800a81e:	f7ff fc67 	bl	800a0f0 <_free_r>
 800a822:	2300      	movs	r3, #0
 800a824:	6363      	str	r3, [r4, #52]	; 0x34
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	2300      	movs	r3, #0
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	89a3      	ldrh	r3, [r4, #12]
 800a838:	f043 0308 	orr.w	r3, r3, #8
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	6923      	ldr	r3, [r4, #16]
 800a840:	b94b      	cbnz	r3, 800a856 <__swsetup_r+0x9a>
 800a842:	89a3      	ldrh	r3, [r4, #12]
 800a844:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a84c:	d003      	beq.n	800a856 <__swsetup_r+0x9a>
 800a84e:	4621      	mov	r1, r4
 800a850:	4630      	mov	r0, r6
 800a852:	f000 f877 	bl	800a944 <__smakebuf_r>
 800a856:	89a0      	ldrh	r0, [r4, #12]
 800a858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a85c:	f010 0301 	ands.w	r3, r0, #1
 800a860:	d00a      	beq.n	800a878 <__swsetup_r+0xbc>
 800a862:	2300      	movs	r3, #0
 800a864:	60a3      	str	r3, [r4, #8]
 800a866:	6963      	ldr	r3, [r4, #20]
 800a868:	425b      	negs	r3, r3
 800a86a:	61a3      	str	r3, [r4, #24]
 800a86c:	6923      	ldr	r3, [r4, #16]
 800a86e:	b943      	cbnz	r3, 800a882 <__swsetup_r+0xc6>
 800a870:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a874:	d1ba      	bne.n	800a7ec <__swsetup_r+0x30>
 800a876:	bd70      	pop	{r4, r5, r6, pc}
 800a878:	0781      	lsls	r1, r0, #30
 800a87a:	bf58      	it	pl
 800a87c:	6963      	ldrpl	r3, [r4, #20]
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	e7f4      	b.n	800a86c <__swsetup_r+0xb0>
 800a882:	2000      	movs	r0, #0
 800a884:	e7f7      	b.n	800a876 <__swsetup_r+0xba>
 800a886:	bf00      	nop
 800a888:	20000010 	.word	0x20000010
 800a88c:	0800ace8 	.word	0x0800ace8
 800a890:	0800ad08 	.word	0x0800ad08
 800a894:	0800acc8 	.word	0x0800acc8

0800a898 <__assert_func>:
 800a898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a89a:	4614      	mov	r4, r2
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <__assert_func+0x2c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	68d8      	ldr	r0, [r3, #12]
 800a8a6:	b14c      	cbz	r4, 800a8bc <__assert_func+0x24>
 800a8a8:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <__assert_func+0x30>)
 800a8aa:	9100      	str	r1, [sp, #0]
 800a8ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8b0:	4906      	ldr	r1, [pc, #24]	; (800a8cc <__assert_func+0x34>)
 800a8b2:	462b      	mov	r3, r5
 800a8b4:	f000 f80e 	bl	800a8d4 <fiprintf>
 800a8b8:	f000 f8ec 	bl	800aa94 <abort>
 800a8bc:	4b04      	ldr	r3, [pc, #16]	; (800a8d0 <__assert_func+0x38>)
 800a8be:	461c      	mov	r4, r3
 800a8c0:	e7f3      	b.n	800a8aa <__assert_func+0x12>
 800a8c2:	bf00      	nop
 800a8c4:	20000010 	.word	0x20000010
 800a8c8:	0800af5d 	.word	0x0800af5d
 800a8cc:	0800af6a 	.word	0x0800af6a
 800a8d0:	0800af98 	.word	0x0800af98

0800a8d4 <fiprintf>:
 800a8d4:	b40e      	push	{r1, r2, r3}
 800a8d6:	b503      	push	{r0, r1, lr}
 800a8d8:	4601      	mov	r1, r0
 800a8da:	ab03      	add	r3, sp, #12
 800a8dc:	4805      	ldr	r0, [pc, #20]	; (800a8f4 <fiprintf+0x20>)
 800a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e2:	6800      	ldr	r0, [r0, #0]
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f7ff fdd5 	bl	800a494 <_vfiprintf_r>
 800a8ea:	b002      	add	sp, #8
 800a8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f0:	b003      	add	sp, #12
 800a8f2:	4770      	bx	lr
 800a8f4:	20000010 	.word	0x20000010

0800a8f8 <__swhatbuf_r>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	460e      	mov	r6, r1
 800a8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a900:	2900      	cmp	r1, #0
 800a902:	b096      	sub	sp, #88	; 0x58
 800a904:	4614      	mov	r4, r2
 800a906:	461d      	mov	r5, r3
 800a908:	da08      	bge.n	800a91c <__swhatbuf_r+0x24>
 800a90a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	602a      	str	r2, [r5, #0]
 800a912:	061a      	lsls	r2, r3, #24
 800a914:	d410      	bmi.n	800a938 <__swhatbuf_r+0x40>
 800a916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a91a:	e00e      	b.n	800a93a <__swhatbuf_r+0x42>
 800a91c:	466a      	mov	r2, sp
 800a91e:	f000 f8c1 	bl	800aaa4 <_fstat_r>
 800a922:	2800      	cmp	r0, #0
 800a924:	dbf1      	blt.n	800a90a <__swhatbuf_r+0x12>
 800a926:	9a01      	ldr	r2, [sp, #4]
 800a928:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a92c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a930:	425a      	negs	r2, r3
 800a932:	415a      	adcs	r2, r3
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	e7ee      	b.n	800a916 <__swhatbuf_r+0x1e>
 800a938:	2340      	movs	r3, #64	; 0x40
 800a93a:	2000      	movs	r0, #0
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	b016      	add	sp, #88	; 0x58
 800a940:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a944 <__smakebuf_r>:
 800a944:	898b      	ldrh	r3, [r1, #12]
 800a946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a948:	079d      	lsls	r5, r3, #30
 800a94a:	4606      	mov	r6, r0
 800a94c:	460c      	mov	r4, r1
 800a94e:	d507      	bpl.n	800a960 <__smakebuf_r+0x1c>
 800a950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	2301      	movs	r3, #1
 800a95a:	6163      	str	r3, [r4, #20]
 800a95c:	b002      	add	sp, #8
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	ab01      	add	r3, sp, #4
 800a962:	466a      	mov	r2, sp
 800a964:	f7ff ffc8 	bl	800a8f8 <__swhatbuf_r>
 800a968:	9900      	ldr	r1, [sp, #0]
 800a96a:	4605      	mov	r5, r0
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7fd fac7 	bl	8007f00 <_malloc_r>
 800a972:	b948      	cbnz	r0, 800a988 <__smakebuf_r+0x44>
 800a974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a978:	059a      	lsls	r2, r3, #22
 800a97a:	d4ef      	bmi.n	800a95c <__smakebuf_r+0x18>
 800a97c:	f023 0303 	bic.w	r3, r3, #3
 800a980:	f043 0302 	orr.w	r3, r3, #2
 800a984:	81a3      	strh	r3, [r4, #12]
 800a986:	e7e3      	b.n	800a950 <__smakebuf_r+0xc>
 800a988:	4b0d      	ldr	r3, [pc, #52]	; (800a9c0 <__smakebuf_r+0x7c>)
 800a98a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	6020      	str	r0, [r4, #0]
 800a990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a994:	81a3      	strh	r3, [r4, #12]
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	6163      	str	r3, [r4, #20]
 800a99a:	9b01      	ldr	r3, [sp, #4]
 800a99c:	6120      	str	r0, [r4, #16]
 800a99e:	b15b      	cbz	r3, 800a9b8 <__smakebuf_r+0x74>
 800a9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f000 f88f 	bl	800aac8 <_isatty_r>
 800a9aa:	b128      	cbz	r0, 800a9b8 <__smakebuf_r+0x74>
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f023 0303 	bic.w	r3, r3, #3
 800a9b2:	f043 0301 	orr.w	r3, r3, #1
 800a9b6:	81a3      	strh	r3, [r4, #12]
 800a9b8:	89a0      	ldrh	r0, [r4, #12]
 800a9ba:	4305      	orrs	r5, r0
 800a9bc:	81a5      	strh	r5, [r4, #12]
 800a9be:	e7cd      	b.n	800a95c <__smakebuf_r+0x18>
 800a9c0:	08007ca1 	.word	0x08007ca1

0800a9c4 <__ascii_mbtowc>:
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	b901      	cbnz	r1, 800a9ca <__ascii_mbtowc+0x6>
 800a9c8:	a901      	add	r1, sp, #4
 800a9ca:	b142      	cbz	r2, 800a9de <__ascii_mbtowc+0x1a>
 800a9cc:	b14b      	cbz	r3, 800a9e2 <__ascii_mbtowc+0x1e>
 800a9ce:	7813      	ldrb	r3, [r2, #0]
 800a9d0:	600b      	str	r3, [r1, #0]
 800a9d2:	7812      	ldrb	r2, [r2, #0]
 800a9d4:	1e10      	subs	r0, r2, #0
 800a9d6:	bf18      	it	ne
 800a9d8:	2001      	movne	r0, #1
 800a9da:	b002      	add	sp, #8
 800a9dc:	4770      	bx	lr
 800a9de:	4610      	mov	r0, r2
 800a9e0:	e7fb      	b.n	800a9da <__ascii_mbtowc+0x16>
 800a9e2:	f06f 0001 	mvn.w	r0, #1
 800a9e6:	e7f8      	b.n	800a9da <__ascii_mbtowc+0x16>

0800a9e8 <memmove>:
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	b510      	push	{r4, lr}
 800a9ec:	eb01 0402 	add.w	r4, r1, r2
 800a9f0:	d902      	bls.n	800a9f8 <memmove+0x10>
 800a9f2:	4284      	cmp	r4, r0
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	d807      	bhi.n	800aa08 <memmove+0x20>
 800a9f8:	1e43      	subs	r3, r0, #1
 800a9fa:	42a1      	cmp	r1, r4
 800a9fc:	d008      	beq.n	800aa10 <memmove+0x28>
 800a9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa06:	e7f8      	b.n	800a9fa <memmove+0x12>
 800aa08:	4402      	add	r2, r0
 800aa0a:	4601      	mov	r1, r0
 800aa0c:	428a      	cmp	r2, r1
 800aa0e:	d100      	bne.n	800aa12 <memmove+0x2a>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1a:	e7f7      	b.n	800aa0c <memmove+0x24>

0800aa1c <_realloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	4680      	mov	r8, r0
 800aa22:	4614      	mov	r4, r2
 800aa24:	460e      	mov	r6, r1
 800aa26:	b921      	cbnz	r1, 800aa32 <_realloc_r+0x16>
 800aa28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	f7fd ba67 	b.w	8007f00 <_malloc_r>
 800aa32:	b92a      	cbnz	r2, 800aa40 <_realloc_r+0x24>
 800aa34:	f7ff fb5c 	bl	800a0f0 <_free_r>
 800aa38:	4625      	mov	r5, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa40:	f000 f852 	bl	800aae8 <_malloc_usable_size_r>
 800aa44:	4284      	cmp	r4, r0
 800aa46:	4607      	mov	r7, r0
 800aa48:	d802      	bhi.n	800aa50 <_realloc_r+0x34>
 800aa4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa4e:	d812      	bhi.n	800aa76 <_realloc_r+0x5a>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4640      	mov	r0, r8
 800aa54:	f7fd fa54 	bl	8007f00 <_malloc_r>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d0ed      	beq.n	800aa3a <_realloc_r+0x1e>
 800aa5e:	42bc      	cmp	r4, r7
 800aa60:	4622      	mov	r2, r4
 800aa62:	4631      	mov	r1, r6
 800aa64:	bf28      	it	cs
 800aa66:	463a      	movcs	r2, r7
 800aa68:	f7fd fa13 	bl	8007e92 <memcpy>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4640      	mov	r0, r8
 800aa70:	f7ff fb3e 	bl	800a0f0 <_free_r>
 800aa74:	e7e1      	b.n	800aa3a <_realloc_r+0x1e>
 800aa76:	4635      	mov	r5, r6
 800aa78:	e7df      	b.n	800aa3a <_realloc_r+0x1e>

0800aa7a <__ascii_wctomb>:
 800aa7a:	b149      	cbz	r1, 800aa90 <__ascii_wctomb+0x16>
 800aa7c:	2aff      	cmp	r2, #255	; 0xff
 800aa7e:	bf85      	ittet	hi
 800aa80:	238a      	movhi	r3, #138	; 0x8a
 800aa82:	6003      	strhi	r3, [r0, #0]
 800aa84:	700a      	strbls	r2, [r1, #0]
 800aa86:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aa8a:	bf98      	it	ls
 800aa8c:	2001      	movls	r0, #1
 800aa8e:	4770      	bx	lr
 800aa90:	4608      	mov	r0, r1
 800aa92:	4770      	bx	lr

0800aa94 <abort>:
 800aa94:	b508      	push	{r3, lr}
 800aa96:	2006      	movs	r0, #6
 800aa98:	f000 f856 	bl	800ab48 <raise>
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	f7f7 f8a3 	bl	8001be8 <_exit>
	...

0800aaa4 <_fstat_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	; (800aac4 <_fstat_r+0x20>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	602b      	str	r3, [r5, #0]
 800aab2:	f7f7 f8e8 	bl	8001c86 <_fstat>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d102      	bne.n	800aac0 <_fstat_r+0x1c>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	b103      	cbz	r3, 800aac0 <_fstat_r+0x1c>
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	bf00      	nop
 800aac4:	20004994 	.word	0x20004994

0800aac8 <_isatty_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	; (800aae4 <_isatty_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f7 f8e7 	bl	8001ca6 <_isatty>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_isatty_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_isatty_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20004994 	.word	0x20004994

0800aae8 <_malloc_usable_size_r>:
 800aae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaec:	1f18      	subs	r0, r3, #4
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfbc      	itt	lt
 800aaf2:	580b      	ldrlt	r3, [r1, r0]
 800aaf4:	18c0      	addlt	r0, r0, r3
 800aaf6:	4770      	bx	lr

0800aaf8 <_raise_r>:
 800aaf8:	291f      	cmp	r1, #31
 800aafa:	b538      	push	{r3, r4, r5, lr}
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	d904      	bls.n	800ab0c <_raise_r+0x14>
 800ab02:	2316      	movs	r3, #22
 800ab04:	6003      	str	r3, [r0, #0]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab0e:	b112      	cbz	r2, 800ab16 <_raise_r+0x1e>
 800ab10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab14:	b94b      	cbnz	r3, 800ab2a <_raise_r+0x32>
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 f830 	bl	800ab7c <_getpid_r>
 800ab1c:	462a      	mov	r2, r5
 800ab1e:	4601      	mov	r1, r0
 800ab20:	4620      	mov	r0, r4
 800ab22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab26:	f000 b817 	b.w	800ab58 <_kill_r>
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d00a      	beq.n	800ab44 <_raise_r+0x4c>
 800ab2e:	1c59      	adds	r1, r3, #1
 800ab30:	d103      	bne.n	800ab3a <_raise_r+0x42>
 800ab32:	2316      	movs	r3, #22
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7e7      	b.n	800ab0a <_raise_r+0x12>
 800ab3a:	2400      	movs	r4, #0
 800ab3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab40:	4628      	mov	r0, r5
 800ab42:	4798      	blx	r3
 800ab44:	2000      	movs	r0, #0
 800ab46:	e7e0      	b.n	800ab0a <_raise_r+0x12>

0800ab48 <raise>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <raise+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f7ff bfd3 	b.w	800aaf8 <_raise_r>
 800ab52:	bf00      	nop
 800ab54:	20000010 	.word	0x20000010

0800ab58 <_kill_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_kill_r+0x20>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	f7f7 f82f 	bl	8001bc8 <_kill>
 800ab6a:	1c43      	adds	r3, r0, #1
 800ab6c:	d102      	bne.n	800ab74 <_kill_r+0x1c>
 800ab6e:	682b      	ldr	r3, [r5, #0]
 800ab70:	b103      	cbz	r3, 800ab74 <_kill_r+0x1c>
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	bd38      	pop	{r3, r4, r5, pc}
 800ab76:	bf00      	nop
 800ab78:	20004994 	.word	0x20004994

0800ab7c <_getpid_r>:
 800ab7c:	f7f7 b81c 	b.w	8001bb8 <_getpid>

0800ab80 <_init>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr

0800ab8c <_fini>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	bf00      	nop
 800ab90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab92:	bc08      	pop	{r3}
 800ab94:	469e      	mov	lr, r3
 800ab96:	4770      	bx	lr
